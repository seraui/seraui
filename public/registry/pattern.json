{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern",
  "title": "Pattern",
  "description": "A collection of beautiful background patterns designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "pattern.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef } from \"react\";\r\nimport { Copy, Eye, Check, Search, X, Heart } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { gridPatterns } from \"./patterns\";\r\nimport { CSSProperties } from \"react\";\r\n\r\n// Pattern data structure matching your patterns.ts file\r\ninterface Pattern {\r\n  id: string;\r\n  name: string;\r\n  category: \"gradients\" | \"geometric\" | \"decorative\" | \"effects\";\r\n  description?: string;\r\n  badge?: \"New\" | \"\";\r\n  style: CSSProperties;\r\n  code: string;\r\n}\r\n\r\n// Component to render pattern preview\r\nfunction PatternPreview({ pattern }: { pattern: Pattern }) {\r\n  return (\r\n    <div className=\"w-full h-full\" style={pattern.style}>\r\n      <div className=\"w-full h-full flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white opacity-80\">\r\n            {pattern.name}\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst categories = [\r\n  { id: \"all\", label: \"All Patterns\" },\r\n  { id: \"gradients\", label: \"Gradients\" },\r\n  { id: \"geometric\", label: \"Geometric\" },\r\n  { id: \"decorative\", label: \"Decorative\" },\r\n  { id: \"effects\", label: \"Effects\" },\r\n  { id: \"favorites\", label: \"Favorites\" },\r\n];\r\n\r\ninterface PatternCardProps {\r\n  pattern: Pattern;\r\n  onPreview: (pattern: Pattern) => void;\r\n  onCopy: (pattern: Pattern) => void;\r\n  copiedId: string | null;\r\n  isFavorite: boolean;\r\n  onToggleFavorite: (patternId: string) => void;\r\n}\r\n\r\nfunction PatternCard({\r\n  pattern,\r\n  onPreview,\r\n  onCopy,\r\n  copiedId,\r\n  isFavorite,\r\n  onToggleFavorite,\r\n}: PatternCardProps) {\r\n  return (\r\n    <div className=\"group relative bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 overflow-hidden hover:shadow-lg hover:shadow-zinc-200/50 dark:hover:shadow-zinc-900/50 transition-all duration-300 hover:border-zinc-300 dark:hover:border-zinc-700 hover:-translate-y-1\">\r\n      {/* Pattern Preview */}\r\n      <div\r\n        className=\"relative h-48 overflow-hidden cursor-pointer\"\r\n        onClick={() => onPreview(pattern)}\r\n      >\r\n        <div className=\"absolute inset-0 scale-110 transition-transform duration-300 group-hover:scale-105\">\r\n          <PatternPreview pattern={pattern} />\r\n        </div>\r\n\r\n        {/* Overlay with buttons - visible on hover/tap */}\r\n        <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-3 md:gap-2\">\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onPreview(pattern);\r\n            }}\r\n            className=\"flex items-center gap-2 px-3 py-2 md:px-4 md:py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-xs md:text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\r\n          >\r\n            <Eye size={14} className=\"md:w-4 md:h-4\" />\r\n            <span className=\"hidden sm:inline\">Preview</span>\r\n          </button>\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onCopy(pattern);\r\n            }}\r\n            className=\"flex items-center gap-2 px-3 py-2 md:px-4 md:py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-xs md:text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\r\n          >\r\n            {copiedId === pattern.id ? (\r\n              <Check size={14} className=\"md:w-4 md:h-4\" />\r\n            ) : (\r\n              <Copy size={14} className=\"md:w-4 md:h-4\" />\r\n            )}\r\n            <span className=\"hidden sm:inline\">\r\n              {copiedId === pattern.id ? \"Copied\" : \"Copy\"}\r\n            </span>\r\n          </button>\r\n        </div>\r\n\r\n        {/* New badge and Favorite button */}\r\n        <div className=\"absolute top-3 right-3 flex items-center gap-2\">\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onToggleFavorite(pattern.id);\r\n            }}\r\n            className={cn(\r\n              \"p-1.5 rounded-full backdrop-blur-sm transition-colors shadow-lg\",\r\n              isFavorite\r\n                ? \"bg-red-500/90 text-white hover:bg-red-600/90\"\r\n                : \"bg-white/90 dark:bg-zinc-900/90 text-zinc-600 dark:text-zinc-400 hover:text-red-500 dark:hover:text-red-400\"\r\n            )}\r\n          >\r\n            <Heart size={14} className={isFavorite ? \"fill-current\" : \"\"} />\r\n          </button>\r\n          {pattern.badge === \"New\" && (\r\n            <div className=\"px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full shadow-lg\">\r\n              New\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Pattern Info */}\r\n      <div className=\"p-4\">\r\n        <h3 className=\"font-medium text-zinc-900 dark:text-zinc-100 text-sm truncate\">\r\n          {pattern.name}\r\n        </h3>\r\n        <p className=\"text-xs text-zinc-500 dark:text-zinc-400 mt-1 capitalize\">\r\n          {pattern.category}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function PatternCraftInterface() {\r\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\r\n  const [previewPattern, setPreviewPattern] = useState<Pattern | null>(null);\r\n  const [copiedId, setCopiedId] = useState<string | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\r\n  const previewRef = useRef<HTMLDivElement>(null);\r\n\r\n  const filteredPatterns = gridPatterns.filter((pattern) => {\r\n    const matchesCategory =\r\n      selectedCategory === \"all\" ||\r\n      pattern.category === selectedCategory ||\r\n      (selectedCategory === \"favorites\" && favorites.has(pattern.id));\r\n    const matchesSearch = pattern.name\r\n      .toLowerCase()\r\n      .includes(searchQuery.toLowerCase());\r\n    return matchesCategory && matchesSearch;\r\n  });\r\n\r\n  const handleToggleFavorite = (patternId: string) => {\r\n    setFavorites((prev) => {\r\n      const newFavorites = new Set(prev);\r\n      if (newFavorites.has(patternId)) {\r\n        newFavorites.delete(patternId);\r\n      } else {\r\n        newFavorites.add(patternId);\r\n      }\r\n      return newFavorites;\r\n    });\r\n  };\r\n\r\n  const handlePreview = (pattern: Pattern) => {\r\n    setPreviewPattern(pattern);\r\n    // Scroll to preview section\r\n    setTimeout(() => {\r\n      previewRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, 100);\r\n  };\r\n\r\n  const handleCopy = async (pattern: Pattern) => {\r\n    try {\r\n      // Use the actual code from the pattern\r\n      await navigator.clipboard.writeText(pattern.code);\r\n      setCopiedId(pattern.id);\r\n      setTimeout(() => setCopiedId(null), 2000);\r\n    } catch (error) {\r\n      console.error(\"Failed to copy:\", error);\r\n      // Fallback copy\r\n      const fallbackContent = `// ${pattern.name} Pattern\r\n${pattern.code}`;\r\n      await navigator.clipboard.writeText(fallbackContent);\r\n      setCopiedId(pattern.id);\r\n      setTimeout(() => setCopiedId(null), 2000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-7xl mx-auto\">\r\n      {/* Header */}\r\n      <div className=\"text-center\">\r\n        <h2 className=\"text-2xl font-bold text-zinc-900 dark:text-zinc-100 mb-2\">\r\n          Pattern Library\r\n        </h2>\r\n        <p className=\"text-zinc-600 dark:text-zinc-400\">\r\n          Tap on mobile or hover on desktop to see options {\" \"}\r\n          <span>Inspired by PatternCraft</span>\r\n        </p>\r\n      </div>\r\n\r\n      {/* Search Bar */}\r\n      <div className=\"max-w-md mx-auto mb-6\">\r\n        <div className=\"relative\">\r\n          <Search\r\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400\"\r\n            size={20}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search patterns...\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"w-full pl-10 pr-10 py-3 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg text-zinc-900 dark:text-zinc-100 placeholder-zinc-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n          />\r\n          {searchQuery && (\r\n            <button\r\n              onClick={() => setSearchQuery(\"\")}\r\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-zinc-400 hover:text-zinc-600 dark:hover:text-zinc-300\"\r\n            >\r\n              <X size={20} />\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Category Filter */}\r\n      <div className=\"flex flex-wrap justify-center gap-2 mb-8\">\r\n        {categories.map((category) => (\r\n          <button\r\n            key={category.id}\r\n            onClick={() => setSelectedCategory(category.id)}\r\n            className={cn(\r\n              \"px-4 py-2 rounded-lg text-sm font-medium transition-colors\",\r\n              selectedCategory === category.id\r\n                ? \"bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900\"\r\n                : \"bg-zinc-100 dark:bg-zinc-800 text-zinc-700 dark:text-zinc-300 hover:bg-zinc-200 dark:hover:bg-zinc-700\"\r\n            )}\r\n          >\r\n            {category.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Results Counter */}\r\n      <div className=\"text-center mb-6\">\r\n        <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\r\n          {filteredPatterns.length} pattern\r\n          {filteredPatterns.length !== 1 ? \"s\" : \"\"} found\r\n        </p>\r\n      </div>\r\n\r\n      {/* Pattern Grid */}\r\n      {filteredPatterns.length > 0 ? (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\r\n          {filteredPatterns.map((pattern) => (\r\n            <PatternCard\r\n              key={pattern.id}\r\n              pattern={pattern}\r\n              onPreview={handlePreview}\r\n              onCopy={handleCopy}\r\n              copiedId={copiedId}\r\n              isFavorite={favorites.has(pattern.id)}\r\n              onToggleFavorite={handleToggleFavorite}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-center py-12 mb-12\">\r\n          <div className=\"text-zinc-400 dark:text-zinc-600 mb-4\">\r\n            {selectedCategory === \"favorites\" ? (\r\n              <Heart size={48} className=\"mx-auto\" />\r\n            ) : (\r\n              <Search size={48} className=\"mx-auto\" />\r\n            )}\r\n          </div>\r\n          <h3 className=\"text-lg font-medium text-zinc-900 dark:text-zinc-100 mb-2\">\r\n            {selectedCategory === \"favorites\"\r\n              ? \"No favorites yet\"\r\n              : \"No patterns found\"}\r\n          </h3>\r\n          <p className=\"text-zinc-600 dark:text-zinc-400\">\r\n            {selectedCategory === \"favorites\"\r\n              ? \"Click the heart icon on patterns to add them to your favorites\"\r\n              : \"Try adjusting your search or category filter\"}\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Preview Section */}\r\n      {previewPattern && (\r\n        <div\r\n          ref={previewRef}\r\n          className=\"border-t border-zinc-200 dark:border-zinc-800 pt-12\"\r\n        >\r\n          <div className=\"text-center mb-6\">\r\n            <div className=\"flex items-center justify-center gap-3 mb-2\">\r\n              <h3 className=\"text-xl font-bold text-zinc-900 dark:text-zinc-100\">\r\n                {previewPattern.name}\r\n              </h3>\r\n              {previewPattern.badge === \"New\" && (\r\n                <span className=\"px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full\">\r\n                  New\r\n                </span>\r\n              )}\r\n            </div>\r\n            <p className=\"text-zinc-600 dark:text-zinc-400 mb-1\">\r\n              Full preview of the selected pattern\r\n            </p>\r\n            <p className=\"text-xs text-zinc-500 dark:text-zinc-400 capitalize\">\r\n              Category: {previewPattern.category}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"relative bg-zinc-50 dark:bg-zinc-950 rounded-xl border border-zinc-200 dark:border-zinc-800 overflow-hidden\">\r\n            <div className=\"h-[500px] md:h-[600px] lg:h-[700px]\">\r\n              <PatternPreview pattern={previewPattern} />\r\n            </div>\r\n\r\n            {/* Preview Controls */}\r\n            <div className=\"absolute top-4 right-4 flex gap-2\">\r\n              <button\r\n                onClick={() => setPreviewPattern(null)}\r\n                className=\"flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\r\n              >\r\n                <X size={16} />\r\n                <span className=\"hidden sm:inline\">Close</span>\r\n              </button>\r\n              <button\r\n                onClick={() => handleCopy(previewPattern)}\r\n                className=\"flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\r\n              >\r\n                {copiedId === previewPattern.id ? (\r\n                  <Check size={16} />\r\n                ) : (\r\n                  <Copy size={16} />\r\n                )}\r\n                {copiedId === previewPattern.id ? \"Copied\" : \"Copy Code\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "pattern-craft-interface.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef } from \"react\";\r\nimport { Copy, Eye, Check, Search, X, Heart } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { gridPatterns } from \"./patterns\";\r\nimport { CSSProperties } from \"react\";\r\n\r\n// Pattern data structure matching your patterns.ts file\r\ninterface Pattern {\r\n  id: string;\r\n  name: string;\r\n  category: \"gradients\" | \"geometric\" | \"decorative\" | \"effects\";\r\n  description?: string;\r\n  badge?: \"New\" | \"\";\r\n  style: CSSProperties;\r\n  code: string;\r\n}\r\n\r\n// Component to render pattern preview\r\nfunction PatternPreview({ pattern }: { pattern: Pattern }) {\r\n  return (\r\n    <div className=\"w-full h-full\" style={pattern.style}>\r\n      <div className=\"w-full h-full flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white opacity-80\">\r\n            {pattern.name}\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst categories = [\r\n  { id: \"all\", label: \"All Patterns\" },\r\n  { id: \"gradients\", label: \"Gradients\" },\r\n  { id: \"geometric\", label: \"Geometric\" },\r\n  { id: \"decorative\", label: \"Decorative\" },\r\n  { id: \"effects\", label: \"Effects\" },\r\n  { id: \"favorites\", label: \"Favorites\" },\r\n];\r\n\r\ninterface PatternCardProps {\r\n  pattern: Pattern;\r\n  onPreview: (pattern: Pattern) => void;\r\n  onCopy: (pattern: Pattern) => void;\r\n  copiedId: string | null;\r\n  isFavorite: boolean;\r\n  onToggleFavorite: (patternId: string) => void;\r\n}\r\n\r\nfunction PatternCard({\r\n  pattern,\r\n  onPreview,\r\n  onCopy,\r\n  copiedId,\r\n  isFavorite,\r\n  onToggleFavorite,\r\n}: PatternCardProps) {\r\n  return (\r\n    <div className=\"group relative bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 overflow-hidden hover:shadow-lg hover:shadow-zinc-200/50 dark:hover:shadow-zinc-900/50 transition-all duration-300 hover:border-zinc-300 dark:hover:border-zinc-700 hover:-translate-y-1\">\r\n      {/* Pattern Preview */}\r\n      <div\r\n        className=\"relative h-48 overflow-hidden cursor-pointer\"\r\n        onClick={() => onPreview(pattern)}\r\n      >\r\n        <div className=\"absolute inset-0 scale-110 transition-transform duration-300 group-hover:scale-105\">\r\n          <PatternPreview pattern={pattern} />\r\n        </div>\r\n\r\n        {/* Overlay with buttons - visible on hover/tap */}\r\n        <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-3 md:gap-2\">\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onPreview(pattern);\r\n            }}\r\n            className=\"flex items-center gap-2 px-3 py-2 md:px-4 md:py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-xs md:text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\r\n          >\r\n            <Eye size={14} className=\"md:w-4 md:h-4\" />\r\n            <span className=\"hidden sm:inline\">Preview</span>\r\n          </button>\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onCopy(pattern);\r\n            }}\r\n            className=\"flex items-center gap-2 px-3 py-2 md:px-4 md:py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-xs md:text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\r\n          >\r\n            {copiedId === pattern.id ? (\r\n              <Check size={14} className=\"md:w-4 md:h-4\" />\r\n            ) : (\r\n              <Copy size={14} className=\"md:w-4 md:h-4\" />\r\n            )}\r\n            <span className=\"hidden sm:inline\">\r\n              {copiedId === pattern.id ? \"Copied\" : \"Copy\"}\r\n            </span>\r\n          </button>\r\n        </div>\r\n\r\n        {/* New badge and Favorite button */}\r\n        <div className=\"absolute top-3 right-3 flex items-center gap-2\">\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onToggleFavorite(pattern.id);\r\n            }}\r\n            className={cn(\r\n              \"p-1.5 rounded-full backdrop-blur-sm transition-colors shadow-lg\",\r\n              isFavorite\r\n                ? \"bg-red-500/90 text-white hover:bg-red-600/90\"\r\n                : \"bg-white/90 dark:bg-zinc-900/90 text-zinc-600 dark:text-zinc-400 hover:text-red-500 dark:hover:text-red-400\"\r\n            )}\r\n          >\r\n            <Heart size={14} className={isFavorite ? \"fill-current\" : \"\"} />\r\n          </button>\r\n          {pattern.badge === \"New\" && (\r\n            <div className=\"px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full shadow-lg\">\r\n              New\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Pattern Info */}\r\n      <div className=\"p-4\">\r\n        <h3 className=\"font-medium text-zinc-900 dark:text-zinc-100 text-sm truncate\">\r\n          {pattern.name}\r\n        </h3>\r\n        <p className=\"text-xs text-zinc-500 dark:text-zinc-400 mt-1 capitalize\">\r\n          {pattern.category}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function PatternCraftInterface() {\r\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\r\n  const [previewPattern, setPreviewPattern] = useState<Pattern | null>(null);\r\n  const [copiedId, setCopiedId] = useState<string | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\r\n  const previewRef = useRef<HTMLDivElement>(null);\r\n\r\n  const filteredPatterns = gridPatterns.filter((pattern) => {\r\n    const matchesCategory =\r\n      selectedCategory === \"all\" ||\r\n      pattern.category === selectedCategory ||\r\n      (selectedCategory === \"favorites\" && favorites.has(pattern.id));\r\n    const matchesSearch = pattern.name\r\n      .toLowerCase()\r\n      .includes(searchQuery.toLowerCase());\r\n    return matchesCategory && matchesSearch;\r\n  });\r\n\r\n  const handleToggleFavorite = (patternId: string) => {\r\n    setFavorites((prev) => {\r\n      const newFavorites = new Set(prev);\r\n      if (newFavorites.has(patternId)) {\r\n        newFavorites.delete(patternId);\r\n      } else {\r\n        newFavorites.add(patternId);\r\n      }\r\n      return newFavorites;\r\n    });\r\n  };\r\n\r\n  const handlePreview = (pattern: Pattern) => {\r\n    setPreviewPattern(pattern);\r\n    // Scroll to preview section\r\n    setTimeout(() => {\r\n      previewRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, 100);\r\n  };\r\n\r\n  const handleCopy = async (pattern: Pattern) => {\r\n    try {\r\n      // Use the actual code from the pattern\r\n      await navigator.clipboard.writeText(pattern.code);\r\n      setCopiedId(pattern.id);\r\n      setTimeout(() => setCopiedId(null), 2000);\r\n    } catch (error) {\r\n      console.error(\"Failed to copy:\", error);\r\n      // Fallback copy\r\n      const fallbackContent = `// ${pattern.name} Pattern\r\n${pattern.code}`;\r\n      await navigator.clipboard.writeText(fallbackContent);\r\n      setCopiedId(pattern.id);\r\n      setTimeout(() => setCopiedId(null), 2000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-7xl mx-auto\">\r\n      {/* Header */}\r\n      <div className=\"text-center\">\r\n        <h2 className=\"text-2xl font-bold text-zinc-900 dark:text-zinc-100 mb-2\">\r\n          Pattern Library\r\n        </h2>\r\n        <p className=\"text-zinc-600 dark:text-zinc-400\">\r\n          Tap on mobile or hover on desktop to see options {\" \"}\r\n          <span>Inspired by PatternCraft</span>\r\n        </p>\r\n      </div>\r\n\r\n      {/* Search Bar */}\r\n      <div className=\"max-w-md mx-auto mb-6\">\r\n        <div className=\"relative\">\r\n          <Search\r\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400\"\r\n            size={20}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search patterns...\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"w-full pl-10 pr-10 py-3 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg text-zinc-900 dark:text-zinc-100 placeholder-zinc-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n          />\r\n          {searchQuery && (\r\n            <button\r\n              onClick={() => setSearchQuery(\"\")}\r\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-zinc-400 hover:text-zinc-600 dark:hover:text-zinc-300\"\r\n            >\r\n              <X size={20} />\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Category Filter */}\r\n      <div className=\"flex flex-wrap justify-center gap-2 mb-8\">\r\n        {categories.map((category) => (\r\n          <button\r\n            key={category.id}\r\n            onClick={() => setSelectedCategory(category.id)}\r\n            className={cn(\r\n              \"px-4 py-2 rounded-lg text-sm font-medium transition-colors\",\r\n              selectedCategory === category.id\r\n                ? \"bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900\"\r\n                : \"bg-zinc-100 dark:bg-zinc-800 text-zinc-700 dark:text-zinc-300 hover:bg-zinc-200 dark:hover:bg-zinc-700\"\r\n            )}\r\n          >\r\n            {category.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Results Counter */}\r\n      <div className=\"text-center mb-6\">\r\n        <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\r\n          {filteredPatterns.length} pattern\r\n          {filteredPatterns.length !== 1 ? \"s\" : \"\"} found\r\n        </p>\r\n      </div>\r\n\r\n      {/* Pattern Grid */}\r\n      {filteredPatterns.length > 0 ? (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\r\n          {filteredPatterns.map((pattern) => (\r\n            <PatternCard\r\n              key={pattern.id}\r\n              pattern={pattern}\r\n              onPreview={handlePreview}\r\n              onCopy={handleCopy}\r\n              copiedId={copiedId}\r\n              isFavorite={favorites.has(pattern.id)}\r\n              onToggleFavorite={handleToggleFavorite}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-center py-12 mb-12\">\r\n          <div className=\"text-zinc-400 dark:text-zinc-600 mb-4\">\r\n            {selectedCategory === \"favorites\" ? (\r\n              <Heart size={48} className=\"mx-auto\" />\r\n            ) : (\r\n              <Search size={48} className=\"mx-auto\" />\r\n            )}\r\n          </div>\r\n          <h3 className=\"text-lg font-medium text-zinc-900 dark:text-zinc-100 mb-2\">\r\n            {selectedCategory === \"favorites\"\r\n              ? \"No favorites yet\"\r\n              : \"No patterns found\"}\r\n          </h3>\r\n          <p className=\"text-zinc-600 dark:text-zinc-400\">\r\n            {selectedCategory === \"favorites\"\r\n              ? \"Click the heart icon on patterns to add them to your favorites\"\r\n              : \"Try adjusting your search or category filter\"}\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Preview Section */}\r\n      {previewPattern && (\r\n        <div\r\n          ref={previewRef}\r\n          className=\"border-t border-zinc-200 dark:border-zinc-800 pt-12\"\r\n        >\r\n          <div className=\"text-center mb-6\">\r\n            <div className=\"flex items-center justify-center gap-3 mb-2\">\r\n              <h3 className=\"text-xl font-bold text-zinc-900 dark:text-zinc-100\">\r\n                {previewPattern.name}\r\n              </h3>\r\n              {previewPattern.badge === \"New\" && (\r\n                <span className=\"px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full\">\r\n                  New\r\n                </span>\r\n              )}\r\n            </div>\r\n            <p className=\"text-zinc-600 dark:text-zinc-400 mb-1\">\r\n              Full preview of the selected pattern\r\n            </p>\r\n            <p className=\"text-xs text-zinc-500 dark:text-zinc-400 capitalize\">\r\n              Category: {previewPattern.category}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"relative bg-zinc-50 dark:bg-zinc-950 rounded-xl border border-zinc-200 dark:border-zinc-800 overflow-hidden\">\r\n            <div className=\"h-[500px] md:h-[600px] lg:h-[700px]\">\r\n              <PatternPreview pattern={previewPattern} />\r\n            </div>\r\n\r\n            {/* Preview Controls */}\r\n            <div className=\"absolute top-4 right-4 flex gap-2\">\r\n              <button\r\n                onClick={() => setPreviewPattern(null)}\r\n                className=\"flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\r\n              >\r\n                <X size={16} />\r\n                <span className=\"hidden sm:inline\">Close</span>\r\n              </button>\r\n              <button\r\n                onClick={() => handleCopy(previewPattern)}\r\n                className=\"flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\r\n              >\r\n                {copiedId === previewPattern.id ? (\r\n                  <Check size={16} />\r\n                ) : (\r\n                  <Copy size={16} />\r\n                )}\r\n                {copiedId === previewPattern.id ? \"Copied\" : \"Copy Code\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}