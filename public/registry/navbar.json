{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navbar",
  "title": "Navbar",
  "description": "A minimalistic navbar component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "navbar.tsx",
      "content": "'use client';\r\nimport React, { useState, useId, useRef, useEffect, ReactNode } from 'react';\r\n\r\n// Type definitions\r\ninterface SearchIconProps {\r\n  size?: number;\r\n}\r\n\r\ninterface ButtonProps {\r\n  asChild?: boolean;\r\n  className?: string;\r\n  variant?: 'default' | 'ghost';\r\n  size?: 'default' | 'sm' | 'icon';\r\n  children?: ReactNode;\r\n  onClick?: () => void;\r\n}\r\n\r\ninterface InputProps {\r\n  className?: string;\r\n  id?: string;\r\n  placeholder?: string;\r\n  type?: string;\r\n  autoFocus?: boolean;\r\n}\r\n\r\ninterface NavigationMenuProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\ninterface NavigationMenuListProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\ninterface NavigationMenuItemProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n  role?: string;\r\n  'aria-hidden'?: boolean;\r\n  key?: number;\r\n}\r\n\r\ninterface NavigationMenuLinkProps {\r\n  href: string;\r\n  className?: string;\r\n  children: ReactNode;\r\n}\r\n\r\ninterface PopoverContextType {\r\n  isOpen: boolean;\r\n  setIsOpen: (value: boolean | ((prev: boolean) => boolean)) => void;\r\n  popoverRef: React.RefObject<HTMLDivElement | null>;\r\n}\r\n\r\ninterface PopoverProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface PopoverTriggerProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface PopoverContentProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n  align?: 'start' | 'center' | 'end';\r\n}\r\n\r\n// Helper components to replicate the UI library's functionality\r\n\r\n// --- Icon Components ---\r\nconst SearchIcon: React.FC<SearchIconProps> = ({ size = 16, ...props }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width={size}\r\n    height={size}\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <circle cx=\"11\" cy=\"11\" r=\"8\" />\r\n    <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" />\r\n  </svg>\r\n);\r\n\r\n\r\n\r\n// This component relies on the parent's `group` and `aria-expanded` attribute for animations.\r\nconst MenuIcon: React.FC = () => (\r\n    <svg\r\n        className=\"pointer-events-none\"\r\n        width={16}\r\n        height={16}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n        <path\r\n            d=\"M4 12L20 12\"\r\n            className=\"origin-center -translate-y-[7px] transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.1)] group-aria-expanded:translate-x-0 group-aria-expanded:translate-y-0 group-aria-expanded:rotate-[315deg]\"\r\n        />\r\n        <path\r\n            d=\"M4 12H20\"\r\n            className=\"origin-center transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.8)] group-aria-expanded:rotate-45\"\r\n        />\r\n        <path\r\n            d=\"M4 12H20\"\r\n            className=\"origin-center translate-y-[7px] transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.1)] group-aria-expanded:translate-y-0 group-aria-expanded:rotate-[135deg]\"\r\n        />\r\n    </svg>\r\n);\r\n\r\n// --- UI Components ---\r\nconst Logo: React.FC = () => (\r\n    <div className=\"flex items-center justify-center gap-2\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 200 200\" width=\"28\" height=\"28\">\r\n            <g clipPath=\"url(#cs_clip_1_flower-1)\">\r\n                <mask id=\"cs_mask_1_flower-1\" style={{ maskType: \"alpha\" }} width=\"200\" height=\"186\" x=\"0\" y=\"7\" maskUnits=\"userSpaceOnUse\">\r\n                    <path fill=\"#fff\" d=\"M150.005 128.863c66.681 38.481-49.997 105.828-49.997 28.861 0 76.967-116.658 9.62-49.997-28.861-66.681 38.481-66.681-96.207 0-57.727-66.681-38.48 49.997-105.827 49.997-28.86 0-76.967 116.657-9.62 49.997 28.86 66.66-38.48 66.66 96.208 0 57.727z\"></path>\r\n                </mask>\r\n                <g mask=\"url(#cs_mask_1_flower-1)\">\r\n                    <path fill=\"#fff\" d=\"M200 0H0v200h200V0z\"></path>\r\n                    <path fill=\"url(#paint0_linear_748_4711)\" d=\"M200 0H0v200h200V0z\"></path>\r\n                    <g filter=\"url(#filter0_f_748_4711)\">\r\n                        <path fill=\"#FF58E4\" d=\"M130 0H69v113h61V0z\"></path>\r\n                        <path fill=\"#0CE548\" fillOpacity=\"0.35\" d=\"M196 91H82v102h114V91z\"></path>\r\n                        <path fill=\"#FFE500\" fillOpacity=\"0.74\" d=\"M113 80H28v120h85V80z\"></path>\r\n                    </g>\r\n                </g>\r\n            </g>\r\n            <defs>\r\n                <filter id=\"filter0_f_748_4711\" width=\"278\" height=\"310\" x=\"-27\" y=\"-55\" colorInterpolationFilters=\"sRGB\" filterUnits=\"userSpaceOnUse\">\r\n                    <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\"></feFlood>\r\n                    <feBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"></feBlend>\r\n                    <feGaussianBlur result=\"effect1_foregroundBlur_748_4711\" stdDeviation=\"27.5\"></feGaussianBlur>\r\n                </filter>\r\n                <linearGradient id=\"paint0_linear_748_4711\" x1=\"186.5\" x2=\"37\" y1=\"37\" y2=\"186.5\" gradientUnits=\"userSpaceOnUse\">\r\n                    <stop stopColor=\"#0E6FFF\" stopOpacity=\"0.51\"></stop>\r\n                    <stop offset=\"1\" stopColor=\"#00F0FF\" stopOpacity=\"0.59\"></stop>\r\n                </linearGradient>\r\n                <clipPath id=\"cs_clip_1_flower-1\">\r\n                    <path fill=\"#fff\" d=\"M0 0H200V200H0z\"></path>\r\n                </clipPath>\r\n            </defs>\r\n            <g style={{ mixBlendMode: \"overlay\" }} mask=\"url(#cs_mask_1_flower-1)\">\r\n                <path fill=\"gray\" stroke=\"transparent\" d=\"M200 0H0v200h200V0z\" filter=\"url(#cs_noise_1_flower-1)\"></path>\r\n            </g>\r\n            <defs>\r\n                <filter id=\"cs_noise_1_flower-1\" width=\"100%\" height=\"100%\" x=\"0%\" y=\"0%\" filterUnits=\"objectBoundingBox\">\r\n                    <feTurbulence baseFrequency=\"0.6\" numOctaves=\"5\" result=\"out1\" seed=\"4\"></feTurbulence>\r\n                    <feComposite in=\"out1\" in2=\"SourceGraphic\" operator=\"in\" result=\"out2\"></feComposite>\r\n                    <feBlend in=\"SourceGraphic\" in2=\"out2\" mode=\"overlay\" result=\"out3\"></feBlend>\r\n                </filter>\r\n            </defs>\r\n        </svg>\r\n        <span className=\"font-bold text-lg tracking-wider\">Sera UI</span>\r\n    </div>\r\n);\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({ asChild = false, className = '', variant = 'default', size = 'default', children, ...props }, ref) => {\r\n    const Comp = asChild ? 'span' : 'button';\r\n    const baseClasses = \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\";\r\n    const variantClasses: Record<string, string> = {\r\n        default: \"bg-slate-900 dark:bg-slate-100 text-white dark:text-slate-900 hover:bg-slate-900/90 dark:hover:bg-slate-200\",\r\n        ghost: \"hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100\",\r\n    };\r\n    const sizeClasses: Record<string, string> = {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        icon: \"h-10 w-10\",\r\n    };\r\n    const elementProps = props as React.HTMLAttributes<HTMLElement>;\r\n    return <Comp className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`} ref={ref} {...elementProps}>{children}</Comp>;\r\n});\r\nButton.displayName = 'Button';\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className = '', ...props }, ref) => (\r\n    <input\r\n        className={`flex h-10 w-full rounded-md border border-slate-200 dark:border-slate-700 bg-background dark:bg-slate-900 px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-slate-500 dark:placeholder:text-slate-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400 dark:focus-visible:ring-slate-600 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}\r\n        ref={ref}\r\n        {...props}\r\n    />\r\n));\r\nInput.displayName = 'Input';\r\n\r\nconst NavigationMenu: React.FC<NavigationMenuProps> = ({ children, className = '' }) => <nav className={`relative z-10 ${className}`}>{children}</nav>;\r\nconst NavigationMenuList: React.FC<NavigationMenuListProps> = ({ children, className = '' }) => <ul className={`flex items-center ${className}`}>{children}</ul>;\r\nconst NavigationMenuItem: React.FC<NavigationMenuItemProps> = ({ children, className = '', ...props }) => <li className={`list-none ${className}`} {...props}>{children}</li>;\r\nconst NavigationMenuLink: React.FC<NavigationMenuLinkProps> = ({ href, className = '', children }) => (\r\n    <a href={href} className={`block px-3 transition-colors ${className}`}>\r\n        {children}\r\n    </a>\r\n);\r\n\r\n// --- Popover Component ---\r\nconst PopoverContext = React.createContext<PopoverContextType | undefined>(undefined);\r\n\r\nconst Popover: React.FC<PopoverProps> = ({ children }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const popoverRef = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n                setIsOpen(false);\r\n            }\r\n        };\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }, []);\r\n    return (\r\n        <PopoverContext.Provider value={{ isOpen, setIsOpen, popoverRef }}>\r\n            <div ref={popoverRef} className=\"relative\">{children}</div>\r\n        </PopoverContext.Provider>\r\n    );\r\n};\r\n\r\nconst PopoverTrigger: React.FC<PopoverTriggerProps> = ({ children }) => {\r\n    const context = React.useContext(PopoverContext);\r\n    if (!context) throw new Error('PopoverTrigger must be used within a Popover');\r\n    const { isOpen, setIsOpen } = context;\r\n    const child = React.Children.only(children);\r\n    return React.cloneElement(child as React.ReactElement<{ onClick?: () => void; 'aria-expanded'?: boolean }>, {\r\n        onClick: () => setIsOpen((open: boolean) => !open),\r\n        'aria-expanded': isOpen\r\n    });\r\n};\r\n\r\nconst PopoverContent: React.FC<PopoverContentProps> = ({ children, className = '', align = 'center' }) => {\r\n    const context = React.useContext(PopoverContext);\r\n    if (!context) throw new Error('PopoverContent must be used within a Popover');\r\n    const { isOpen } = context;\r\n    const alignmentClasses: Record<string, string> = { start: 'left-0', center: 'left-1/2 -translate-x-1/2', end: 'right-0' };\r\n    if (!isOpen) return null;\r\n    return (\r\n        <div className={`absolute top-full mt-2 w-screen max-w-xs z-20 rounded-xl backdrop-blur-xl bg-white/80 dark:bg-black/90 border border-emerald-400/60 dark:border-emerald-500/70 p-2 ${alignmentClasses[align]} ${className}`}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n// --- Main Header Component ---\r\nconst navigationLinks = [\r\n    { href: \"#\", label: \"Products\" },\r\n    { href: \"#\", label: \"Categories\" },\r\n    { href: \"#\", label: \"Deals\" },\r\n];\r\n\r\nfunction HeaderComponent() {\r\n    const id = useId();\r\n    const [isMobileSearchVisible, setIsMobileSearchVisible] = useState(false);\r\n\r\n    return (\r\n        <header className=\"border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-black w-full\">\r\n            {/* Mobile Search View */}\r\n            {isMobileSearchVisible && (\r\n                <div className=\"flex h-16 items-center gap-2 lg:hidden px-4\">\r\n                    <div className=\"relative flex-1\">\r\n                        <Input\r\n                            id={id + \"-mobile-search\"}\r\n                            className=\"peer h-9 ps-9 pe-2 w-full\"\r\n                            placeholder=\"Search...\"\r\n                            type=\"search\"\r\n                            autoFocus\r\n                        />\r\n                        <div className=\"text-slate-400 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3\">\r\n                            <SearchIcon size={16} />\r\n                        </div>\r\n                    </div>\r\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsMobileSearchVisible(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                </div>\r\n            )}\r\n\r\n            {/* Default Header View */}\r\n            <div className={`flex h-16 items-center justify-between gap-4 px-4 lg:px-6 ${isMobileSearchVisible ? 'hidden' : 'flex'}`}>\r\n                {/* Left side: Mobile Menu, Logo, Desktop Nav */}\r\n                <div className=\"flex items-center gap-4\">\r\n                    <div className=\"lg:hidden\">\r\n                        <Popover>\r\n                            <PopoverTrigger>\r\n                                <Button className=\"group size-8 hover:bg-emerald-400/20 dark:hover:bg-emerald-500/20 hover:border hover:border-emerald-400/40 dark:hover:border-emerald-500/40 transition-all duration-300 ease-out\" variant=\"ghost\" size=\"icon\">\r\n                                    <MenuIcon />\r\n                                </Button>\r\n                            </PopoverTrigger>\r\n                            <PopoverContent align=\"start\" className=\"w-48 p-1\">\r\n                                <NavigationMenu className=\"max-w-none *:w-full\">\r\n                                    <NavigationMenuList className=\"flex-col items-start gap-0\">\r\n                                        {navigationLinks.map((link, index) => (\r\n                                            <NavigationMenuItem key={index} className=\"w-full\">\r\n                                                <NavigationMenuLink href={link.href} className=\"py-2 px-3 text-black/90 dark:text-white/90 hover:text-black dark:hover:text-white hover:bg-emerald-400/20 dark:hover:bg-emerald-500/20 hover:border-l-2 hover:border-emerald-400/60 dark:hover:border-emerald-500/60 rounded-md transition-all duration-300 ease-out backdrop-blur-sm hover:shadow-sm hover:scale-[1.02]\">\r\n                                                    {link.label}\r\n                                                </NavigationMenuLink>\r\n                                            </NavigationMenuItem>\r\n                                        ))}\r\n                                        <NavigationMenuItem className=\"w-full\" role=\"presentation\" aria-hidden={true}>\r\n                                            <div role=\"separator\" aria-orientation=\"horizontal\" className=\"bg-black/20 dark:bg-white/20 -mx-1 my-1 h-px\"></div>\r\n                                        </NavigationMenuItem>\r\n                                        <NavigationMenuItem className=\"w-full\">\r\n                                            <NavigationMenuLink href=\"#\" className=\"py-2 px-3 text-black/90 dark:text-white/90 hover:text-black dark:hover:text-white hover:bg-emerald-400/20 dark:hover:bg-emerald-500/20 hover:border-l-2 hover:border-emerald-400/60 dark:hover:border-emerald-500/60 rounded-md transition-all duration-300 ease-out backdrop-blur-sm hover:shadow-sm hover:scale-[1.02]\">\r\n                                                Sign In\r\n                                            </NavigationMenuLink>\r\n                                        </NavigationMenuItem>\r\n                                    </NavigationMenuList>\r\n                                </NavigationMenu>\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                    </div>\r\n                    <a href=\"#\" className=\"text-black dark:text-white hover:text-gray-600 dark:hover:text-gray-300\">\r\n                        <Logo />\r\n                    </a>\r\n                    <NavigationMenu className=\"hidden lg:flex\">\r\n                        <NavigationMenuList className=\"gap-2\">\r\n                            {navigationLinks.map((link, index) => (\r\n                                <NavigationMenuItem key={index} className=\"\">\r\n                                    <NavigationMenuLink href={link.href} className=\"text-gray-600 dark:text-gray-300 hover:text-black dark:hover:text-white py-1.5 font-medium\">\r\n                                        {link.label}\r\n                                    </NavigationMenuLink>\r\n                                </NavigationMenuItem>\r\n                            ))}\r\n                        </NavigationMenuList>\r\n                    </NavigationMenu>\r\n                </div>\r\n\r\n                {/* Right side: Search, Theme Toggle, and Sign In */}\r\n                <div className=\"flex items-center gap-2\">\r\n                    <div className=\"relative hidden lg:block\">\r\n                        <Input id={id} className=\"peer h-9 ps-9 pe-2\" placeholder=\"Search...\" type=\"search\" />\r\n                        <div className=\"text-slate-400 dark:text-slate-500 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                            <SearchIcon size={16} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"lg:hidden\">\r\n                        <Button variant=\"ghost\" size=\"icon\" className=\"size-8\" onClick={() => setIsMobileSearchVisible(true)}>\r\n                            <SearchIcon size={18} />\r\n                        </Button>\r\n                    </div>\r\n\r\n                    <div className=\"hidden lg:flex\">\r\n                        <Button asChild variant=\"ghost\" size=\"sm\" className=\"text-sm font-medium text-gray-600 dark:text-gray-300 hover:text-black dark:hover:text-white\">\r\n                            <a href=\"#\">Sign In</a>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default HeaderComponent;",
      "type": "registry:ui"
    },
    {
      "path": "animatedmenu.tsx",
      "content": "'use client'\r\nimport React from 'react';\r\nimport { motion, Variants } from 'framer-motion';\r\nimport { Home, Settings, Bell, User } from 'lucide-react';\r\n\r\n// --- MenuBar Component ---\r\n\r\ninterface MenuItem {\r\n  icon: React.ReactNode;\r\n  label: string;\r\n  href: string;\r\n  gradient: string;\r\n  iconColor: string;\r\n}\r\n\r\nconst menuItems: MenuItem[] = [\r\n  {\r\n    icon: <Home className=\"h-5 w-5\" />,\r\n    label: \"Home\",\r\n    href: \"#\",\r\n    gradient: \"radial-gradient(circle, rgba(59,130,246,0.15) 0%, rgba(37,99,235,0.06) 50%, rgba(29,78,216,0) 100%)\",\r\n    iconColor: \"group-hover:text-blue-500 dark:group-hover:text-blue-400\",\r\n  },\r\n  {\r\n    icon: <Bell className=\"h-5 w-5\" />,\r\n    label: \"Notifications\",\r\n    href: \"#\",\r\n    gradient: \"radial-gradient(circle, rgba(249,115,22,0.15) 0%, rgba(234,88,12,0.06) 50%, rgba(194,65,12,0) 100%)\",\r\n    iconColor: \"group-hover:text-orange-500 dark:group-hover:text-orange-400\",\r\n  },\r\n  {\r\n    icon: <Settings className=\"h-5 w-5\" />,\r\n    label: \"Settings\",\r\n    href: \"#\",\r\n    gradient: \"radial-gradient(circle, rgba(34,197,94,0.15) 0%, rgba(22,163,74,0.06) 50%, rgba(21,128,61,0) 100%)\",\r\n    iconColor: \"group-hover:text-green-500 dark:group-hover:text-green-400\",\r\n  },\r\n  {\r\n    icon: <User className=\"h-5 w-5\" />,\r\n    label: \"Profile\",\r\n    href: \"#\",\r\n    gradient: \"radial-gradient(circle, rgba(239,68,68,0.15) 0%, rgba(220,38,38,0.06) 50%, rgba(185,28,28,0) 100%)\",\r\n    iconColor: \"group-hover:text-red-500 dark:group-hover:text-red-400\",\r\n  },\r\n];\r\n\r\n// Animation variants for different parts of the menu\r\nconst itemVariants: Variants = {\r\n  initial: { rotateX: 0, opacity: 1 },\r\n  hover: { rotateX: -90, opacity: 0 },\r\n};\r\n\r\nconst backVariants: Variants = {\r\n  initial: { rotateX: 90, opacity: 0 },\r\n  hover: { rotateX: 0, opacity: 1 },\r\n};\r\n\r\nconst glowVariants: Variants = {\r\n  initial: { opacity: 0, scale: 0.8 },\r\n  hover: {\r\n    opacity: 1,\r\n    scale: 2,\r\n    transition: {\r\n      opacity: { duration: 0.5, ease: [0.4, 0, 0.2, 1] },\r\n      scale: { duration: 0.5, type: \"spring\", stiffness: 300, damping: 25 },\r\n    },\r\n  },\r\n};\r\n\r\nconst navGlowVariants: Variants = {\r\n  initial: { opacity: 0 },\r\n  hover: {\r\n    opacity: 1,\r\n    transition: {\r\n      duration: 0.5,\r\n      ease: [0.4, 0, 0.2, 1],\r\n    },\r\n  },\r\n};\r\n\r\nconst sharedTransition = {\r\n  type: \"spring\" as const,\r\n  stiffness: 100,\r\n  damping: 20,\r\n  duration: 0.5,\r\n};\r\n\r\nfunction MenuBar(): React.JSX.Element {\r\n  return (\r\n    <motion.nav\r\n      className=\"p-2 rounded-2xl bg-white/60 dark:bg-black/60 backdrop-blur-lg border border-gray-200/80 dark:border-gray-800/80 shadow-lg dark:shadow-gray-900/20 relative overflow-hidden\"\r\n      initial=\"initial\"\r\n      whileHover=\"hover\"\r\n    >\r\n      <motion.div\r\n        className=\"absolute -inset-2 rounded-3xl z-0 pointer-events-none\"\r\n        style={{\r\n          background: \"radial-gradient(circle, rgba(59,130,246,0.1) 0%, rgba(147,51,234,0.1) 50%, rgba(239,68,68,0.1) 100%)\"\r\n        }}\r\n        variants={navGlowVariants}\r\n      />\r\n      <ul className=\"flex items-center gap-2 relative z-10\">\r\n        {menuItems.map((item: MenuItem) => (\r\n          <motion.li key={item.label} className=\"relative\">\r\n            <motion.div\r\n              className=\"block rounded-xl overflow-visible group relative\"\r\n              style={{ perspective: \"600px\" }}\r\n              whileHover=\"hover\"\r\n              initial=\"initial\"\r\n            >\r\n              {/* Glow effect on hover */}\r\n              <motion.div\r\n                className=\"absolute inset-0 z-0 pointer-events-none rounded-2xl\"\r\n                variants={glowVariants}\r\n                style={{\r\n                  background: item.gradient,\r\n                  opacity: 0,\r\n                }}\r\n              />\r\n              {/* Front-facing menu item */}\r\n              <motion.a\r\n                href={item.href}\r\n                className=\"flex items-center gap-2 px-4 py-2 relative z-10 bg-transparent text-gray-600 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white transition-colors rounded-xl\"\r\n                variants={itemVariants}\r\n                transition={sharedTransition}\r\n                style={{\r\n                  transformStyle: \"preserve-3d\",\r\n                  transformOrigin: \"center bottom\"\r\n                }}\r\n              >\r\n                <span className={`transition-colors duration-300 ${item.iconColor}`}>\r\n                  {item.icon}\r\n                </span>\r\n                <span className=\"font-medium\">{item.label}</span>\r\n              </motion.a>\r\n              {/* Back-facing menu item for the 3D flip effect */}\r\n              <motion.a\r\n                href={item.href}\r\n                className=\"flex items-center gap-2 px-4 py-2 absolute inset-0 z-10 bg-transparent text-gray-600 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white transition-colors rounded-xl\"\r\n                variants={backVariants}\r\n                transition={sharedTransition}\r\n                style={{\r\n                  transformStyle: \"preserve-3d\",\r\n                  transformOrigin: \"center top\",\r\n                  transform: \"rotateX(90deg)\"\r\n                }}\r\n              >\r\n                <span className={`transition-colors duration-300 ${item.iconColor}`}>\r\n                  {item.icon}\r\n                </span>\r\n                <span className=\"font-medium\">{item.label}</span>\r\n              </motion.a>\r\n            </motion.div>\r\n          </motion.li>\r\n        ))}\r\n      </ul>\r\n    </motion.nav>\r\n  );\r\n}\r\n\r\nexport default MenuBar;",
      "type": "registry:ui"
    },
    {
      "path": "header.tsx",
      "content": "\"use client\"\r\nimport React, { useState } from 'react';\r\nimport { useTheme } from 'next-themes';\r\n\r\n// Icons from lucide-react, commonly used with shadcn/ui\r\nconst MenuIcon = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\" />\r\n    <line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\" />\r\n    <line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\" />\r\n  </svg>\r\n);\r\n\r\nconst XIcon = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M18 6 6 18\" />\r\n    <path d=\"m6 6 12 12\" />\r\n  </svg>\r\n);\r\n\r\nconst MountainIcon = ({ className }: { className?: string }) => (\r\n    <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width=\"24\"\r\n        height=\"24\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        className={className}\r\n    >\r\n        <path d=\"m8 3 4 8 5-5 5 15H2L8 3z\" />\r\n    </svg>\r\n);\r\n\r\nconst SunIcon = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"20\"\r\n    height=\"20\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <circle cx=\"12\" cy=\"12\" r=\"4\" />\r\n    <path d=\"M12 2v2\" />\r\n    <path d=\"M12 20v2\" />\r\n    <path d=\"m4.93 4.93 1.41 1.41\" />\r\n    <path d=\"m17.66 17.66 1.41 1.41\" />\r\n    <path d=\"M2 12h2\" />\r\n    <path d=\"M20 12h2\" />\r\n    <path d=\"m6.34 17.66-1.41 1.41\" />\r\n    <path d=\"m19.07 4.93-1.41 1.41\" />\r\n  </svg>\r\n);\r\n\r\nconst MoonIcon = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"20\"\r\n    height=\"20\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z\" />\r\n  </svg>\r\n);\r\n\r\nconst Header = () => {\r\n  // State to manage the visibility of the mobile menu\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const { theme, setTheme } = useTheme();\r\n\r\n  // Navigation links data\r\n  const navLinks = [\r\n    { href: \"#\", label: \"Features\" },\r\n    { href: \"#\", label: \"Pricing\" },\r\n    { href: \"#\", label: \"About\" },\r\n    { href: \"#\", label: \"Contact\" },\r\n  ];\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'dark' ? 'light' : 'dark');\r\n  };\r\n\r\n  return (\r\n    <header className=\"bg-white/80 dark:bg-black/80 backdrop-blur-sm sticky top-0 z-50 w-full border-b border-gray-200 dark:border-gray-700\">\r\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex items-center justify-between h-16\">\r\n          \r\n          {/* Logo Section */}\r\n          <div className=\"flex-shrink-0\">\r\n            <a href=\"#\" className=\"flex items-center gap-2\">\r\n               <MountainIcon className=\"h-6 w-6 text-gray-900 dark:text-white\" />\r\n              <span className=\"text-lg font-semibold text-gray-900 dark:text-white\">Acme Inc</span>\r\n            </a>\r\n          </div>\r\n\r\n          {/* Desktop Navigation */}\r\n          <nav className=\"hidden md:flex items-center gap-6\">\r\n            {navLinks.map((link) => (\r\n              <a \r\n                key={link.label} \r\n                href={link.href} \r\n                className=\"text-sm font-medium text-gray-500 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors duration-300\"\r\n              >\r\n                {link.label}\r\n              </a>\r\n            ))}\r\n          </nav>\r\n\r\n          {/* CTA Button, Theme Toggle and Mobile Menu Toggle */}\r\n          <div className=\"flex items-center gap-4\">\r\n             <a href=\"#\" className=\"hidden sm:inline-flex items-center justify-center rounded-md text-sm font-medium h-10 px-4 py-2 bg-gray-900 dark:bg-white text-white dark:text-gray-900 hover:bg-gray-800 dark:hover:bg-gray-100 transition-colors duration-300\">\r\n                Get Started\r\n             </a>\r\n\r\n            {/* Theme Toggle Button */}\r\n            <button\r\n              onClick={toggleTheme}\r\n              className=\"p-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-gray-500 dark:focus:ring-gray-400 transition-colors duration-300\"\r\n              aria-label=\"Toggle theme\"\r\n            >\r\n              {theme === 'dark' ? (\r\n                <SunIcon className=\"h-5 w-5\" />\r\n              ) : (\r\n                <MoonIcon className=\"h-5 w-5\" />\r\n              )}\r\n            </button>\r\n\r\n            {/* Mobile Menu Button */}\r\n            <div className=\"md:hidden\">\r\n              <button\r\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\r\n                className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-gray-500 dark:focus:ring-gray-400 transition-colors duration-300\"\r\n                aria-expanded={isMenuOpen}\r\n              >\r\n                <span className=\"sr-only\">Open main menu</span>\r\n                {isMenuOpen ? <XIcon className=\"h-6 w-6\" /> : <MenuIcon className=\"h-6 w-6\" />}\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      {/* Mobile Menu Dropdown (Sheet) */}\r\n      {isMenuOpen && (\r\n        <div className=\"md:hidden border-t border-gray-200 dark:border-gray-700\" id=\"mobile-menu\">\r\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\r\n            {navLinks.map((link) => (\r\n              <a\r\n                key={link.label}\r\n                href={link.href}\r\n                className=\"text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors duration-300\"\r\n              >\r\n                {link.label}\r\n              </a>\r\n            ))}\r\n             <a href=\"#\" className=\"w-full mt-2 text-center items-center justify-center rounded-md text-sm font-medium h-10 px-4 py-2 bg-gray-900 dark:bg-white text-white dark:text-gray-900 hover:bg-gray-800 dark:hover:bg-gray-100 block transition-colors duration-300\">\r\n                Get Started\r\n             </a>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;",
      "type": "registry:ui"
    },
    {
      "path": "header2.tsx",
      "content": "\"use client\"\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n// --- Icons ---\r\n// Using SVG components for icons, similar to lucide-react\r\nconst MenuIcon = ({ className }: { className?: string }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n    <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\" /><line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\" /><line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\" />\r\n  </svg>\r\n);\r\n\r\nconst XIcon = ({ className }: { className?: string }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n    <path d=\"M18 6 6 18\" /><path d=\"m6 6 12 12\" />\r\n  </svg>\r\n);\r\n\r\nconst MountainIcon = ({ className }: { className?: string }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n        <path d=\"m8 3 4 8 5-5 5 15H2L8 3z\" />\r\n    </svg>\r\n);\r\n\r\nconst ChevronDownIcon = ({ className }: { className?: string }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n        <path d=\"m6 9 6 6 6-6\" />\r\n    </svg>\r\n);\r\n\r\nconst BellIcon = ({ className }: { className?: string }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n        <path d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9\" />\r\n        <path d=\"M10.3 21a1.94 1.94 0 0 0 3.4 0\" />\r\n    </svg>\r\n);\r\n\r\n\r\nconst AvatarIcon = ({ className }: { className?: string }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 200 200\" width=\"200\" height=\"200\" className={className}>\r\n        <g clipPath=\"url(#cs_clip_1_flower-1)\">\r\n            <mask id=\"cs_mask_1_flower-1\" style={{ maskType: 'alpha' }} width=\"200\" height=\"186\" x=\"0\" y=\"7\" maskUnits=\"userSpaceOnUse\">\r\n                <path fill=\"#fff\" d=\"M150.005 128.863c66.681 38.481-49.997 105.828-49.997 28.861 0 76.967-116.658 9.62-49.997-28.861-66.681 38.481-66.681-96.207 0-57.727-66.681-38.48 49.997-105.827 49.997-28.86 0-76.967 116.657-9.62 49.997 28.86 66.66-38.48 66.66 96.208 0 57.727z\"></path>\r\n            </mask>\r\n            <g mask=\"url(#cs_mask_1_flower-1)\">\r\n                <path fill=\"#fff\" d=\"M200 0H0v200h200V0z\"></path>\r\n                <path fill=\"url(#paint0_linear_748_4711)\" d=\"M200 0H0v200h200V0z\"></path>\r\n                <g filter=\"url(#filter0_f_748_4711)\">\r\n                    <path fill=\"#FF58E4\" d=\"M130 0H69v113h61V0z\"></path>\r\n                    <path fill=\"#0CE548\" fillOpacity=\"0.35\" d=\"M196 91H82v102h114V91z\"></path>\r\n                    <path fill=\"#FFE500\" fillOpacity=\"0.74\" d=\"M113 80H28v120h85V80z\"></path>\r\n                </g>\r\n            </g>\r\n        </g>\r\n        <defs>\r\n            <filter id=\"filter0_f_748_4711\" width=\"278\" height=\"310\" x=\"-27\" y=\"-55\" colorInterpolationFilters=\"sRGB\" filterUnits=\"userSpaceOnUse\">\r\n                <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\"></feFlood>\r\n                <feBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"></feBlend>\r\n                <feGaussianBlur result=\"effect1_foregroundBlur_748_4711\" stdDeviation=\"27.5\"></feGaussianBlur>\r\n            </filter>\r\n            <linearGradient id=\"paint0_linear_748_4711\" x1=\"186.5\" x2=\"37\" y1=\"37\" y2=\"186.5\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stopColor=\"#0E6FFF\" stopOpacity=\"0.51\"></stop>\r\n                <stop offset=\"1\" stopColor=\"#00F0FF\" stopOpacity=\"0.59\"></stop>\r\n            </linearGradient>\r\n            <clipPath id=\"cs_clip_1_flower-1\">\r\n                <path fill=\"#fff\" d=\"M0 0H200V200H0z\"></path>\r\n            </clipPath>\r\n        </defs>\r\n        <g style={{ mixBlendMode: 'overlay' }} mask=\"url(#cs_mask_1_flower-1)\">\r\n            <path fill=\"gray\" stroke=\"transparent\" d=\"M200 0H0v200h200V0z\" filter=\"url(#cs_noise_1_flower-1)\"></path>\r\n        </g>\r\n        <defs>\r\n            <filter id=\"cs_noise_1_flower-1\" width=\"100%\" height=\"100%\" x=\"0%\" y=\"0%\" filterUnits=\"objectBoundingBox\">\r\n                <feTurbulence baseFrequency=\"0.6\" numOctaves=\"5\" result=\"out1\" seed=\"4\"></feTurbulence>\r\n                <feComposite in=\"out1\" in2=\"SourceGraphic\" operator=\"in\" result=\"out2\"></feComposite>\r\n                <feBlend in=\"SourceGraphic\" in2=\"out2\" mode=\"overlay\" result=\"out3\"></feBlend>\r\n            </filter>\r\n        </defs>\r\n    </svg>\r\n);\r\n\r\n\r\n// --- Main Header Component ---\r\nconst Header2 = () => {\r\n  // State for the main mobile menu\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  // State for desktop dropdowns\r\n  const [isFeaturesOpen, setIsFeaturesOpen] = useState(false);\r\n  const [isAvatarOpen, setIsAvatarOpen] = useState(false);\r\n  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);\r\n  // State to manage which dropdown is open (for mobile)\r\n  const [openMobileDropdown, setOpenMobileDropdown] = useState<string | null>(null);\r\n\r\n  // Refs to detect outside clicks\r\n  const featuresDropdownRef = useRef<HTMLDivElement>(null);\r\n  const avatarDropdownRef = useRef<HTMLDivElement>(null);\r\n  const notificationsDropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  // --- Data for Navigation ---\r\n  const navLinks = [\r\n    { \r\n      label: \"Features\", \r\n      dropdown: [\r\n        { href: \"#\", label: \"Analytics\" },\r\n        { href: \"#\", label: \"Reports\" },\r\n        { href: \"#\", label: \"Integrations\" },\r\n      ] \r\n    },\r\n    { href: \"#\", label: \"Pricing\" },\r\n    { href: \"#\", label: \"About\" },\r\n    { href: \"#\", label: \"Contact\" },\r\n  ];\r\n\r\n  const avatarDropdownLinks = [\r\n    { href: \"#\", label: \"Profile\" },\r\n    { href: \"#\", label: \"Settings\" },\r\n    { href: \"#\", label: \"Logout\" },\r\n  ];\r\n  \r\n  // Effect to handle clicks outside of dropdowns\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (featuresDropdownRef.current && !featuresDropdownRef.current.contains(event.target as Node)) {\r\n        setIsFeaturesOpen(false);\r\n      }\r\n      if (avatarDropdownRef.current && !avatarDropdownRef.current.contains(event.target as Node)) {\r\n        setIsAvatarOpen(false);\r\n      }\r\n      if (notificationsDropdownRef.current && !notificationsDropdownRef.current.contains(event.target as Node)) {\r\n        setIsNotificationsOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  // Function to toggle mobile dropdowns\r\n  const toggleMobileDropdown = (label: string) => {\r\n    setOpenMobileDropdown(openMobileDropdown === label ? null : label);\r\n  };\r\n\r\n  return (\r\n    <header className=\"bg-white/80 dark:bg-black/80 backdrop-blur-sm sticky top-0 z-50 w-full border-b border-gray-200 dark:border-gray-800\">\r\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex items-center justify-between h-16\">\r\n          \r\n          {/* Logo and Desktop Navigation */}\r\n          <div className=\"flex items-center gap-10\">\r\n            {/* Logo */}\r\n            <a href=\"#\" className=\"flex items-center gap-2 flex-shrink-0\">\r\n               <MountainIcon className=\"h-6 w-6 text-gray-900 dark:text-gray-100\" />\r\n              <span className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Acme Inc</span>\r\n            </a>\r\n\r\n            {/* Desktop Navigation */}\r\n            <nav className=\"hidden md:flex items-center gap-6\">\r\n              {navLinks.map((link) => (\r\n                link.dropdown ? (\r\n                  <div key={link.label} className=\"relative\" ref={featuresDropdownRef}>\r\n                    <button onClick={() => setIsFeaturesOpen(!isFeaturesOpen)} className=\"flex items-center gap-1 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors duration-300 focus:outline-none\">\r\n                      {link.label}\r\n                      <ChevronDownIcon className={`h-4 w-4 transition-transform duration-300 ${isFeaturesOpen ? 'rotate-180' : ''}`} />\r\n                    </button>\r\n                    <div className={`absolute top-full mt-2 w-48 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg transition-opacity duration-300 ${isFeaturesOpen ? 'opacity-100 visible' : 'opacity-0 invisible'}`}>\r\n                      {link.dropdown.map((item) => (\r\n                        <a key={item.label} href={item.href} className=\"block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\">\r\n                          {item.label}\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <a key={link.label} href={link.href} className=\"text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors duration-300\">\r\n                    {link.label}\r\n                  </a>\r\n                )\r\n              ))}\r\n            </nav>\r\n          </div>\r\n\r\n          {/* Right side: Icons and Mobile Menu Toggle */}\r\n          <div className=\"flex items-center gap-4\">\r\n             {/* Notification Dropdown */}\r\n             <div className=\"relative hidden sm:block\" ref={notificationsDropdownRef}>\r\n                <button onClick={() => setIsNotificationsOpen(!isNotificationsOpen)} className=\"p-2 rounded-full text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none\">\r\n                    <span className=\"sr-only\">View notifications</span>\r\n                    <BellIcon className=\"h-6 w-6\" />\r\n                </button>\r\n                <div className={`absolute top-full right-0 mt-2 w-80 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg transition-opacity duration-300 ${isNotificationsOpen ? 'opacity-100 visible' : 'opacity-0 invisible'}`}>\r\n                    <div className=\"p-3\">\r\n                        <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Notifications</p>\r\n                    </div>\r\n                    <div className=\"border-t border-gray-200 dark:border-gray-700\">\r\n                        <a href=\"#\" className=\"block px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\">\r\n                            <p className=\"font-medium\">New message</p>\r\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400\">You have a new message from Jane Doe.</p>\r\n                        </a>\r\n                        <a href=\"#\" className=\"block px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\">\r\n                            <p className=\"font-medium\">Server update</p>\r\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400\">Server #1 will be updated at 3:00 AM.</p>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n             </div>\r\n\r\n             {/* Avatar Dropdown */}\r\n             <div className=\"relative hidden sm:block\" ref={avatarDropdownRef}>\r\n                <button onClick={() => setIsAvatarOpen(!isAvatarOpen)} className=\"flex items-center gap-2 focus:outline-none\">\r\n                    <AvatarIcon className=\"h-9 w-9\" />\r\n                </button>\r\n                <div className={`absolute top-full right-0 mt-2 w-48 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg transition-opacity duration-300 ${isAvatarOpen ? 'opacity-100 visible' : 'opacity-0 invisible'}`}>\r\n                    {avatarDropdownLinks.map((item) => (\r\n                        <a key={item.label} href={item.href} className=\"block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\">\r\n                            {item.label}\r\n                        </a>\r\n                    ))}\r\n                </div>\r\n             </div>\r\n\r\n            {/* Mobile Menu Button */}\r\n            <div className=\"md:hidden\">\r\n              <button\r\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\r\n                className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-gray-500\"\r\n                aria-expanded={isMenuOpen}\r\n              >\r\n                <span className=\"sr-only\">Open main menu</span>\r\n                {isMenuOpen ? <XIcon className=\"h-6 w-6\" /> : <MenuIcon className=\"h-6 w-6\" />}\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      {/* Mobile Menu Dropdown */}\r\n      {isMenuOpen && (\r\n        <div className=\"md:hidden border-t border-gray-200 dark:border-gray-800\" id=\"mobile-menu\">\r\n          <div className=\"px-4 pt-2 pb-3 space-y-1 sm:px-3\">\r\n            {navLinks.map((link) => (\r\n              link.dropdown ? (\r\n                <div key={link.label}>\r\n                  <button onClick={() => toggleMobileDropdown(link.label)} className=\"w-full flex justify-between items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 px-3 py-2 rounded-md text-base font-medium\">\r\n                    {link.label}\r\n                    <ChevronDownIcon className={`h-5 w-5 transition-transform duration-300 ${openMobileDropdown === link.label ? 'rotate-180' : ''}`} />\r\n                  </button>\r\n                  {openMobileDropdown === link.label && (\r\n                    <div className=\"pl-4 pt-2 space-y-1\">\r\n                      {link.dropdown.map((item) => (\r\n                         <a key={item.label} href={item.href} className=\"text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-gray-100 block px-3 py-2 rounded-md text-sm font-medium\">\r\n                          {item.label}\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <a key={link.label} href={link.href} className=\"text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-gray-100 block px-3 py-2 rounded-md text-base font-medium\">\r\n                  {link.label}\r\n                </a>\r\n              )\r\n            ))}\r\n            <div className=\"border-t border-gray-200 dark:border-gray-700 mt-4 pt-4\">\r\n                <div className=\"flex items-center justify-between px-3\">\r\n                    <div className=\"flex items-center\">\r\n                        <div className=\"flex-shrink-0\">\r\n                            <AvatarIcon className=\"h-10 w-10\" />\r\n                        </div>\r\n                        <div className=\"ml-3\">\r\n                            <div className=\"text-base font-medium text-gray-800 dark:text-gray-200\">Tom Cook</div>\r\n                            <div className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">tom@example.com</div>\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"p-2 rounded-full text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none\">\r\n                        <span className=\"sr-only\">View notifications</span>\r\n                        <BellIcon className=\"h-6 w-6\" />\r\n                    </button>\r\n                </div>\r\n                <div className=\"mt-3 space-y-1\">\r\n                    {avatarDropdownLinks.map(item => (\r\n                         <a key={item.label} href={item.href} className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800\">\r\n                            {item.label}\r\n                        </a>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header2;",
      "type": "registry:ui"
    },
    {
      "path": "header3.tsx",
      "content": "'use client'\r\nimport React from 'react'\r\n\r\nexport default function Header3() {\r\n  // State to manage mobile menu visibility\r\n  const [isMenuOpen, setIsMenuOpen] = React.useState(false);\r\n\r\n  // Effect to handle body scroll lock when menu is open\r\n  React.useEffect(() => {\r\n    if (isMenuOpen) {\r\n      document.body.style.overflow = 'hidden';\r\n    } else {\r\n      document.body.style.overflow = 'unset';\r\n    }\r\n    // Cleanup function to reset scroll on component unmount\r\n    return () => {\r\n      document.body.style.overflow = 'unset';\r\n    };\r\n  }, [isMenuOpen]);\r\n\r\n  return (\r\n    <header className=\"relative w-full z-50\">\r\n      <div className=\"flex items-center justify-between py-4 px-4 sm:px-8 w-full bg-white dark:bg-black\">\r\n        {/* Desktop Navigation (Left) */}\r\n        <nav className=\"hidden md:flex items-center gap-6 text-sm font-medium text-gray-600 dark:text-gray-400 flex-1\">\r\n          <a href=\"#\" className=\"hover:text-black dark:hover:text-white transition-colors\">Products ▾</a>\r\n          <a href=\"#\" className=\"hover:text-black dark:hover:text-white transition-colors\">Pricing</a>\r\n          <a href=\"#\" className=\"hover:text-black dark:hover:text-white transition-colors\">Community</a>\r\n        </nav>\r\n\r\n        {/* Mobile Menu Toggle (Hamburger/Close Icon) */}\r\n        <div className=\"md:hidden flex-1\">\r\n          <button onClick={() => setIsMenuOpen(!isMenuOpen)} aria-label=\"Toggle menu\" aria-expanded={isMenuOpen} className=\"text-black dark:text-white\">\r\n            {isMenuOpen ? (\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\r\n              </svg>\r\n            ) : (\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4 6h16M4 12h16m-7 6h7\" />\r\n              </svg>\r\n            )}\r\n          </button>\r\n        </div>\r\n\r\n        {/* Centered Logo */}\r\n        <div className=\"absolute left-1/2 -translate-x-1/2\">\r\n          <a href=\"#\" aria-label=\"Company Logo\">\r\n            <div className=\"w-8 h-8 bg-white dark:bg-black border-2 border-black dark:border-white rounded-full\"></div>\r\n          </a>\r\n        </div>\r\n\r\n        {/* Desktop Navigation (Right) */}\r\n        <nav className=\"hidden md:flex items-center justify-end gap-6 text-sm flex-1\">\r\n          <a href=\"#\" className=\"font-medium text-gray-600 dark:text-gray-400 hover:text-black dark:hover:text-white transition-colors\">Help</a>\r\n          <a href=\"#\" className=\"font-medium text-gray-600 dark:text-gray-400 hover:text-black dark:hover:text-white transition-colors\">Sign In</a>\r\n          <a href=\"#\" className=\"px-4 py-2 text-sm font-semibold border-2 border-black dark:border-white text-black dark:text-white rounded-lg hover:bg-black hover:text-white dark:hover:bg-white dark:hover:text-black transition-colors\">\r\n            Sign Up\r\n          </a>\r\n        </nav>\r\n\r\n        {/* Sign Up button visible on mobile (Right side) */}\r\n        <div className=\"md:hidden flex-1 flex justify-end\">\r\n          <a href=\"#\" className=\"px-4 py-2 text-sm font-semibold border-2 border-black dark:border-white text-black dark:text-white rounded-lg hover:bg-black hover:text-white dark:hover:bg-white dark:hover:text-black transition-colors\">\r\n            Sign Up\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Mobile Menu (Fullscreen Overlay) */}\r\n      <div className={`md:hidden fixed inset-0 bg-white dark:bg-black transition-transform duration-300 ease-in-out ${isMenuOpen ? 'transform-none' : '-translate-x-full'}`}>\r\n        <div className=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-800\">\r\n          <a href=\"#\" aria-label=\"Company Logo\">\r\n            <div className=\"w-8 h-8 bg-white dark:bg-black border-2 border-black dark:border-white rounded-full\"></div>\r\n          </a>\r\n          <button onClick={() => setIsMenuOpen(false)} aria-label=\"Close menu\" className=\"text-black dark:text-white\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <nav className=\"flex flex-col items-center justify-center h-full -mt-16 gap-8 text-xl text-gray-800 dark:text-gray-200 font-medium\">\r\n          <a href=\"#\" onClick={() => setIsMenuOpen(false)} className=\"hover:text-black dark:hover:text-white transition-colors\">Products</a>\r\n          <a href=\"#\" onClick={() => setIsMenuOpen(false)} className=\"hover:text-black dark:hover:text-white transition-colors\">Pricing</a>\r\n          <a href=\"#\" onClick={() => setIsMenuOpen(false)} className=\"hover:text-black dark:hover:text-white transition-colors\">Community</a>\r\n          <a href=\"#\" onClick={() => setIsMenuOpen(false)} className=\"hover:text-black dark:hover:text-white transition-colors\">Help</a>\r\n          <a href=\"#\" onClick={() => setIsMenuOpen(false)} className=\"hover:text-black dark:hover:text-white transition-colors\">Sign In</a>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "header4.tsx",
      "content": "'use client'\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { \r\n  Search, \r\n  Bell, \r\n  ChevronDown, \r\n  Home, \r\n  Users, \r\n  Folder, \r\n  Calendar, \r\n  User \r\n} from 'lucide-react';\r\n\r\n// Standalone Navigation Header Component (Static Logged-In View)\r\nexport default function Header4() {\r\n  const [activeTab, setActiveTab] = useState('Dashboard');\r\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\r\n  const [isUserDropdownOpen, setIsUserDropdownOpen] = useState(false);\r\n  \r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // A static user object for display purposes\r\n  const user = { \r\n    email: 'user@example.com', \r\n    displayName: 'User', \r\n    photoURL: 'https://placehold.co/100x100/EFEFEF/4A4A4A?text=U' \r\n  };\r\n\r\n  // Effect to handle clicks outside the dropdown to close it\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsUserDropdownOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Handlers for mouse enter/leave to manage dropdown visibility with a delay\r\n  const handleMouseEnter = () => {\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n    }\r\n    setIsUserDropdownOpen(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    timeoutRef.current = setTimeout(() => {\r\n      setIsUserDropdownOpen(false);\r\n    }, 150); // Small delay to prevent flicker\r\n  };\r\n  \r\n  // Toggles dropdown on click\r\n  const handleDropdownClick = () => {\r\n    setIsUserDropdownOpen(!isUserDropdownOpen);\r\n  };\r\n\r\n  // Navigation items configuration\r\n  const navItems = [\r\n    { name: 'Dashboard', icon: Home },\r\n    { name: 'Team', icon: Users },\r\n    { name: 'Projects', icon: Folder },\r\n    { name: 'Calendar', icon: Calendar }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"mx-4 sm:mx-6 mt-2 font-sans\">\r\n      <header className=\"relative\">\r\n        <div className=\"bg-black border border-gray-800 rounded-2xl shadow-2xl p-4 text-white\">\r\n          <div className=\"flex flex-wrap items-center justify-between gap-4\">\r\n            {/* Logo and Desktop Navigation */}\r\n            <div className=\"flex items-center space-x-2 sm:space-x-8\">\r\n              <div className=\"w-8 h-8 bg-gray-900 border border-gray-700 rounded-lg flex items-center justify-center shadow-lg\">\r\n                <div className=\"w-4 h-4 bg-white rounded-sm transform rotate-12\"></div>\r\n              </div>\r\n\r\n              <nav className=\"hidden lg:flex space-x-1\">\r\n                {navItems.map((item) => {\r\n                  const Icon = item.icon;\r\n                  return (\r\n                    <button\r\n                      key={item.name}\r\n                      onClick={() => setActiveTab(item.name)}\r\n                      className={`\r\n                        flex items-center space-x-2 px-4 py-2 rounded-xl transition-all duration-300\r\n                        ${activeTab === item.name \r\n                          ? 'bg-gray-800 text-white' \r\n                          : 'text-gray-400 hover:text-white hover:bg-gray-900'}\r\n                      `}\r\n                    >\r\n                      <Icon size={18} />\r\n                      <span className=\"font-medium\">{item.name}</span>\r\n                    </button>\r\n                  );\r\n                })}\r\n              </nav>\r\n\r\n              {/* Mobile Menu Hamburger Button */}\r\n              <button\r\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\r\n                className=\"lg:hidden p-2 rounded-xl bg-gray-900 border border-gray-700 hover:bg-gray-800 transition-all duration-300\"\r\n              >\r\n                <div className=\"w-5 h-5 flex flex-col justify-center items-center\">\r\n                  <div className={`w-4 h-0.5 bg-white transition-all duration-300 ${isMobileMenuOpen ? 'rotate-45 translate-y-0.5' : ''}`}></div>\r\n                  <div className={`w-4 h-0.5 bg-white mt-1 transition-all duration-300 ${isMobileMenuOpen ? 'opacity-0' : ''}`}></div>\r\n                  <div className={`w-4 h-0.5 bg-white mt-1 transition-all duration-300 ${isMobileMenuOpen ? '-rotate-45 -translate-y-1.5' : ''}`}></div>\r\n                </div>\r\n              </button>\r\n            </div>\r\n\r\n            {/* Right side: Search, Notifications, and User Profile */}\r\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\r\n              <div className=\"relative hidden sm:block\">\r\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                  <Search className=\"h-5 w-5 text-gray-500\" />\r\n                </div>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search\"\r\n                  className=\"\r\n                    bg-gray-900 border border-gray-700 rounded-xl \r\n                    pl-10 pr-4 py-2 w-40 md:w-64 text-white placeholder-gray-500\r\n                    focus:outline-none focus:ring-2 focus:ring-gray-600\r\n                    transition-all duration-300\r\n                  \"\r\n                />\r\n              </div>\r\n\r\n              <button className=\"sm:hidden p-2 rounded-xl bg-gray-900 border border-gray-700 hover:bg-gray-800 transition-all duration-300\">\r\n                <Search className=\"h-5 w-5 text-gray-400\" />\r\n              </button>\r\n\r\n              <button className=\"\r\n                relative p-2 rounded-xl bg-gray-900 border border-gray-700\r\n                hover:bg-gray-800 transition-all duration-300 group\r\n              \">\r\n                <Bell className=\"h-5 w-5 text-gray-400 group-hover:text-white transition-colors\" />\r\n              </button>\r\n\r\n              {/* User Profile Dropdown */}\r\n              <div className=\"relative\" ref={dropdownRef}>\r\n                <div \r\n                  className=\"flex items-center space-x-1 sm:space-x-3 cursor-pointer hover:bg-gray-900 p-2 rounded-xl transition-all duration-300\"\r\n                  onMouseEnter={handleMouseEnter}\r\n                  onMouseLeave={handleMouseLeave}\r\n                  onClick={handleDropdownClick}\r\n                >\r\n                  <div className=\"w-8 h-8 rounded-full overflow-hidden bg-gray-800 flex items-center justify-center border border-gray-700\">\r\n                    {user.photoURL ? (\r\n                      <img\r\n                        src={user.photoURL}\r\n                        alt=\"User avatar\"\r\n                        className=\"w-full h-full object-cover\"\r\n                      />\r\n                    ) : (\r\n                      <User className=\"h-5 w-5 text-white\" />\r\n                    )}\r\n                  </div>\r\n                  <ChevronDown className={`h-4 w-4 text-gray-500 hidden sm:block transition-transform duration-300 ${isUserDropdownOpen ? 'rotate-180' : ''}`} />\r\n                </div>\r\n\r\n                {/* Dropdown Menu */}\r\n                {isUserDropdownOpen && (\r\n                  <div \r\n                    className=\"absolute right-0 mt-2 w-64 bg-black border border-gray-800 rounded-xl shadow-2xl py-2 z-50\"\r\n                    onMouseEnter={handleMouseEnter}\r\n                    onMouseLeave={handleMouseLeave}\r\n                  >\r\n                    <div className=\"px-4 py-3\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className=\"w-10 h-10 rounded-full overflow-hidden bg-gray-800 flex items-center justify-center border border-gray-700\">\r\n                          {user.photoURL ? (\r\n                            <img\r\n                              src={user.photoURL}\r\n                              alt=\"User avatar\"\r\n                              className=\"w-full h-full object-cover\"\r\n                            />\r\n                          ) : (\r\n                            <User className=\"h-6 w-6 text-white\" />\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <p className=\"text-white font-medium truncate\">\r\n                            {user.displayName || 'User'}\r\n                          </p>\r\n                          <p className=\"text-gray-400 text-sm truncate\">\r\n                            {user.email}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Mobile Navigation Menu */}\r\n          {isMobileMenuOpen && (\r\n            <div className=\"lg:hidden mt-4 pt-4 border-t border-gray-800\">\r\n              <nav className=\"grid grid-cols-2 gap-2\">\r\n                {navItems.map((item) => {\r\n                  const Icon = item.icon;\r\n                  return (\r\n                    <button\r\n                      key={item.name}\r\n                      onClick={() => {\r\n                        setActiveTab(item.name);\r\n                        setIsMobileMenuOpen(false);\r\n                      }}\r\n                      className={`\r\n                        flex items-center space-x-2 px-3 py-2 rounded-xl transition-all duration-300\r\n                        ${activeTab === item.name \r\n                          ? 'bg-gray-800 text-white' \r\n                          : 'text-gray-400 hover:text-white hover:bg-gray-900'}\r\n                      `}\r\n                    >\r\n                      <Icon size={18} />\r\n                      <span className=\"font-medium\">{item.name}</span>\r\n                    </button>\r\n                  );\r\n                })}\r\n              </nav>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}