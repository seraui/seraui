{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "marquee",
  "title": "Marquee",
  "description": "A minimalistic marquee component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "marquee.tsx",
      "content": "import Marquee from \"./marquee\";\r\n\r\nconst icons = [\r\n  {\r\n    svg: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n        <path fill=\"#E65100\" d=\"M41,5H7l3,34l14,4l14-4L41,5L41,5z\"></path>\r\n        <path fill=\"#FF6D00\" d=\"M24 8L24 39.9 35.2 36.7 37.7 8z\"></path>\r\n        <path fill=\"#FFF\" d=\"M24,25v-4h8.6l-0.7,11.5L24,35.1v-4.2l4.1-1.4l0.3-4.5H24z M32.9,17l0.3-4H24v4H32.9z\"></path>\r\n        <path fill=\"#EEE\" d=\"M24,30.9v4.2l-7.9-2.6L15.7,27h4l0.2,2.5L24,30.9z M19.1,17H24v-4h-9.1l0.7,12H24v-4h-4.6L19.1,17z\"></path>\r\n      </svg>\r\n    ),\r\n    label: \"HTML5\",\r\n  },\r\n  {\r\n    svg: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n        <linearGradient id=\"css-gradient\" x1=\"16.33\" x2=\"32.293\" y1=\"-2.748\" y2=\"41.109\" gradientUnits=\"userSpaceOnUse\">\r\n          <stop offset=\"0\" stopColor=\"#2aa4f4\"></stop>\r\n          <stop offset=\"1\" stopColor=\"#007ad9\"></stop>\r\n        </linearGradient>\r\n        <path fill=\"url(#css-gradient)\" d=\"M7.192,7.176l2.627,29.77c0.109,1.237,0.97,2.28,2.164,2.621l10.643,3.041c0.898,0.257,1.849,0.257,2.747,0l10.643-3.041c1.194-0.341,2.055-1.383,2.164-2.621l2.627-29.77C40.911,6.006,39.99,5,38.816,5H9.184C8.01,5,7.089,6.006,7.192,7.176z\"></path>\r\n        <path fill=\"#35c1f1\" d=\"M24,8v31.9l9.876-2.822c0.797-0.228,1.371-0.924,1.443-1.749l2.286-26.242C37.656,8.502,37.196,8,36.609,8H24z\"></path>\r\n        <path fill=\"#fff\" d=\"M33.1,13H24v4h4.9l-0.3,4H24v4h4.4l-0.3,4.5L24,30.9v4.2l7.9-2.6L32.6,21l0,0L33.1,13z\"></path>\r\n        <path fill=\"#d6e0e9\" d=\"M24,13v4h-8.9l-0.3-4H24z M19.4,21l0.2,4H24v-4H19.4z M19.8,27h-4l0.3,5.5l7.9,2.6v-4.2l-4.1-1.4L19.8,27z\"></path>\r\n      </svg>\r\n    ),\r\n    label: \"CSS3\",\r\n  },\r\n  {\r\n    svg: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"48\" height=\"48\" viewBox=\"0 0 50 50\">\r\n        <path d=\"M17.791,46.836C18.502,46.53,19,45.823,19,45v-5.4c0-0.197,0.016-0.402,0.041-0.61C19.027,38.994,19.014,38.997,19,39c0,0-3,0-3.6,0c-1.5,0-2.8-0.6-3.4-1.8c-0.7-1.3-1-3.5-2.8-4.7C8.9,32.3,9.1,32,9.7,32c0.6,0.1,1.9,0.9,2.7,2c0.9,1.1,1.8,2,3.4,2c2.487,0,3.82-0.125,4.622-0.555C21.356,34.056,22.649,33,24,33v-0.025c-5.668-0.182-9.289-2.066-10.975-4.975c-3.665,0.042-6.856,0.405-8.677,0.707c-0.058-0.327-0.108-0.656-0.151-0.987c1.797-0.296,4.843-0.647,8.345-0.714c-0.112-0.276-0.209-0.559-0.291-0.849c-3.511-0.178-6.541-0.039-8.187,0.097c-0.02-0.332-0.047-0.663-0.051-0.999c1.649-0.135,4.597-0.27,8.018-0.111c-0.079-0.5-0.13-1.011-0.13-1.543c0-1.7,0.6-3.5,1.7-5c-0.5-1.7-1.2-5.3,0.2-6.6c2.7,0,4.6,1.3,5.5,2.1C21,13.4,22.9,13,25,13s4,0.4,5.6,1.1c0.9-0.8,2.8-2.1,5.5-2.1c1.5,1.4,0.7,5,0.2,6.6c1.1,1.5,1.7,3.2,1.6,5c0,0.484-0.045,0.951-0.11,1.409c3.499-0.172,6.527-0.034,8.204,0.102c-0.002,0.337-0.033,0.666-0.051,0.999c-1.671-0.138-4.775-0.28-8.359-0.089c-0.089,0.336-0.197,0.663-0.325,0.98c3.546,0.046,6.665,0.389,8.548,0.689c-0.043,0.332-0.093,0.661-0.151,0.987c-1.912-0.306-5.171-0.664-8.879-0.682C35.112,30.873,31.557,32.75,26,32.969V33c2.6,0,5,3.9,5,6.6V45c0,0.823,0.498,1.53,1.209,1.836C41.37,43.804,48,35.164,48,25C48,12.318,37.683,2,25,2S2,12.318,2,25C2,35.164,8.63,43.804,17.791,46.836z\"></path>\r\n      </svg>\r\n    ),\r\n    label: \"React\",\r\n  },\r\n  {\r\n    svg: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n        <path fill=\"#d50000\" d=\"M0,15h48v17H24v3H13v-3H0V15z\"></path>\r\n        <path fill=\"#fff\" d=\"M3 29L8 29 8 21 11 21 11 29 13 29 13 18 3 18zM16 18v14h5v-3h5V18H16zM24 26h-3v-5h3V26zM29 18L29 29 34 29 34 21 37 21 37 29 40 29 40 21 43 21 43 29 45 29 45 18z\"></path>\r\n      </svg>\r\n    ),\r\n    label: \"Git\",\r\n  },\r\n  {\r\n    svg: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n        <path fill=\"#ffd600\" d=\"M6,42V6h36v36H6z\"></path>\r\n        <path fill=\"#000001\" d=\"M29.538 32.947c.692 1.124 1.444 2.201 3.037 2.201 1.338 0 2.04-.665 2.04-1.585 0-1.101-.726-1.492-2.198-2.133l-.807-.344c-2.329-.988-3.878-2.226-3.878-4.841 0-2.41 1.845-4.244 4.728-4.244 2.053 0 3.528.711 4.592 2.573l-2.514 1.607c-.553-.988-1.151-1.377-2.078-1.377-.946 0-1.545.597-1.545 1.377 0 .964.6 1.354 1.985 1.951l.807.344C36.452 29.645 38 30.839 38 33.523 38 36.415 35.716 38 32.65 38c-2.999 0-4.702-1.505-5.65-3.368L29.538 32.947zM17.952 33.029c.506.906 1.275 1.603 2.381 1.603 1.058 0 1.667-.418 1.667-2.043V22h3.333v11.101c0 3.367-1.953 4.899-4.805 4.899-2.577 0-4.437-1.746-5.195-3.368L17.952 33.029z\"></path>\r\n      </svg>\r\n    ),\r\n    label: \"JS\",\r\n  },\r\n  {\r\n    svg: (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n        <path fill=\"#388e3c\" d=\"M17.204 19.122l-4.907 2.715C12.113 21.938 12 22.126 12 22.329v5.433c0 .203.113.39.297.492l4.908 2.717c.183.101.41.101.593 0l4.907-2.717C22.887 28.152 23 27.965 23 27.762v-5.433c0-.203-.113-.39-.297-.492l-4.906-2.715c-.092-.051-.195-.076-.297-.076-.103 0-.205.025-.297.076M42.451 24.013l-.818.452c-.031.017-.049.048-.049.082v.906c0 .034.019.065.049.082l.818.453c.031.017.068.017.099 0l.818-.453c.03-.017.049-.048.049-.082v-.906c0-.034-.019-.065-.05-.082l-.818-.452C42.534 24.004 42.517 24 42.5 24S42.466 24.004 42.451 24.013\" />\r\n        <path fill=\"#37474f\" d=\"M35.751,13.364l-2.389-1.333c-0.075-0.042-0.167-0.041-0.241,0.003c-0.074,0.044-0.12,0.123-0.12,0.209L33,20.295l-2.203-1.219C30.705,19.025,30.602,19,30.5,19c-0.102,0-0.205,0.025-0.297,0.076h0.001l-4.907,2.715C25.113,21.892,25,22.08,25,22.282v5.433c0,0.203,0.113,0.39,0.297,0.492l4.908,2.717c0.183,0.101,0.41,0.101,0.593,0l4.907-2.717C35.887,28.106,36,27.918,36,27.715V13.788C36,13.612,35.904,13.45,35.751,13.364zM32.866,26.458l-2.23,1.235c-0.083,0.046-0.186,0.046-0.269,0l-2.231-1.235C28.051,26.412,28,26.326,28,26.234v-2.47c0-0.092,0.051-0.177,0.135-0.224l2.231-1.234h-0.001c0.042-0.023,0.088-0.034,0.135-0.034c0.047,0,0.093,0.012,0.135,0.034l2.23,1.234C32.949,23.587,33,23.673,33,23.765v2.47C33,26.326,32.949,26.412,32.866,26.458z\" />\r\n      </svg>\r\n    ),\r\n    label: \"NodeJS\",\r\n  },\r\n];\r\n\r\nexport default function MarqueeView() {\r\n  return (\r\n    <div className=\"py-8 px-2 rounded-2xl shadow-2xl dark:shadow-gray-800/50 overflow-hidden bg-white dark:bg-black\">\r\n      <Marquee speed={70} className=\"[--gap:2rem]\" pauseOnHover={true}>\r\n        <div className=\"flex gap-1\">\r\n          {icons.map((icon, idx) => (\r\n            <div\r\n              key={idx}\r\n              className=\"w-36 min-w-fit h-fit flex flex-col items-center justify-center transition-all duration-500 m-3 sm:m-5 rounded-lg group relative hover:scale-[1.15] cursor-pointer\"\r\n            >\r\n              <div className=\"h-full w-full rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 shadow-sm dark:shadow-gray-900/50 group-hover:border-violet-500 dark:group-hover:border-violet-400 transition-all duration-500\">\r\n                <div className=\"flex -translate-y-[1px] justify-center\">\r\n                  <div className=\"w-3/4\">\r\n                    <div className=\"h-[1px] w-full bg-gradient-to-r from-transparent via-violet-500 dark:via-violet-400 to-transparent\"></div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex flex-col items-center justify-center gap-3 p-6\">\r\n                  <div className=\"h-8 sm:h-10 flex items-center justify-center\">\r\n                    <span className=\"h-full w-auto rounded-lg flex items-center justify-center\">{icon.svg}</span>\r\n                  </div>\r\n                  <p className=\"text-gray-800 dark:text-gray-200 text-sm sm:text-lg font-medium\">{icon.label}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Marquee>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "logomarquee.tsx",
      "content": "'use client'\r\nimport React from 'react';\r\n\r\n// SVG Logo Components (as provided in the user request)\r\nconst ReactLogo = () => (\r\n  <svg viewBox=\"175.7 78 490.6 436.9\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g fill=\"currentColor\">\r\n      <path d=\"m666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9v-22.3c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6v-22.3c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zm-101.4 106.7c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24s9.5 15.8 14.4 23.4zm73.9-208.1c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6s22.9-35.6 58.3-50.6c8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zm53.8 142.9c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6z\"></path>\r\n      <circle cx=\"420.9\" cy=\"296.5\" r=\"45.7\"></circle>\r\n    </g>\r\n  </svg>\r\n);\r\nconst AstroLogo = () => (\r\n  <svg viewBox=\"0 0 63 79\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M19.4924 65.9282C15.6165 62.432 14.4851 55.0859 16.0999 49.7638C18.8998 53.1193 22.7793 54.1822 26.7977 54.7822C33.0013 55.7081 39.0937 55.3618 44.8565 52.5637C45.5158 52.2434 46.125 51.8174 46.8454 51.386C47.3861 52.9341 47.5268 54.497 47.338 56.0877C46.8787 59.9617 44.9251 62.9542 41.8177 65.2227C40.5752 66.13 39.2604 66.9411 37.9771 67.7967C34.0346 70.4262 32.9679 73.5095 34.4494 77.9946C34.4846 78.1038 34.5161 78.2131 34.5957 78.4797C32.5828 77.5909 31.1124 76.2965 29.9921 74.5946C28.8088 72.7984 28.2458 70.8114 28.2162 68.6615C28.2014 67.6152 28.2014 66.5597 28.0588 65.5282C27.7107 63.0135 26.5144 61.8876 24.2608 61.8227C21.9479 61.7561 20.1183 63.1672 19.6331 65.3893C19.5961 65.5597 19.5424 65.7282 19.4887 65.9263L19.4924 65.9282Z\" fill=\"currentColor\"></path>\r\n    <path d=\"M0 51.3932C0 51.3932 10.5979 46.2433 21.2254 46.2433L29.2382 21.5069C29.5381 20.3106 30.4141 19.4977 31.4029 19.4977C32.3918 19.4977 33.2677 20.3106 33.5677 21.5069L41.5804 46.2433C54.1672 46.2433 62.8058 51.3932 62.8058 51.3932C62.8058 51.3932 44.8044 2.47586 44.7692 2.37772C44.2526 0.931458 43.3804 0 42.2045 0H20.6032C19.4273 0 18.5903 0.931458 18.0384 2.37772C17.9995 2.47401 0 51.3932 0 51.3932Z\" fill=\"currentColor\"></path>\r\n  </svg>\r\n);\r\nconst TailwindLogo = () => (\r\n  <svg viewBox=\"0 0 1000 1000\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M489.5 226.499C328 231.632 280 346.999 269 409.499C283.333 386.332 328.5 335.5 395 335.5C472.5 335.5 531.5 422 567.5 449C611.237 481.803 699.123 525.115 814.5 490C906.5 462 949.167 364.332 958.5 317.999C914 378.499 846.5 414.838 763 371.999C705.5 342.499 662.5 221 489.5 226.499Z\" fill=\"currentColor\"></path>\r\n    <path d=\"M261 500.999C99.5 506.132 51.5 621.499 40.5 683.999C54.8333 660.832 100 610 166.5 610C244 610 303 696.5 339 723.5C382.737 756.303 470.623 799.615 586 764.5C678 736.5 720.667 638.832 730 592.499C685.5 652.999 618 689.338 534.5 646.499C477 616.999 434 495.5 261 500.999Z\" fill=\"currentColor\"></path>\r\n  </svg>\r\n);\r\nconst JSLogo = () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\">\r\n    <rect x=\"5.5\" y=\"5.5\" fill=\"rgba(0,0,0,.1)\" width=\"489\" height=\"489\"></rect>\r\n    <path fill=\"currentColor\" d=\"M454.478 377.875c-3.58-22.312-18.128-41.045-61.218-58.522-14.967-6.88-31.654-11.806-36.628-23.147-1.767-6.602-1.999-10.319-.883-14.318 3.208-12.968 18.686-17.012 30.958-13.293 7.902 2.648 15.386 8.739 19.895 18.453 21.104-13.666 21.056-13.572 35.792-22.963-5.393-8.366-8.275-12.225-11.807-15.804-12.69-14.177-29.981-21.475-57.639-20.917-4.788.604-9.622 1.255-14.41 1.86-13.805 3.486-26.96 10.737-34.676 20.452-23.149 26.264-16.547 72.234 11.621 91.153 27.75 20.824 68.517 25.565 73.722 45.042 5.067 23.845-17.524 31.561-39.975 28.819-16.548-3.439-25.752-11.854-35.7-27.146-18.313 10.598-18.313 10.598-37.139 21.428 4.462 9.762 9.157 14.178 16.641 22.637 35.42 35.931 124.063 34.166 139.959-20.22.651-1.859 4.927-14.317 1.487-33.514zm-183.142-147.63h-45.74l-.186 118.252c0 25.147 1.302 48.203-2.789 55.27-6.694 13.897-24.032 12.178-31.935 9.481-8.042-3.951-12.132-9.575-16.873-17.523-1.301-2.278-2.278-4.044-2.604-4.184-12.411 7.576-24.775 15.2-37.187 22.776 6.182 12.69 15.293 23.707 26.96 30.864 17.432 10.458 40.858 13.666 65.355 8.041 15.943-4.647 29.703-14.27 36.907-28.911 10.412-19.198 8.181-42.439 8.088-68.145.236-41.927.004-83.854.004-125.921z\"></path>\r\n  </svg>\r\n);\r\nconst NextjsLogo = () => (\r\n  <svg viewBox=\"0 -101.5 512 512\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid\">\r\n    <g>\r\n      <path d=\"M120.81043,80.5613102 L217.378325,80.5613102 L217.378325,88.2366589 L129.662487,88.2366589 L129.662487,146.003758 L212.147564,146.003758 L212.147564,153.679106 L129.662487,153.679106 L129.662487,217.101725 L218.384241,217.101725 L218.384241,224.777073 L120.81043,224.777073 L120.81043,80.5613102 Z M226.0292,80.5613102 L236.289538,80.5613102 L281.756922,143.983929 L328.230222,80.5613102 L391.441486,0 L287.591232,150.649363 L341.105941,224.777073 L330.443237,224.777073 L281.756922,157.314798 L232.869425,224.777073 L222.407904,224.777073 L276.324978,150.649363 L226.0292,80.5613102 Z M344.928421,88.2366588 L344.928421,80.5613102 L454.975585,80.5613102 L454.975585,88.2366589 L404.27744,88.2366589 L404.27744,224.777073 L395.425382,224.777073 L395.425382,88.2366589 L344.928421,88.2366588 Z M1.42108547e-14,80.5613102 L11.0650714,80.5613102 L163.64593,308.884007 L100.591558,224.777073 L9.25442331,91.4683847 L8.85205708,224.777073 L1.42108547e-14,224.777073 L1.42108547e-14,80.5613102 Z M454.083705,214.785469 C452.275167,214.785469 450.918762,213.38418 450.918762,211.573285 C450.918762,209.762388 452.275167,208.361099 454.083705,208.361099 C455.913774,208.361099 457.248648,209.762388 457.248648,211.573285 C457.248648,213.38418 455.913774,214.785469 454.083705,214.785469 Z M462.781915,206.334618 L467.518563,206.334618 C467.583153,208.900055 469.456284,210.624719 472.212151,210.624719 C475.290972,210.624719 477.03492,208.770705 477.03492,205.29982 L477.03492,183.310363 L481.85769,183.310363 L481.85769,205.321379 C481.85769,211.573285 478.240613,215.173518 472.255212,215.173518 C466.635824,215.173518 462.781915,211.681076 462.781915,206.334618 Z M488.166045,206.054362 L492.945754,206.054362 C493.354828,209.007848 496.239878,210.883419 500.395211,210.883419 C504.270652,210.883419 507.11264,208.878498 507.11264,206.119036 C507.11264,203.747625 505.304102,202.324777 501.191828,201.354653 L497.187209,200.384531 C491.56782,199.069474 489.005723,196.353129 489.005723,191.782772 C489.005723,186.24229 493.527071,182.555823 500.30909,182.555823 C506.617445,182.555823 511.224912,186.24229 511.504805,191.480955 L506.811217,191.480955 C506.359083,188.613703 503.861576,186.824365 500.244499,186.824365 C496.43365,186.824365 493.893085,188.656819 493.893085,191.459398 C493.893085,193.679901 495.52938,194.95184 499.577063,195.900406 L503.000368,196.741178 C509.373314,198.228702 512,200.815695 512,205.493846 C512,211.443935 507.392533,215.173518 500.029197,215.173518 C493.139526,215.173518 488.51053,211.6164 488.166045,206.054362 Z\" fill=\"currentColor\" fillRule=\"nonzero\"></path>\r\n    </g>\r\n  </svg>\r\n);\r\nconst RemixLogo = () => (\r\n  <svg viewBox=\"0 0 256 297\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n      <path d=\"M141.674538,-7.10542736e-15 C218.04743,-7.10542736e-15 256,36.3493031 256,94.4136694 C256,137.843796 229.292875,166.16709 193.214546,170.888177 C223.670152,177.025429 241.473826,194.491998 244.754554,228.952544 L245.229325,235.289856 L245.643706,241.214203 L246.00181,246.756109 L246.250531,250.934795 L246.517683,255.865245 L246.656217,258.679019 L246.853693,263.148984 L247.012965,267.370833 L247.091895,269.797544 L247.198581,273.685906 L247.290626,278.131883 L247.324005,280.280236 L247.384197,286.505871 L247.403543,293.002292 L247.40462,296.886512 L168.646185,296.886512 L168.650135,295.266478 L168.650135,295.266478 L168.678181,292.120279 L168.678181,292.120279 L168.725186,289.055223 L168.861417,281.631321 L168.895871,279.142491 L168.922852,275.239899 L168.922852,275.239899 L168.919162,272.744266 L168.896218,270.127045 L168.864335,268.072886 L168.799537,265.197081 L168.706158,262.147348 L168.580806,258.904651 L168.42009,255.449957 L168.325411,253.637163 L168.164297,250.804473 L167.978998,247.828446 L167.691838,243.623566 L167.444542,240.281862 C167.373519,239.25114 167.291291,238.24473 167.19786,237.262104 L166.996058,235.328408 C164.395177,212.50087 155.340815,203.170989 139.832974,200.059114 L138.525715,199.814028 C137.64425,199.660026 136.742867,199.52459 135.821566,199.406474 L134.424675,199.242133 C134.189371,199.216855 133.952821,199.192621 133.715026,199.169411 L132.27332,199.042283 L132.27332,199.042283 L130.801736,198.938792 L130.801736,198.938792 L129.300276,198.858003 L129.300276,198.858003 L127.785563,198.799503 L126.241612,198.761396 L124.668422,198.742777 L124.668422,198.742777 L0,198.740492 L0,136.900224 L127.619345,136.900224 C129.706029,136.900224 131.728173,136.860653 133.685777,136.779928 L135.621869,136.685425 L135.621869,136.685425 L137.514935,136.563134 L137.514935,136.563134 L139.364974,136.412701 C139.669729,136.385264 139.97269,136.35664 140.273859,136.326822 L142.05936,136.133518 C143.235352,135.995014 144.382659,135.837162 145.501284,135.659493 L147.157707,135.378069 C167.866574,131.62361 178.22062,120.630459 178.22062,99.1783057 C178.22062,75.1035054 161.354066,60.5128152 127.619345,60.5128152 L0,60.5128152 L0,-7.10542736e-15 L141.674538,-7.10542736e-15 Z M83.2762921,250.785352 C93.6094556,250.785352 97.9327877,256.522818 99.4729615,262.01452 L99.6761617,262.804225 L99.6761617,262.804225 L99.8429155,263.58653 L99.9515227,264.204367 L99.9979397,264.509915 L100.075689,265.112992 L100.134243,265.703672 L100.156667,265.993728 L100.188494,266.561991 L100.198173,266.839685 L100.205751,267.380932 L100.205751,296.886512 L0,296.886512 L0,250.785352 L83.2762921,250.785352 Z\" fill=\"currentColor\" fillRule=\"nonzero\"></path>\r\n    </g>\r\n  </svg>\r\n);\r\nconst TSLogo = () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\">\r\n    <path d=\"M0 32v32h64.002V-.002H0zm51.577-2.55c1.625.406 2.865 1.128 4.003 2.306.59.63 1.463 1.778 1.534 2.052.02.08-2.763 1.95-4.45 2.997-.06.04-.305-.223-.58-.63-.823-1.2-1.686-1.717-3.007-1.808-1.94-.132-3.2.884-3.18 2.58 0 .498.07.792.274 1.2.427.884 1.22 1.412 3.708 2.49 4.582 1.97 6.542 3.27 7.76 5.12 1.36 2.062 1.666 5.354.742 7.802-1.016 2.662-3.535 4.47-7.08 5.07-1.097.193-3.698.163-4.876-.05-2.57-.457-5.008-1.727-6.512-3.393-.59-.65-1.737-2.347-1.666-2.47.03-.04.295-.203.59-.376l2.377-1.37 1.84-1.067.386.57c.538.823 1.717 1.95 2.428 2.326 2.042 1.077 4.846.924 6.227-.315.59-.538.833-1.097.833-1.92 0-.742-.09-1.067-.477-1.625-.498-.71-1.514-1.31-4.4-2.56-3.302-1.422-4.724-2.306-6.024-3.708-.752-.813-1.463-2.113-1.758-3.2-.244-.904-.305-3.17-.112-4.084.68-3.2 3.088-5.415 6.563-6.075 1.128-.213 3.75-.132 4.856.142zM36.552 32.12l.02 2.62h-8.33v23.67H22.35v-23.67h-8.33v-2.57l.07-2.64c.03-.04 5.1-.06 11.246-.05l11.185.03z\" fill=\"currentColor\"></path>\r\n  </svg>\r\n);\r\nconst SvelteLogo = () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 519 139\">\r\n    <path d=\"M172.4428,100.3382a24.0793,24.0793,0,0,1-13.72-3.8769,19.8715,19.8715,0,0,1-8.0107-10.6094l8.3515-3.0683a15.4054,15.4054,0,0,0,5.4541,6.6044,14.3656,14.3656,0,0,0,8.2657,2.4288,12.1375,12.1375,0,0,0,7.8818-2.3858,8.2746,8.2746,0,0,0,2.94-6.8174,7.4559,7.4559,0,0,0-.8095-3.4511,10.325,10.325,0,0,0-1.8321-2.6,12.3611,12.3611,0,0,0-3.1533-2.0879q-2.1314-1.0635-3.5361-1.6192-1.4062-.5521-4.1328-1.4912-3.41-1.1924-5.1133-1.874a38.46,38.46,0,0,1-4.4737-2.2588,16.5385,16.5385,0,0,1-4.1757-3.1523,15.2908,15.2908,0,0,1-2.5137-4.1338,14.77,14.77,0,0,1,4.0049-16.7871q5.1138-4.5162,13.8906-4.5166,7.3272,0,12.0576,3.2382a15.6579,15.6579,0,0,1,6.3487,8.6075l-8.1807,2.7265a9.5238,9.5238,0,0,0-3.9629-4.3887,13.31,13.31,0,0,0-6.9443-1.6621,10.703,10.703,0,0,0-6.69,1.875,6.2891,6.2891,0,0,0-2.4287,5.2832,5.5132,5.5132,0,0,0,1.874,4.0909,12.885,12.885,0,0,0,3.92,2.6416q2.0464.8524,6.2217,2.3007,2.5547.939,3.791,1.4063t3.6221,1.5762a24.997,24.997,0,0,1,3.6641,2.0029,32.1346,32.1346,0,0,1,2.9824,2.4287,12.7235,12.7235,0,0,1,2.6,3.11,17.39,17.39,0,0,1,1.5332,3.8339,17.5828,17.5828,0,0,1,.64,4.8155q0,8.3524-5.71,13.08Q181.3892,100.3388,172.4428,100.3382Zm54.6221-1.0224L206.6128,39.6644h9.5449L229.7065,81.25a64.4659,64.4659,0,0,1,1.875,6.8173,64.0335,64.0335,0,0,1,1.875-6.8173l13.3789-41.586h9.459L235.9272,99.3158Zm47.294,0V39.6644h36.9843V48.016H283.2221V64.3773h18.15v8.3516h-18.15V90.9642h29.9952v8.3516Zm61.44,0V39.6644h8.8633v51.13h29.1435v8.5215Zm71.41-51.13v51.13h-8.8632v-51.13H381.4741V39.6644h42.6074v8.5215Zm35.1934,51.13V39.6644h36.9844V48.016H451.2661V64.3773h18.15v8.3516h-18.15V90.9642h29.9951v8.3516Z\" fill=\"currentColor\"></path>\r\n    <path d=\"M110.2859,28.3189c-10.4-14.8851-30.94-19.2971-45.7914-9.8348L38.4118,35.1078A29.9232,29.9232,0,0,0,24.8931,55.1506a31.5143,31.5143,0,0,0,3.1076,20.2318,30.0059,30.0059,0,0,0-4.4761,11.1829,31.8885,31.8885,0,0,0,5.4472,24.1157c10.4022,14.8865,30.9424,19.2966,45.7915,9.8348l26.0826-16.6237a29.9182,29.9182,0,0,0,13.5187-20.0428,31.5276,31.5276,0,0,0-3.1057-20.2323,30.0012,30.0012,0,0,0,4.4742-11.1824,31.88,31.88,0,0,0-5.4472-24.1157\" fill=\"currentColor\"></path>\r\n    <path d=\"M61.9463,112.0815A20.718,20.718,0,0,1,39.71,103.8389a19.173,19.173,0,0,1-3.2766-14.5025,18.1886,18.1886,0,0,1,.6233-2.4357l.4912-1.4978,1.3362.9815a33.6466,33.6466,0,0,0,10.203,5.0978l.9694.2941-.0892.9675a5.8469,5.8469,0,0,0,1.052,3.8781,6.2388,6.2388,0,0,0,6.6952,2.485,5.7456,5.7456,0,0,0,1.602-.7041L85.3993,81.781A5.431,5.431,0,0,0,87.85,78.15a5.7944,5.7944,0,0,0-.9876-4.3712,6.2435,6.2435,0,0,0-6.6977-2.4864,5.7427,5.7427,0,0,0-1.6.7036l-9.9533,6.3449a19.0336,19.0336,0,0,1-5.2964,2.3259A20.7182,20.7182,0,0,1,41.078,72.4241a19.173,19.173,0,0,1-3.2766-14.5024,17.9892,17.9892,0,0,1,8.13-12.0513L72.0125,29.2472a19.0031,19.0031,0,0,1,5.3-2.3287A20.718,20.718,0,0,1,99.549,35.1611a19.1734,19.1734,0,0,1,3.2766,14.5025,18.4,18.4,0,0,1-.6233,2.4357l-.4912,1.4978-1.3356-.98a33.6175,33.6175,0,0,0-10.2037-5.1l-.9693-.2942.0892-.9675a5.8576,5.8576,0,0,0-1.052-3.878,6.2388,6.2388,0,0,0-6.6952-2.485,5.7456,5.7456,0,0,0-1.602.7041L53.8592,57.219A5.422,5.422,0,0,0,51.41,60.85a5.7858,5.7858,0,0,0,.9857,4.3717,6.2435,6.2435,0,0,0,6.6977,2.4864,5.7652,5.7652,0,0,0,1.602-.7041l9.952-6.3425a18.9787,18.9787,0,0,1,5.2958-2.3278,20.7183,20.7183,0,0,1,22.2369,8.2427,19.173,19.173,0,0,1,3.2766,14.5024,17.9982,17.9982,0,0,1-8.13,12.0532L67.246,109.7528a19.0031,19.0031,0,0,1-5.3,2.3287\" fill=\"currentColor\"></path>\r\n  </svg>\r\n);\r\nconst VueLogo = () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 261.76 226.69\">\r\n    <path fill=\"currentColor\" d=\"m161.096.001-30.224 52.35L100.647.002H-.005L130.872 226.69 261.749 0z\" />\r\n    <path fill=\"#41B883\" d=\"m161.096.001-30.224 52.35L100.647.002H52.346l78.526 136.01L209.398.001z\" />\r\n  </svg>\r\n);\r\n\r\n\r\nconst logos1 = [\r\n  { id: 1, component: <ReactLogo /> },\r\n  { id: 2, component: <AstroLogo /> },\r\n  { id: 3, component: <TailwindLogo /> },\r\n  { id: 4, component: <VueLogo /> },\r\n  { id: 5, component: <NextjsLogo /> },\r\n  { id: 6, component: <RemixLogo /> },\r\n  { id: 7, component: <JSLogo /> },\r\n  { id: 8, component: <TSLogo /> },\r\n  { id: 9, component: <SvelteLogo /> },\r\n];\r\n\r\nconst logos2 = [\r\n  { id: 1, component: <ReactLogo /> },\r\n  { id: 2, component: <AstroLogo /> },\r\n  { id: 3, component: <TailwindLogo /> },\r\n  { id: 4, component: <JSLogo /> },\r\n  { id: 5, component: <NextjsLogo /> },\r\n  { id: 6, component: <RemixLogo /> },\r\n  { id: 7, component: <JSLogo /> },\r\n  { id: 8, component: <TSLogo /> },\r\n  { id: 9, component: <SvelteLogo /> },\r\n];\r\n\r\n\r\nfunction Logomarquee() {\r\n  // We need to inject the keyframes animation into the document's head\r\n  // because Tailwind CSS doesn't directly support the 'cqw' unit.\r\n  React.useEffect(() => {\r\n    const styleSheet = document.createElement(\"style\");\r\n    styleSheet.innerText = `\r\n      @keyframes marquee-move {\r\n        to {\r\n          transform: translateX(calc(-100cqw - var(--item-gap)));\r\n        }\r\n      }\r\n    `;\r\n    document.head.appendChild(styleSheet);\r\n    return () => {\r\n      document.head.removeChild(styleSheet);\r\n    };\r\n  }, []);\r\n\r\n  const Marquee = ({ logos, direction = 'forwards' }: { logos: typeof logos1; direction?: string }) => {\r\n    const numItems = logos.length;\r\n    const speed = '25s';\r\n    const itemWidth = '120px';\r\n    const itemGap = '25px';\r\n\r\n    return (\r\n      <div\r\n        className=\"max-w-full overflow-hidden\"\r\n        style={{\r\n          '--speed': speed,\r\n          '--numItems': numItems,\r\n          '--item-width': itemWidth,\r\n          '--item-gap': itemGap,\r\n          '--direction': direction,\r\n          maskImage: 'linear-gradient(to right, transparent, black 2rem, black calc(100% - 2rem), transparent)',\r\n        } as React.CSSProperties}\r\n      >\r\n        <div\r\n          className=\"w-max flex\"\r\n          style={{\r\n            '--track-width': `calc(var(--item-width) * ${numItems})`,\r\n            '--track-gap': `calc(var(--item-gap) * ${numItems})`,\r\n          } as React.CSSProperties}\r\n        >\r\n          {[...logos, ...logos].map((logo, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"flex-shrink-0 flex justify-center items-center bg-white/10 border border-black rounded-2xl text-white\"\r\n              style={{\r\n                width: 'var(--item-width)',\r\n                aspectRatio: '1 / 1.2',\r\n                marginRight: 'var(--item-gap)',\r\n                animation: `marquee-move var(--speed) linear infinite ${direction}`,\r\n              } as React.CSSProperties}\r\n            >\r\n              <div className=\"w-3/5 h-auto\">\r\n                {logo.component}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"items-center overflow-hidden\">\r\n       <div className=\"w-full max-w-6xl flex flex-col gap-y-6\">\r\n            <Marquee logos={logos1} />\r\n            <Marquee logos={logos2} direction=\"reverse\" />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logomarquee;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "marquee.tsx",
      "content": "'use client'\r\nimport React, { useRef, useEffect, useCallback } from \"react\";\r\n\r\n// cn utility function (similar to clsx or classnames)\r\nfunction cn(...classes: (string | boolean | undefined | null)[]): string {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\nconst useAnimationFrame = (callback: (time: number, delta: number) => void) => {\r\n  const requestRef = useRef<number | null>(null);\r\n  const previousTimeRef = useRef<number | null>(null);\r\n\r\n  const animate = useCallback((time: number) => {\r\n    if (previousTimeRef.current !== null && previousTimeRef.current !== undefined) {\r\n      const delta = time - previousTimeRef.current;\r\n      callback(time, delta);\r\n    }\r\n    previousTimeRef.current = time;\r\n    requestRef.current = requestAnimationFrame(animate);\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    requestRef.current = requestAnimationFrame(animate);\r\n    return () => {\r\n      if (requestRef.current) {\r\n        cancelAnimationFrame(requestRef.current);\r\n      }\r\n    };\r\n  }, [animate]);\r\n};\r\n\r\ninterface MarqueeProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  className?: string;\r\n  reverse?: boolean;\r\n  pauseOnHover?: boolean;\r\n  children: React.ReactNode;\r\n  speed?: number;\r\n  vertical?: boolean;\r\n  repeat?: number;\r\n}\r\n\r\nfunction Marquee({\r\n  className,\r\n  reverse = false,\r\n  pauseOnHover = false,\r\n  children,\r\n  speed = 50,\r\n  vertical = false,\r\n  repeat = 4,\r\n  ...props\r\n}: MarqueeProps) {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const contentRef = useRef<HTMLDivElement | null>(null);\r\n  const singleContentBlockRef = useRef<HTMLDivElement | null>(null);\r\n  const animX = useRef<number>(0);\r\n  const isPaused = useRef<boolean>(false);\r\n\r\n  useAnimationFrame((t, delta) => {\r\n    if (!containerRef.current || !contentRef.current || !singleContentBlockRef.current) return;\r\n    \r\n    if (pauseOnHover && isPaused.current) {\r\n      return;\r\n    }\r\n\r\n    const singleContentBlockSize = vertical \r\n      ? singleContentBlockRef.current.offsetHeight \r\n      : singleContentBlockRef.current.offsetWidth;\r\n\r\n    const contentStyle = window.getComputedStyle(contentRef.current);\r\n    const computedGap = parseFloat(vertical ? contentStyle.rowGap || '0' : contentStyle.columnGap || '0');\r\n    const loopDistance = singleContentBlockSize + computedGap;\r\n    const dx = (speed * delta) / 1000;\r\n    const effectiveDx = reverse ? dx : -dx;\r\n    animX.current += effectiveDx;\r\n\r\n    if (Math.abs(animX.current) >= loopDistance) {\r\n      animX.current = animX.current % loopDistance;\r\n    }\r\n\r\n    if (vertical) {\r\n      contentRef.current.style.transform = `translateY(${animX.current}px)`;\r\n    } else {\r\n      contentRef.current.style.transform = `translateX(${animX.current}px)`;\r\n    }\r\n  });\r\n\r\n  const handleMouseEnter = useCallback(() => {\r\n    if (pauseOnHover) {\r\n      isPaused.current = true;\r\n    }\r\n  }, [pauseOnHover]);\r\n\r\n  const handleMouseLeave = useCallback(() => {\r\n    if (pauseOnHover) {\r\n      isPaused.current = false;\r\n    }\r\n  }, [pauseOnHover]);\r\n\r\n  return (\r\n    <div\r\n      {...props}\r\n      ref={containerRef}\r\n      className={cn(\r\n        \"group flex overflow-hidden p-2 [--gap:2rem] [gap:var(--gap)]\" +\r\n          (vertical ? \" flex-col\" : \" flex-row\"),\r\n        className,\r\n      )}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      <div\r\n        ref={contentRef}\r\n        className={cn(\r\n          \"flex shrink-0 justify-around [gap:var(--gap)]\" +\r\n            (vertical ? \" flex-col\" : \" flex-row\")\r\n        )}\r\n      >\r\n        {Array(repeat)\r\n          .fill(0)\r\n          .map((_, i) => (\r\n            <div key={i} ref={i === 0 ? singleContentBlockRef : null} className=\"flex gap-8\">\r\n              {children}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Marquee;",
      "type": "registry:ui"
    },
    {
      "path": "marqueeText.tsx",
      "content": "'use client'\r\nimport React, {\r\n  useRef,\r\n  useEffect,\r\n  useState,\r\n  useMemo,\r\n  useId,\r\n  FC,\r\n  PointerEvent,\r\n} from \"react\";\r\n\r\n// The main application component\r\nconst MarqueeText = () => {\r\n  return (\r\n    <div className=\"w-full font-sans overflow-hidden\">\r\n      <LinearLoop\r\n        marqueeText=\"Hello there! How’s it going? Welcome to Seraui. Hope you like all the design components\"\r\n        speed={1}\r\n        direction=\"left\"\r\n        interactive={true}\r\n        className=\"fill-gray-900 dark:fill-white\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// --- Component for the linear text loop ---\r\n\r\ninterface LinearLoopProps {\r\n  /** The text to be displayed in the marquee */\r\n  marqueeText?: string;\r\n  /** The speed of the animation. Can be positive or negative. */\r\n  speed?: number;\r\n  /** Additional CSS classes for styling the text */\r\n  className?: string;\r\n  /** The direction of the marquee animation */\r\n  direction?: \"left\" | \"right\";\r\n  /** Whether the user can interact with the marquee by dragging */\r\n  interactive?: boolean;\r\n}\r\n\r\nconst LinearLoop: FC<LinearLoopProps> = ({\r\n  marqueeText = \"\",\r\n  speed = 2,\r\n  className,\r\n  direction = \"left\",\r\n  interactive = true,\r\n}) => {\r\n  // Memoize the text to ensure it has a trailing space for seamless looping\r\n  const text = useMemo(() => {\r\n    const hasTrailing = /\\s|\\u00A0$/.test(marqueeText);\r\n    return (\r\n      (hasTrailing ? marqueeText.replace(/\\s+$/, \"\") : marqueeText) + \"\\u00A0\"\r\n    );\r\n  }, [marqueeText]);\r\n\r\n  // Refs for SVG elements\r\n  const measureRef = useRef<SVGTextElement | null>(null);\r\n  const tspansRef = useRef<SVGTSpanElement[]>([]);\r\n  const pathRef = useRef<SVGPathElement | null>(null);\r\n\r\n  // State for measurements\r\n  const [pathLength, setPathLength] = useState(0);\r\n  const [spacing, setSpacing] = useState(0);\r\n\r\n  // Unique ID for the SVG path\r\n  const uid = useId();\r\n  const pathId = `linear-path-${uid}`;\r\n\r\n  // Define the SVG path as a straight horizontal line.\r\n  // M is \"moveto\", L is \"lineto\". This creates a line from x=-100 to x=1540 at y=90.\r\n  const pathD = \"M-100,90 L1540,90\";\r\n\r\n  // Refs for interactive dragging logic\r\n  const dragRef = useRef(false);\r\n  const lastXRef = useRef(0);\r\n  const dirRef = useRef<\"left\" | \"right\">(direction);\r\n  const velRef = useRef(0); // Velocity of the drag\r\n\r\n  // Effect to measure the width of a single text instance\r\n  useEffect(() => {\r\n    if (measureRef.current) {\r\n      setSpacing(measureRef.current.getComputedTextLength());\r\n    }\r\n  }, [text, className]);\r\n\r\n  // Effect to measure the total length of the SVG path\r\n  useEffect(() => {\r\n    if (pathRef.current) {\r\n      setPathLength(pathRef.current.getTotalLength());\r\n    }\r\n  }, []); // Empty dependency array as pathD is constant\r\n\r\n  // Animation loop effect\r\n  useEffect(() => {\r\n    if (!spacing) return; // Wait until spacing is calculated\r\n\r\n    let frame: number;\r\n    const step = () => {\r\n      tspansRef.current.forEach((t) => {\r\n        if (!t) return;\r\n        let x = parseFloat(t.getAttribute(\"x\") || \"0\");\r\n\r\n        // If not dragging, move the text based on speed and direction\r\n        if (!dragRef.current) {\r\n          const delta =\r\n            dirRef.current === \"right\" ? Math.abs(speed) : -Math.abs(speed);\r\n          x += delta;\r\n        }\r\n\r\n        // Logic to wrap the text around for an infinite loop\r\n        // Each text instance should maintain its relative position\r\n        const totalWidth = tspansRef.current.length * spacing;\r\n        if (x < -spacing) {\r\n          x = x + totalWidth;\r\n        }\r\n        if (x > totalWidth - spacing) {\r\n          x = x - totalWidth;\r\n        }\r\n\r\n        t.setAttribute(\"x\", x.toString());\r\n      });\r\n      frame = requestAnimationFrame(step);\r\n    };\r\n\r\n    // Start the animation\r\n    step();\r\n\r\n    // Cleanup function to cancel the animation frame on component unmount\r\n    return () => cancelAnimationFrame(frame);\r\n  }, [spacing, speed]);\r\n\r\n  // Calculate how many times the text needs to repeat to fill the path\r\n  const repeats =\r\n    pathLength && spacing ? Math.ceil(pathLength / spacing) + 2 : 0;\r\n  const ready = pathLength > 0 && spacing > 0;\r\n\r\n  // --- Pointer (Mouse/Touch) Event Handlers for Interaction ---\r\n\r\n  const onPointerDown = (e: PointerEvent) => {\r\n    if (!interactive) return;\r\n    dragRef.current = true;\r\n    lastXRef.current = e.clientX;\r\n    velRef.current = 0;\r\n    (e.target as HTMLElement).setPointerCapture(e.pointerId);\r\n  };\r\n\r\n  const onPointerMove = (e: PointerEvent) => {\r\n    if (!interactive || !dragRef.current) return;\r\n    const dx = e.clientX - lastXRef.current;\r\n    lastXRef.current = e.clientX;\r\n    velRef.current = dx; // Store velocity for flicking effect\r\n\r\n    // Move each tspan element based on the drag distance\r\n    tspansRef.current.forEach((t) => {\r\n      if (!t) return;\r\n      let x = parseFloat(t.getAttribute(\"x\") || \"0\");\r\n      x += dx;\r\n\r\n      // Maintain proper wrapping with consistent spacing\r\n      const totalWidth = tspansRef.current.length * spacing;\r\n      if (x < -spacing) {\r\n        x = x + totalWidth;\r\n      }\r\n      if (x > totalWidth - spacing) {\r\n        x = x - totalWidth;\r\n      }\r\n\r\n      t.setAttribute(\"x\", x.toString());\r\n    });\r\n  };\r\n\r\n  const endDrag = () => {\r\n    if (!interactive) return;\r\n    dragRef.current = false;\r\n    // Set the animation direction based on the final drag velocity (flick)\r\n    if (Math.abs(velRef.current) > 1) {\r\n        dirRef.current = velRef.current > 0 ? \"right\" : \"left\";\r\n    }\r\n  };\r\n\r\n  // Dynamically set the cursor style based on interaction state\r\n  const cursorStyle = interactive\r\n    ? dragRef.current\r\n      ? \"grabbing\"\r\n      : \"grab\"\r\n    : \"auto\";\r\n\r\n  return (\r\n    <div\r\n      style={{ visibility: ready ? \"visible\" : \"hidden\", cursor: cursorStyle }}\r\n      onPointerDown={onPointerDown}\r\n      onPointerMove={onPointerMove}\r\n      onPointerUp={endDrag}\r\n      onPointerLeave={endDrag}\r\n    >\r\n      <svg\r\n        className=\"select-none w-full overflow-visible block text-[6rem] font-bold tracking-[5px] uppercase leading-none\"\r\n        viewBox=\"0 0 1440 160\" // Adjusted viewBox for better vertical alignment\r\n      >\r\n        {/* Hidden text element used only for measuring the width */}\r\n        <text\r\n          ref={measureRef}\r\n          xmlSpace=\"preserve\"\r\n          style={{ visibility: \"hidden\", opacity: 0, pointerEvents: \"none\" }}\r\n        >\r\n          {text}\r\n        </text>\r\n        <defs>\r\n          {/* The invisible path the text will follow */}\r\n          <path\r\n            ref={pathRef}\r\n            id={pathId}\r\n            d={pathD}\r\n            fill=\"none\"\r\n            stroke=\"transparent\"\r\n          />\r\n        </defs>\r\n        {/* Render the visible text only when measurements are ready */}\r\n        {ready && (\r\n          <text xmlSpace=\"preserve\" className={className ?? \"fill-current\"}>\r\n            <textPath href={`#${pathId}`} xmlSpace=\"preserve\">\r\n              {/* Render the repeated text spans */}\r\n              {Array.from({ length: repeats }).map((_, i) => (\r\n                <tspan\r\n                  key={i}\r\n                  x={i * spacing}\r\n                  ref={(el) => {\r\n                    if (el) tspansRef.current[i] = el;\r\n                  }}\r\n                >\r\n                  {text}\r\n                </tspan>\r\n              ))}\r\n            </textPath>\r\n          </text>\r\n        )}\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarqueeText;\r\n",
      "type": "registry:ui"
    }
  ]
}