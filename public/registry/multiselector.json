{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multiselector",
  "title": "Multiselector",
  "description": "A minimalistic multiselector component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "multiselector.tsx",
      "content": "'use client'\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n// Type definition for option objects\r\ninterface Option {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\n// A list of all available options for the multi-select component.\r\nconst ALL_OPTIONS: Option[] = [\r\n  { id: 1, name: 'React', value: 'react' },\r\n  { id: 2, name: 'Vue', value: 'vue' },\r\n  { id: 3, name: 'Angular', value: 'angular' },\r\n  { id: 4, name: 'Svelte', value: 'svelte' },\r\n  { id: 5, name: 'Ember', value: 'ember' },\r\n  { id: 6, name: 'Backbone', value: 'backbone' },\r\n  { id: 7, name: 'Preact', value: 'preact' },\r\n  { id: 8, name: 'Alpine.js', value: 'alpine' },\r\n  { id: 9, name: 'Solid.js', value: 'solid' },\r\n  { id: 10, name: 'Qwik', value: 'qwik' },\r\n];\r\n\r\n\r\n\r\n// Icon for the close button on tags (lucide-react style)\r\nconst XIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-3 w-3\">\r\n        <path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/>\r\n    </svg>\r\n);\r\n\r\n// Icon for the checkmark on selected items (lucide-react style)\r\nconst CheckIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\">\r\n        <path d=\"M20 6 9 17l-5-5\"/>\r\n    </svg>\r\n);\r\n\r\n\r\n/**\r\n * A reusable multi-select component styled to feel like shadcn/ui.\r\n * It features a clean, modern interface, keyboard navigation, search,\r\n * and a design system that prioritizes accessibility and developer experience.\r\n */\r\nconst MultiSelect: React.FC = () => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([ALL_OPTIONS[0], ALL_OPTIONS[2]]);\r\n    const [searchTerm, setSearchTerm] = useState<string>('');\r\n    const [highlightedIndex, setHighlightedIndex] = useState<number>(0);\r\n\r\n    const wrapperRef = useRef<HTMLDivElement>(null);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {\r\n                setIsOpen(false);\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    const filteredOptions = ALL_OPTIONS.filter(option =>\r\n        !selectedOptions.some(selected => selected.id === option.id) &&\r\n        option.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    const toggleOption = (option: Option) => {\r\n        setSelectedOptions(prev =>\r\n            prev.some(o => o.id === option.id)\r\n                ? prev.filter(o => o.id !== option.id)\r\n                : [...prev, option]\r\n        );\r\n        setSearchTerm('');\r\n        inputRef.current?.focus();\r\n    };\r\n\r\n    const removeOption = (option: Option) => {\r\n        setSelectedOptions(selectedOptions.filter(o => o.id !== option.id));\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Backspace' && searchTerm === '' && selectedOptions.length > 0) {\r\n            removeOption(selectedOptions[selectedOptions.length - 1]);\r\n        }\r\n\r\n        if (!isOpen) {\r\n            if (e.key === 'ArrowDown' || e.key === 'Enter') {\r\n                setIsOpen(true);\r\n                setHighlightedIndex(0);\r\n            }\r\n            return;\r\n        }\r\n\r\n        switch (e.key) {\r\n            case 'ArrowDown':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev + 1) % filteredOptions.length);\r\n                break;\r\n            case 'ArrowUp':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev - 1 + filteredOptions.length) % filteredOptions.length);\r\n                break;\r\n            case 'Enter':\r\n                e.preventDefault();\r\n                if (filteredOptions[highlightedIndex]) {\r\n                    toggleOption(filteredOptions[highlightedIndex]);\r\n                }\r\n                break;\r\n            case 'Escape':\r\n                setIsOpen(false);\r\n                break;\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            setHighlightedIndex(0);\r\n        }\r\n    }, [isOpen, searchTerm]);\r\n\r\n    return (\r\n        <div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\r\n            <div className=\"relative\">\r\n                <div\r\n                    className=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\r\n                    onClick={() => {\r\n                        setIsOpen(true);\r\n                        inputRef.current?.focus();\r\n                    }}\r\n                >\r\n                    {selectedOptions.map(option => (\r\n                        <div key={option.id} className=\"flex items-center gap-1.5 bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 font-medium px-2 py-1 rounded-md\">\r\n                            {option.name}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\r\n                                onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                    e.stopPropagation();\r\n                                    removeOption(option);\r\n                                }}\r\n                            >\r\n                                <XIcon />\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                    <input\r\n                        ref={inputRef}\r\n                        type=\"text\"\r\n                        value={searchTerm}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                        onFocus={() => setIsOpen(true)}\r\n                        onKeyDown={handleKeyDown}\r\n                        placeholder={selectedOptions.length === 0 ? \"Select frameworks...\" : \"\"}\r\n                        className=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\r\n                    />\r\n                </div>\r\n\r\n                {isOpen && (\r\n                    <div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\r\n                        <ul className=\"p-1\">\r\n                            {filteredOptions.length > 0 ? (\r\n                                filteredOptions.map((option, index) => (\r\n                                    <li\r\n                                        key={option.id}\r\n                                        className={`flex items-center justify-between p-2 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? 'bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100' : 'text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100'}`}\r\n                                        onClick={() => toggleOption(option)}\r\n                                        onMouseEnter={() => setHighlightedIndex(index)}\r\n                                    >\r\n                                        {option.name}\r\n                                        {selectedOptions.some(o => o.id === option.id) && (\r\n                                            <CheckIcon />\r\n                                        )}\r\n                                    </li>\r\n                                ))\r\n                            ) : (\r\n                                <li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">No options found.</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Main App component to render the MultiSelect\r\nexport default function MultiSelectPage() {\r\n  return (\r\n    <div className=\"p-4 font-sans\">\r\n        <style>{`\r\n            @keyframes popover-in {\r\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\r\n                to { opacity: 1; transform: scale(1) translateY(0); }\r\n            }\r\n            .animate-popover-in {\r\n                transform-origin: top;\r\n                animation: popover-in 0.1s ease-out forwards;\r\n            }\r\n        `}</style>\r\n        <div className=\"w-full max-w-md\">\r\n            <h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">Framework Multi-Select</h1>\r\n            <p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">Select your favorite frameworks.</p>\r\n            <MultiSelect />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "multiselector1.tsx",
      "content": "'use client'\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n// Type definition for option objects\r\ninterface Option {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\n// A list of all available options for the multi-select component.\r\nconst ALL_OPTIONS: Option[] = [\r\n  { id: 1, name: 'React', value: 'react' },\r\n  { id: 2, name: 'Vue', value: 'vue' },\r\n  { id: 3, name: 'Angular', value: 'angular' },\r\n  { id: 4, name: 'Svelte', value: 'svelte' },\r\n  { id: 5, name: 'Ember', value: 'ember' },\r\n  { id: 6, name: 'Backbone', value: 'backbone' },\r\n  { id: 7, name: 'Preact', value: 'preact' },\r\n  { id: 8, name: 'Alpine.js', value: 'alpine' },\r\n  { id: 9, name: 'Solid.js', value: 'solid' },\r\n  { id: 10, name: 'Qwik', value: 'qwik' },\r\n];\r\n\r\n\r\n\r\n// Icon for the close button on tags (lucide-react style)\r\nconst XIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-3 w-3\">\r\n        <path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/>\r\n    </svg>\r\n);\r\n\r\n// Icon for the checkmark on selected items (lucide-react style)\r\nconst CheckIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\">\r\n        <path d=\"M20 6 9 17l-5-5\"/>\r\n    </svg>\r\n);\r\n\r\n\r\n/**\r\n * A reusable multi-select component styled to feel like shadcn/ui.\r\n * It features a clean, modern interface, keyboard navigation, search,\r\n * and a design system that prioritizes accessibility and developer experience.\r\n */\r\nconst MultiSelect: React.FC = () => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([ALL_OPTIONS[0], ALL_OPTIONS[2]]);\r\n    const [searchTerm, setSearchTerm] = useState<string>('');\r\n    const [highlightedIndex, setHighlightedIndex] = useState<number>(0);\r\n\r\n    const wrapperRef = useRef<HTMLDivElement>(null);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {\r\n                setIsOpen(false);\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    const filteredOptions = ALL_OPTIONS.filter(option =>\r\n        !selectedOptions.some(selected => selected.id === option.id) &&\r\n        option.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    const toggleOption = (option: Option) => {\r\n        setSelectedOptions(prev =>\r\n            prev.some(o => o.id === option.id)\r\n                ? prev.filter(o => o.id !== option.id)\r\n                : [...prev, option]\r\n        );\r\n        setSearchTerm('');\r\n        inputRef.current?.focus();\r\n    };\r\n\r\n    const removeOption = (option: Option) => {\r\n        setSelectedOptions(selectedOptions.filter(o => o.id !== option.id));\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Backspace' && searchTerm === '' && selectedOptions.length > 0) {\r\n            removeOption(selectedOptions[selectedOptions.length - 1]);\r\n        }\r\n\r\n        if (!isOpen) {\r\n            if (e.key === 'ArrowDown' || e.key === 'Enter') {\r\n                setIsOpen(true);\r\n                setHighlightedIndex(0);\r\n            }\r\n            return;\r\n        }\r\n\r\n        switch (e.key) {\r\n            case 'ArrowDown':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev + 1) % filteredOptions.length);\r\n                break;\r\n            case 'ArrowUp':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev - 1 + filteredOptions.length) % filteredOptions.length);\r\n                break;\r\n            case 'Enter':\r\n                e.preventDefault();\r\n                if (filteredOptions[highlightedIndex]) {\r\n                    toggleOption(filteredOptions[highlightedIndex]);\r\n                }\r\n                break;\r\n            case 'Escape':\r\n                setIsOpen(false);\r\n                break;\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            setHighlightedIndex(0);\r\n        }\r\n    }, [isOpen, searchTerm]);\r\n\r\n    return (\r\n        <div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\r\n            <div className=\"relative\">\r\n                <div\r\n                    className=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\r\n                    onClick={() => {\r\n                        setIsOpen(true);\r\n                        inputRef.current?.focus();\r\n                    }}\r\n                >\r\n                    {selectedOptions.map(option => (\r\n                        <div key={option.id} className=\"flex items-center gap-1.5 bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 font-medium px-2 py-1 rounded-md\">\r\n                            {option.name}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\r\n                                onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                    e.stopPropagation();\r\n                                    removeOption(option);\r\n                                }}\r\n                            >\r\n                                <XIcon />\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                    <input\r\n                        ref={inputRef}\r\n                        type=\"text\"\r\n                        value={searchTerm}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                        onFocus={() => setIsOpen(true)}\r\n                        onKeyDown={handleKeyDown}\r\n                        placeholder={selectedOptions.length === 0 ? \"Select frameworks...\" : \"\"}\r\n                        className=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\r\n                    />\r\n                </div>\r\n\r\n                {isOpen && (\r\n                    <div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\r\n                        <ul className=\"p-1\">\r\n                            {filteredOptions.length > 0 ? (\r\n                                filteredOptions.map((option, index) => (\r\n                                    <li\r\n                                        key={option.id}\r\n                                        className={`flex items-center justify-between p-2 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? 'bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100' : 'text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100'}`}\r\n                                        onClick={() => toggleOption(option)}\r\n                                        onMouseEnter={() => setHighlightedIndex(index)}\r\n                                    >\r\n                                        {option.name}\r\n                                        {selectedOptions.some(o => o.id === option.id) && (\r\n                                            <CheckIcon />\r\n                                        )}\r\n                                    </li>\r\n                                ))\r\n                            ) : (\r\n                                <li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">No options found.</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Main App component to render the MultiSelect\r\nexport default function MultiSelectPage() {\r\n  return (\r\n    <div className=\"p-4 font-sans\">\r\n        <style>{`\r\n            @keyframes popover-in {\r\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\r\n                to { opacity: 1; transform: scale(1) translateY(0); }\r\n            }\r\n            .animate-popover-in {\r\n                transform-origin: top;\r\n                animation: popover-in 0.1s ease-out forwards;\r\n            }\r\n        `}</style>\r\n        <div className=\"w-full max-w-md\">\r\n            <h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">Framework Multi-Select</h1>\r\n            <p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">Select your favorite frameworks.</p>\r\n            <MultiSelect />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "multiselector2.tsx",
      "content": "'use client'\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n// Type definition for tag objects\r\ninterface Tag {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n  color: string;\r\n}\r\n\r\n// A list of all available tags for the multi-select component.\r\nconst ALL_TAGS: Tag[] = [\r\n  { id: 1, name: 'JavaScript', value: 'javascript', color: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' },\r\n  { id: 2, name: 'TypeScript', value: 'typescript', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' },\r\n  { id: 3, name: 'React', value: 'react', color: 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200' },\r\n  { id: 4, name: 'Vue', value: 'vue', color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' },\r\n  { id: 5, name: 'Angular', value: 'angular', color: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' },\r\n  { id: 6, name: 'Node.js', value: 'nodejs', color: 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200' },\r\n  { id: 7, name: 'Python', value: 'python', color: 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200' },\r\n  { id: 8, name: 'CSS', value: 'css', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200' },\r\n  { id: 9, name: 'HTML', value: 'html', color: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' },\r\n  { id: 10, name: 'GraphQL', value: 'graphql', color: 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200' },\r\n];\r\n\r\n\r\n\r\n// Icon for the close button on tags (lucide-react style)\r\nconst XIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-3 w-3\">\r\n        <path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/>\r\n    </svg>\r\n);\r\n\r\n// Icon for the checkmark on selected items (lucide-react style)\r\nconst CheckIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\">\r\n        <path d=\"M20 6 9 17l-5-5\"/>\r\n    </svg>\r\n);\r\n\r\n// Tag icon for visual enhancement\r\nconst TagIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-3 w-3\">\r\n        <path d=\"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z\"/>\r\n        <path d=\"M7 7h.01\"/>\r\n    </svg>\r\n);\r\n\r\n/**\r\n * A colorful tag-based multi-select component styled to feel like shadcn/ui.\r\n * Features colored tags, search functionality, and a modern interface.\r\n */\r\nconst TagMultiSelect: React.FC = () => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [selectedTags, setSelectedTags] = useState<Tag[]>([ALL_TAGS[0], ALL_TAGS[2]]);\r\n    const [searchTerm, setSearchTerm] = useState<string>('');\r\n    const [highlightedIndex, setHighlightedIndex] = useState<number>(0);\r\n\r\n    const wrapperRef = useRef<HTMLDivElement>(null);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {\r\n                setIsOpen(false);\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    const filteredTags = ALL_TAGS.filter(tag =>\r\n        !selectedTags.some(selected => selected.id === tag.id) &&\r\n        tag.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    const toggleTag = (tag: Tag) => {\r\n        setSelectedTags(prev =>\r\n            prev.some(t => t.id === tag.id)\r\n                ? prev.filter(t => t.id !== tag.id)\r\n                : [...prev, tag]\r\n        );\r\n        setSearchTerm('');\r\n        inputRef.current?.focus();\r\n    };\r\n\r\n    const removeTag = (tag: Tag) => {\r\n        setSelectedTags(selectedTags.filter(t => t.id !== tag.id));\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Backspace' && searchTerm === '' && selectedTags.length > 0) {\r\n            removeTag(selectedTags[selectedTags.length - 1]);\r\n        }\r\n\r\n        if (!isOpen) {\r\n            if (e.key === 'ArrowDown' || e.key === 'Enter') {\r\n                setIsOpen(true);\r\n                setHighlightedIndex(0);\r\n            }\r\n            return;\r\n        }\r\n\r\n        switch (e.key) {\r\n            case 'ArrowDown':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev + 1) % filteredTags.length);\r\n                break;\r\n            case 'ArrowUp':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev - 1 + filteredTags.length) % filteredTags.length);\r\n                break;\r\n            case 'Enter':\r\n                e.preventDefault();\r\n                if (filteredTags[highlightedIndex]) {\r\n                    toggleTag(filteredTags[highlightedIndex]);\r\n                }\r\n                break;\r\n            case 'Escape':\r\n                setIsOpen(false);\r\n                break;\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            setHighlightedIndex(0);\r\n        }\r\n    }, [isOpen, searchTerm]);\r\n\r\n    return (\r\n        <div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\r\n            <div className=\"relative\">\r\n                <div\r\n                    className=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\r\n                    onClick={() => {\r\n                        setIsOpen(true);\r\n                        inputRef.current?.focus();\r\n                    }}\r\n                >\r\n                    {selectedTags.map(tag => (\r\n                        <div key={tag.id} className={`flex items-center gap-1.5 ${tag.color} font-medium px-2 py-1 rounded-full text-xs`}>\r\n                            <TagIcon />\r\n                            {tag.name}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"hover:bg-black/10 dark:hover:bg-white/10 rounded-full p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\r\n                                onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                    e.stopPropagation();\r\n                                    removeTag(tag);\r\n                                }}\r\n                            >\r\n                                <XIcon />\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                    <input\r\n                        ref={inputRef}\r\n                        type=\"text\"\r\n                        value={searchTerm}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                        onFocus={() => setIsOpen(true)}\r\n                        onKeyDown={handleKeyDown}\r\n                        placeholder={selectedTags.length === 0 ? \"Select tags...\" : \"\"}\r\n                        className=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\r\n                    />\r\n                </div>\r\n\r\n                {isOpen && (\r\n                    <div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\r\n                        <ul className=\"p-1\">\r\n                            {filteredTags.length > 0 ? (\r\n                                filteredTags.map((tag, index) => (\r\n                                    <li\r\n                                        key={tag.id}\r\n                                        className={`flex items-center justify-between p-2 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? 'bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100' : 'text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100'}`}\r\n                                        onClick={() => toggleTag(tag)}\r\n                                        onMouseEnter={() => setHighlightedIndex(index)}\r\n                                    >\r\n                                        <div className=\"flex items-center gap-2\">\r\n                                            <div className={`w-3 h-3 rounded-full ${tag.color.split(' ')[0]}`}></div>\r\n                                            {tag.name}\r\n                                        </div>\r\n                                        {selectedTags.some(t => t.id === tag.id) && (\r\n                                            <CheckIcon />\r\n                                        )}\r\n                                    </li>\r\n                                ))\r\n                            ) : (\r\n                                <li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">No tags found.</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Main App component to render the TagMultiSelect\r\nexport default function TagMultiSelectPage() {\r\n  return (\r\n    <div className=\"p-4 font-sans\">\r\n        <style>{`\r\n            @keyframes popover-in {\r\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\r\n                to { opacity: 1; transform: scale(1) translateY(0); }\r\n            }\r\n            .animate-popover-in {\r\n                transform-origin: top;\r\n                animation: popover-in 0.1s ease-out forwards;\r\n            }\r\n        `}</style>\r\n        <div className=\"w-full max-w-md\">\r\n            <h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">Tag Multi-Select</h1>\r\n            <p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">Select your technology tags with colors.</p>\r\n            <TagMultiSelect />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "multiselector3.tsx",
      "content": "'use client'\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n// Type definition for skill objects\r\ninterface Skill {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n  level: 'Beginner' | 'Intermediate' | 'Advanced' | 'Expert';\r\n  category: 'Frontend' | 'Backend' | 'DevOps' | 'Design' | 'Mobile';\r\n}\r\n\r\n// A list of all available skills for the multi-select component.\r\nconst ALL_SKILLS: Skill[] = [\r\n  { id: 1, name: 'React', value: 'react', level: 'Advanced', category: 'Frontend' },\r\n  { id: 2, name: 'Node.js', value: 'nodejs', level: 'Intermediate', category: 'Backend' },\r\n  { id: 3, name: 'TypeScript', value: 'typescript', level: 'Advanced', category: 'Frontend' },\r\n  { id: 4, name: 'Docker', value: 'docker', level: 'Intermediate', category: 'DevOps' },\r\n  { id: 5, name: 'Figma', value: 'figma', level: 'Beginner', category: 'Design' },\r\n  { id: 6, name: 'Python', value: 'python', level: 'Expert', category: 'Backend' },\r\n  { id: 7, name: 'React Native', value: 'react-native', level: 'Intermediate', category: 'Mobile' },\r\n  { id: 8, name: 'AWS', value: 'aws', level: 'Advanced', category: 'DevOps' },\r\n  { id: 9, name: 'GraphQL', value: 'graphql', level: 'Intermediate', category: 'Backend' },\r\n  { id: 10, name: 'Tailwind CSS', value: 'tailwind', level: 'Expert', category: 'Frontend' },\r\n];\r\n\r\n\r\n\r\n// Icon for the close button on tags (lucide-react style)\r\nconst XIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-3 w-3\">\r\n        <path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/>\r\n    </svg>\r\n);\r\n\r\n// Icon for the checkmark on selected items (lucide-react style)\r\nconst CheckIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\">\r\n        <path d=\"M20 6 9 17l-5-5\"/>\r\n    </svg>\r\n);\r\n\r\n// Star icon for skill level\r\nconst StarIcon = ({ filled }: { filled: boolean }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill={filled ? \"currentColor\" : \"none\"} stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-3 w-3\">\r\n        <polygon points=\"12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26\"/>\r\n    </svg>\r\n);\r\n\r\n// Function to get level color\r\nconst getLevelColor = (level: string) => {\r\n    switch (level) {\r\n        case 'Beginner': return 'text-green-600 dark:text-green-400';\r\n        case 'Intermediate': return 'text-yellow-600 dark:text-yellow-400';\r\n        case 'Advanced': return 'text-orange-600 dark:text-orange-400';\r\n        case 'Expert': return 'text-red-600 dark:text-red-400';\r\n        default: return 'text-slate-600 dark:text-slate-400';\r\n    }\r\n};\r\n\r\n// Function to get level stars\r\nconst getLevelStars = (level: string) => {\r\n    const levels = { 'Beginner': 1, 'Intermediate': 2, 'Advanced': 3, 'Expert': 4 };\r\n    return levels[level as keyof typeof levels] || 1;\r\n};\r\n\r\n/**\r\n * A skills-based multi-select component with skill levels and categories.\r\n */\r\nconst SkillMultiSelect: React.FC = () => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [selectedSkills, setSelectedSkills] = useState<Skill[]>([ALL_SKILLS[0], ALL_SKILLS[2]]);\r\n    const [searchTerm, setSearchTerm] = useState<string>('');\r\n    const [highlightedIndex, setHighlightedIndex] = useState<number>(0);\r\n\r\n    const wrapperRef = useRef<HTMLDivElement>(null);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {\r\n                setIsOpen(false);\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    const filteredSkills = ALL_SKILLS.filter(skill =>\r\n        !selectedSkills.some(selected => selected.id === skill.id) &&\r\n        skill.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    const toggleSkill = (skill: Skill) => {\r\n        setSelectedSkills(prev =>\r\n            prev.some(s => s.id === skill.id)\r\n                ? prev.filter(s => s.id !== skill.id)\r\n                : [...prev, skill]\r\n        );\r\n        setSearchTerm('');\r\n        inputRef.current?.focus();\r\n    };\r\n\r\n    const removeSkill = (skill: Skill) => {\r\n        setSelectedSkills(selectedSkills.filter(s => s.id !== skill.id));\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Backspace' && searchTerm === '' && selectedSkills.length > 0) {\r\n            removeSkill(selectedSkills[selectedSkills.length - 1]);\r\n        }\r\n\r\n        if (!isOpen) {\r\n            if (e.key === 'ArrowDown' || e.key === 'Enter') {\r\n                setIsOpen(true);\r\n                setHighlightedIndex(0);\r\n            }\r\n            return;\r\n        }\r\n\r\n        switch (e.key) {\r\n            case 'ArrowDown':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev + 1) % filteredSkills.length);\r\n                break;\r\n            case 'ArrowUp':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev - 1 + filteredSkills.length) % filteredSkills.length);\r\n                break;\r\n            case 'Enter':\r\n                e.preventDefault();\r\n                if (filteredSkills[highlightedIndex]) {\r\n                    toggleSkill(filteredSkills[highlightedIndex]);\r\n                }\r\n                break;\r\n            case 'Escape':\r\n                setIsOpen(false);\r\n                break;\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            setHighlightedIndex(0);\r\n        }\r\n    }, [isOpen, searchTerm]);\r\n\r\n    return (\r\n        <div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\r\n            <div className=\"relative\">\r\n                <div\r\n                    className=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\r\n                    onClick={() => {\r\n                        setIsOpen(true);\r\n                        inputRef.current?.focus();\r\n                    }}\r\n                >\r\n                    {selectedSkills.map(skill => (\r\n                        <div key={skill.id} className=\"flex items-center gap-1.5 bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 font-medium px-2 py-1 rounded-md\">\r\n                            <div className=\"flex items-center gap-1\">\r\n                                <span>{skill.name}</span>\r\n                                <div className={`flex ${getLevelColor(skill.level)}`}>\r\n                                    {Array.from({ length: 4 }, (_, i) => (\r\n                                        <StarIcon key={i} filled={i < getLevelStars(skill.level)} />\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\r\n                                onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                    e.stopPropagation();\r\n                                    removeSkill(skill);\r\n                                }}\r\n                            >\r\n                                <XIcon />\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                    <input\r\n                        ref={inputRef}\r\n                        type=\"text\"\r\n                        value={searchTerm}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                        onFocus={() => setIsOpen(true)}\r\n                        onKeyDown={handleKeyDown}\r\n                        placeholder={selectedSkills.length === 0 ? \"Select skills...\" : \"\"}\r\n                        className=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\r\n                    />\r\n                </div>\r\n\r\n                {isOpen && (\r\n                    <div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\r\n                        <ul className=\"p-1\">\r\n                            {filteredSkills.length > 0 ? (\r\n                                filteredSkills.map((skill, index) => (\r\n                                    <li\r\n                                        key={skill.id}\r\n                                        className={`flex items-center justify-between p-2 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? 'bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100' : 'text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100'}`}\r\n                                        onClick={() => toggleSkill(skill)}\r\n                                        onMouseEnter={() => setHighlightedIndex(index)}\r\n                                    >\r\n                                        <div className=\"flex flex-col gap-1\">\r\n                                            <div className=\"flex items-center gap-2\">\r\n                                                <span className=\"font-medium\">{skill.name}</span>\r\n                                                <span className=\"text-xs px-2 py-0.5 bg-slate-200 dark:bg-slate-700 rounded-full\">\r\n                                                    {skill.category}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div className={`flex items-center gap-1 ${getLevelColor(skill.level)}`}>\r\n                                                {Array.from({ length: 4 }, (_, i) => (\r\n                                                    <StarIcon key={i} filled={i < getLevelStars(skill.level)} />\r\n                                                ))}\r\n                                                <span className=\"text-xs ml-1\">{skill.level}</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        {selectedSkills.some(s => s.id === skill.id) && (\r\n                                            <CheckIcon />\r\n                                        )}\r\n                                    </li>\r\n                                ))\r\n                            ) : (\r\n                                <li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">No skills found.</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Main App component to render the SkillMultiSelect\r\nexport default function SkillMultiSelectPage() {\r\n  return (\r\n    <div className=\"p-4 font-sans\">\r\n        <style>{`\r\n            @keyframes popover-in {\r\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\r\n                to { opacity: 1; transform: scale(1) translateY(0); }\r\n            }\r\n            .animate-popover-in {\r\n                transform-origin: top;\r\n                animation: popover-in 0.1s ease-out forwards;\r\n            }\r\n        `}</style>\r\n        <div className=\"w-full max-w-md\">\r\n            <h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">Skills Multi-Select</h1>\r\n            <p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">Select your skills with proficiency levels.</p>\r\n            <SkillMultiSelect />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "multiselector4.tsx",
      "content": "'use client'\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n// Type definition for category objects\r\ninterface Category {\r\n  id: number;\r\n  name: string;\r\n  value: string;\r\n  icon: string;\r\n  description: string;\r\n  count: number;\r\n}\r\n\r\n// A list of all available categories for the multi-select component.\r\nconst ALL_CATEGORIES: Category[] = [\r\n  { id: 1, name: 'Technology', value: 'technology', icon: '💻', description: 'Tech-related content', count: 245 },\r\n  { id: 2, name: 'Design', value: 'design', icon: '🎨', description: 'UI/UX and visual design', count: 189 },\r\n  { id: 3, name: 'Business', value: 'business', icon: '💼', description: 'Business and entrepreneurship', count: 156 },\r\n  { id: 4, name: 'Marketing', value: 'marketing', icon: '📈', description: 'Marketing and growth', count: 134 },\r\n  { id: 5, name: 'Education', value: 'education', icon: '📚', description: 'Learning and tutorials', count: 298 },\r\n  { id: 6, name: 'Health', value: 'health', icon: '🏥', description: 'Health and wellness', count: 87 },\r\n  { id: 7, name: 'Travel', value: 'travel', icon: '✈️', description: 'Travel and adventure', count: 76 },\r\n  { id: 8, name: 'Food', value: 'food', icon: '🍕', description: 'Recipes and cooking', count: 123 },\r\n  { id: 9, name: 'Sports', value: 'sports', icon: '⚽', description: 'Sports and fitness', count: 98 },\r\n  { id: 10, name: 'Entertainment', value: 'entertainment', icon: '🎬', description: 'Movies, music, and fun', count: 167 },\r\n];\r\n\r\n\r\n\r\n// Icon for the close button on tags (lucide-react style)\r\nconst XIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-3 w-3\">\r\n        <path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/>\r\n    </svg>\r\n);\r\n\r\n// Icon for the checkmark on selected items (lucide-react style)\r\nconst CheckIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\">\r\n        <path d=\"M20 6 9 17l-5-5\"/>\r\n    </svg>\r\n);\r\n\r\n// Hash icon for categories\r\nconst HashIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-3 w-3\">\r\n        <line x1=\"4\" x2=\"20\" y1=\"9\" y2=\"9\"/>\r\n        <line x1=\"4\" x2=\"20\" y1=\"15\" y2=\"15\"/>\r\n        <line x1=\"10\" x2=\"8\" y1=\"3\" y2=\"21\"/>\r\n        <line x1=\"16\" x2=\"14\" y1=\"3\" y2=\"21\"/>\r\n    </svg>\r\n);\r\n\r\n/**\r\n * A category-based multi-select component with icons, descriptions, and counts.\r\n */\r\nconst CategoryMultiSelect: React.FC = () => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [selectedCategories, setSelectedCategories] = useState<Category[]>([ALL_CATEGORIES[0], ALL_CATEGORIES[1]]);\r\n    const [searchTerm, setSearchTerm] = useState<string>('');\r\n    const [highlightedIndex, setHighlightedIndex] = useState<number>(0);\r\n\r\n    const wrapperRef = useRef<HTMLDivElement>(null);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {\r\n                setIsOpen(false);\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    const filteredCategories = ALL_CATEGORIES.filter(category =>\r\n        !selectedCategories.some(selected => selected.id === category.id) &&\r\n        category.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    const toggleCategory = (category: Category) => {\r\n        setSelectedCategories(prev =>\r\n            prev.some(c => c.id === category.id)\r\n                ? prev.filter(c => c.id !== category.id)\r\n                : [...prev, category]\r\n        );\r\n        setSearchTerm('');\r\n        inputRef.current?.focus();\r\n    };\r\n\r\n    const removeCategory = (category: Category) => {\r\n        setSelectedCategories(selectedCategories.filter(c => c.id !== category.id));\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Backspace' && searchTerm === '' && selectedCategories.length > 0) {\r\n            removeCategory(selectedCategories[selectedCategories.length - 1]);\r\n        }\r\n\r\n        if (!isOpen) {\r\n            if (e.key === 'ArrowDown' || e.key === 'Enter') {\r\n                setIsOpen(true);\r\n                setHighlightedIndex(0);\r\n            }\r\n            return;\r\n        }\r\n\r\n        switch (e.key) {\r\n            case 'ArrowDown':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev + 1) % filteredCategories.length);\r\n                break;\r\n            case 'ArrowUp':\r\n                e.preventDefault();\r\n                setHighlightedIndex(prev => (prev - 1 + filteredCategories.length) % filteredCategories.length);\r\n                break;\r\n            case 'Enter':\r\n                e.preventDefault();\r\n                if (filteredCategories[highlightedIndex]) {\r\n                    toggleCategory(filteredCategories[highlightedIndex]);\r\n                }\r\n                break;\r\n            case 'Escape':\r\n                setIsOpen(false);\r\n                break;\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            setHighlightedIndex(0);\r\n        }\r\n    }, [isOpen, searchTerm]);\r\n\r\n    return (\r\n        <div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\r\n            <div className=\"relative\">\r\n                <div\r\n                    className=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\r\n                    onClick={() => {\r\n                        setIsOpen(true);\r\n                        inputRef.current?.focus();\r\n                    }}\r\n                >\r\n                    {selectedCategories.map(category => (\r\n                        <div key={category.id} className=\"flex items-center gap-1.5 bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-800 dark:to-slate-700 text-slate-800 dark:text-slate-200 font-medium px-2 py-1 rounded-md border border-slate-200 dark:border-slate-600\">\r\n                            <span className=\"text-sm\">{category.icon}</span>\r\n                            <HashIcon />\r\n                            {category.name}\r\n                            <span className=\"text-xs bg-slate-300 dark:bg-slate-600 px-1.5 py-0.5 rounded-full\">\r\n                                {category.count}\r\n                            </span>\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\r\n                                onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                    e.stopPropagation();\r\n                                    removeCategory(category);\r\n                                }}\r\n                            >\r\n                                <XIcon />\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                    <input\r\n                        ref={inputRef}\r\n                        type=\"text\"\r\n                        value={searchTerm}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                        onFocus={() => setIsOpen(true)}\r\n                        onKeyDown={handleKeyDown}\r\n                        placeholder={selectedCategories.length === 0 ? \"Select categories...\" : \"\"}\r\n                        className=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\r\n                    />\r\n                </div>\r\n\r\n                {isOpen && (\r\n                    <div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\r\n                        <ul className=\"p-1\">\r\n                            {filteredCategories.length > 0 ? (\r\n                                filteredCategories.map((category, index) => (\r\n                                    <li\r\n                                        key={category.id}\r\n                                        className={`flex items-center justify-between p-3 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? 'bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100' : 'text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100'}`}\r\n                                        onClick={() => toggleCategory(category)}\r\n                                        onMouseEnter={() => setHighlightedIndex(index)}\r\n                                    >\r\n                                        <div className=\"flex items-center gap-3\">\r\n                                            <span className=\"text-lg\">{category.icon}</span>\r\n                                            <div className=\"flex flex-col\">\r\n                                                <div className=\"flex items-center gap-2\">\r\n                                                    <span className=\"font-medium\">{category.name}</span>\r\n                                                    <span className=\"text-xs bg-slate-200 dark:bg-slate-700 px-2 py-0.5 rounded-full\">\r\n                                                        {category.count}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <span className=\"text-xs text-slate-500 dark:text-slate-400\">\r\n                                                    {category.description}\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                        {selectedCategories.some(c => c.id === category.id) && (\r\n                                            <CheckIcon />\r\n                                        )}\r\n                                    </li>\r\n                                ))\r\n                            ) : (\r\n                                <li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">No categories found.</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Main App component to render the CategoryMultiSelect\r\nexport default function CategoryMultiSelectPage() {\r\n  return (\r\n    <div className=\"p-4 font-sans\">\r\n        <style>{`\r\n            @keyframes popover-in {\r\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\r\n                to { opacity: 1; transform: scale(1) translateY(0); }\r\n            }\r\n            .animate-popover-in {\r\n                transform-origin: top;\r\n                animation: popover-in 0.1s ease-out forwards;\r\n            }\r\n        `}</style>\r\n        <div className=\"w-full max-w-md\">\r\n            <h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">Category Multi-Select</h1>\r\n            <p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">Select content categories with counts and descriptions.</p>\r\n            <CategoryMultiSelect />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}