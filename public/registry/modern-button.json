{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modern-button",
  "title": "Modern Button",
  "description": "A minimalistic modern button component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "modern-button.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n// Utility function to merge Tailwind CSS classes conditionally.\r\n// This is a simplified version of the 'clsx' or 'tailwind-merge' library.\r\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\r\n  return classes.filter(Boolean).join(\" \");\r\n};\r\n\r\n// --- Icon Components (replaces lucide-react) ---\r\n\r\n// Check icon component using inline SVG\r\nconst Check = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M20 6 9 17l-5-5\" />\r\n  </svg>\r\n);\r\n\r\n// Copy icon component using inline SVG\r\nconst Copy = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\" />\r\n    <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\r\n  </svg>\r\n);\r\n\r\n// --- UI Components (replaces custom component library) ---\r\n\r\n// A simple, reusable Button component.\r\nconst Button = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\r\n    className?: string;\r\n  }\r\n>(({ className, children, ...props }, ref) => {\r\n  return (\r\n    <button\r\n      className={cn(\r\n        \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n        \"h-10 px-4 py-2\", // Default size\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n});\r\nButton.displayName = \"Button\";\r\n\r\n// --- The Main Button Component from your request ---\r\n\r\ninterface CopyButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  className?: string;\r\n  textToCopy?: string;\r\n  successDuration?: number;\r\n}\r\n\r\nfunction CopyButton({\r\n  className,\r\n  textToCopy = \"https://gemini.google.com/\",\r\n  successDuration = 2000,\r\n  ...props\r\n}: CopyButtonProps) {\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  async function handleCopy() {\r\n    try {\r\n      // Use modern Clipboard API if available\r\n      if (navigator.clipboard && window.isSecureContext) {\r\n        await navigator.clipboard.writeText(textToCopy);\r\n        setIsCopied(true);\r\n        setTimeout(() => setIsCopied(false), successDuration);\r\n      } else {\r\n        // Fallback for older browsers\r\n        const textArea = document.createElement(\"textarea\");\r\n        textArea.value = textToCopy;\r\n        textArea.style.position = \"fixed\";\r\n        textArea.style.top = \"-9999px\";\r\n        textArea.style.left = \"-9999px\";\r\n        document.body.appendChild(textArea);\r\n        textArea.focus();\r\n        textArea.select();\r\n        const successful = document.execCommand(\"copy\");\r\n        if (successful) {\r\n          setIsCopied(true);\r\n          setTimeout(() => setIsCopied(false), successDuration);\r\n        }\r\n        document.body.removeChild(textArea);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to copy text:\", err);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      className={cn(\r\n        \"min-w-40 relative group transition-all duration-300 ease-in-out\",\r\n        \"bg-emerald-50 dark:bg-emerald-950\",\r\n        \"hover:bg-emerald-100 dark:hover:bg-emerald-900\",\r\n        \"text-emerald-600 dark:text-emerald-300\",\r\n        \"border border-emerald-200 dark:border-emerald-800\",\r\n        // When isCopied is true, apply the animation class\r\n        isCopied && \"bg-emerald-100 dark:bg-emerald-900 animate-jiggle\",\r\n        className\r\n      )}\r\n      onClick={handleCopy}\r\n      {...props}\r\n    >\r\n      <div\r\n        className={cn(\r\n          \"w-full flex items-center justify-center gap-2\",\r\n          \"transition-transform duration-300\",\r\n          isCopied && \"scale-105\"\r\n        )}\r\n      >\r\n        {isCopied ? (\r\n          <>\r\n            <Check className=\"w-4 h-4 text-emerald-500 transition-all duration-300\" />\r\n            <span className=\"font-semibold\">Copied!</span>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Copy\r\n              className={cn(\r\n                \"w-4 h-4 transition-transform duration-200\",\r\n                \"group-hover:scale-110 group-hover:rotate-6\"\r\n              )}\r\n            />\r\n            <span>Copy code</span>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Button>\r\n  );\r\n}\r\n\r\n// --- Main App Component to display the button ---\r\n\r\nexport default function CopyButtonView() {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center p-4 font-sans\">\r\n      {/* Injecting keyframe animation directly with a style tag */}\r\n      <style>\r\n        {`\r\n          @keyframes jiggle {\r\n            0%, 100% { transform: translateX(0); }\r\n            25% { transform: translateX(-2px) rotate(-1deg); }\r\n            75% { transform: translateX(2px) rotate(1deg); }\r\n          }\r\n          .animate-jiggle {\r\n            animation: jiggle 0.4s ease-in-out;\r\n          }\r\n        `}\r\n      </style>\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-white mb-2\">\r\n           Copy Button\r\n        </h1>\r\n        <p className=\"text-gray-400\">\r\n          Click the button below to copy the text to your clipboard.\r\n        </p>\r\n      </div>\r\n      <CopyButton />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "button.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n// Utility function to merge Tailwind CSS classes conditionally.\r\n// This is a simplified version of the 'clsx' or 'tailwind-merge' library.\r\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\r\n  return classes.filter(Boolean).join(\" \");\r\n};\r\n\r\n// --- Icon Components (replaces lucide-react) ---\r\n\r\n// Check icon component using inline SVG\r\nconst Check = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M20 6 9 17l-5-5\" />\r\n  </svg>\r\n);\r\n\r\n// Copy icon component using inline SVG\r\nconst Copy = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\" />\r\n    <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\r\n  </svg>\r\n);\r\n\r\n// --- UI Components (replaces custom component library) ---\r\n\r\n// A simple, reusable Button component.\r\nconst Button = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\r\n    className?: string;\r\n  }\r\n>(({ className, children, ...props }, ref) => {\r\n  return (\r\n    <button\r\n      className={cn(\r\n        \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n        \"h-10 px-4 py-2\", // Default size\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n});\r\nButton.displayName = \"Button\";\r\n\r\n// --- The Main Button Component from your request ---\r\n\r\ninterface CopyButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  className?: string;\r\n  textToCopy?: string;\r\n  successDuration?: number;\r\n}\r\n\r\nfunction CopyButton({\r\n  className,\r\n  textToCopy = \"https://gemini.google.com/\",\r\n  successDuration = 2000,\r\n  ...props\r\n}: CopyButtonProps) {\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  async function handleCopy() {\r\n    try {\r\n      // Use modern Clipboard API if available\r\n      if (navigator.clipboard && window.isSecureContext) {\r\n        await navigator.clipboard.writeText(textToCopy);\r\n        setIsCopied(true);\r\n        setTimeout(() => setIsCopied(false), successDuration);\r\n      } else {\r\n        // Fallback for older browsers\r\n        const textArea = document.createElement(\"textarea\");\r\n        textArea.value = textToCopy;\r\n        textArea.style.position = \"fixed\";\r\n        textArea.style.top = \"-9999px\";\r\n        textArea.style.left = \"-9999px\";\r\n        document.body.appendChild(textArea);\r\n        textArea.focus();\r\n        textArea.select();\r\n        const successful = document.execCommand(\"copy\");\r\n        if (successful) {\r\n          setIsCopied(true);\r\n          setTimeout(() => setIsCopied(false), successDuration);\r\n        }\r\n        document.body.removeChild(textArea);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to copy text:\", err);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      className={cn(\r\n        \"min-w-40 relative group transition-all duration-300 ease-in-out\",\r\n        \"bg-emerald-50 dark:bg-emerald-950\",\r\n        \"hover:bg-emerald-100 dark:hover:bg-emerald-900\",\r\n        \"text-emerald-600 dark:text-emerald-300\",\r\n        \"border border-emerald-200 dark:border-emerald-800\",\r\n        // When isCopied is true, apply the animation class\r\n        isCopied && \"bg-emerald-100 dark:bg-emerald-900 animate-jiggle\",\r\n        className\r\n      )}\r\n      onClick={handleCopy}\r\n      {...props}\r\n    >\r\n      <div\r\n        className={cn(\r\n          \"w-full flex items-center justify-center gap-2\",\r\n          \"transition-transform duration-300\",\r\n          isCopied && \"scale-105\"\r\n        )}\r\n      >\r\n        {isCopied ? (\r\n          <>\r\n            <Check className=\"w-4 h-4 text-emerald-500 transition-all duration-300\" />\r\n            <span className=\"font-semibold\">Copied!</span>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Copy\r\n              className={cn(\r\n                \"w-4 h-4 transition-transform duration-200\",\r\n                \"group-hover:scale-110 group-hover:rotate-6\"\r\n              )}\r\n            />\r\n            <span>Copy code</span>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Button>\r\n  );\r\n}\r\n\r\n// --- Main App Component to display the button ---\r\n\r\nexport default function CopyButtonView() {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center p-4 font-sans\">\r\n      {/* Injecting keyframe animation directly with a style tag */}\r\n      <style>\r\n        {`\r\n          @keyframes jiggle {\r\n            0%, 100% { transform: translateX(0); }\r\n            25% { transform: translateX(-2px) rotate(-1deg); }\r\n            75% { transform: translateX(2px) rotate(1deg); }\r\n          }\r\n          .animate-jiggle {\r\n            animation: jiggle 0.4s ease-in-out;\r\n          }\r\n        `}\r\n      </style>\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-white mb-2\">\r\n           Copy Button\r\n        </h1>\r\n        <p className=\"text-gray-400\">\r\n          Click the button below to copy the text to your clipboard.\r\n        </p>\r\n      </div>\r\n      <CopyButton />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "button2.tsx",
      "content": "\"use client\";\r\n\r\nimport React, {\r\n  useState,\r\n  forwardRef,\r\n  ButtonHTMLAttributes,\r\n  ReactNode,\r\n} from \"react\";\r\n\r\n// Utility function to merge Tailwind CSS classes conditionally.\r\nconst cn = (\r\n  ...classes: (string | boolean | undefined | null | Record<string, boolean>)[]\r\n): string => {\r\n  return classes\r\n    .map((cls) => {\r\n      if (typeof cls === \"string\") return cls;\r\n      if (typeof cls === \"object\" && cls !== null) {\r\n        return Object.entries(cls)\r\n          .filter(([, condition]) => condition)\r\n          .map(([className]) => className)\r\n          .join(\" \");\r\n      }\r\n      return \"\";\r\n    })\r\n    .filter(Boolean)\r\n    .join(\" \");\r\n};\r\n\r\n// --- Icon Components (replaces lucide-react) ---\r\n\r\n// Correctly define the type for IconProps\r\ntype IconProps = {\r\n  className?: string;\r\n};\r\n\r\nconst Check = ({ className }: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M20 6 9 17l-5-5\" />\r\n  </svg>\r\n);\r\n\r\nconst X = ({ className }: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M18 6 6 18\" />\r\n    <path d=\"m6 6 12 12\" />\r\n  </svg>\r\n);\r\n\r\nconst Download = ({ className }: IconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\r\n    <polyline points=\"7 10 12 15 17 10\" />\r\n    <line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\" />\r\n  </svg>\r\n);\r\n\r\n// --- UI Components ---\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n  children: ReactNode;\r\n}\r\n\r\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, children, ...props }, ref) => {\r\n    return (\r\n      <button\r\n        className={cn(\r\n          \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border\",\r\n          \"h-10 px-4 py-2\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </button>\r\n    );\r\n  }\r\n);\r\nButton.displayName = \"Button\";\r\n\r\n// --- The Main Reusable Processing Button Component ---\r\n\r\ntype State = \"idle\" | \"processing\" | \"success\" | \"error\";\r\n\r\ninterface ProcessingButtonProps\r\n  extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n  onProcess: () => Promise<boolean>;\r\n  children: ReactNode;\r\n}\r\n\r\nconst ProcessingButton: React.FC<ProcessingButtonProps> = ({\r\n  className,\r\n  onProcess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState<State>(\"idle\");\r\n  const [isScaling, setIsScaling] = useState(false);\r\n\r\n  async function handleClick() {\r\n    if (state !== \"idle\") return;\r\n\r\n    setState(\"processing\");\r\n\r\n    try {\r\n      const success = await onProcess();\r\n      setState(success ? \"success\" : \"error\");\r\n    } catch (error) {\r\n      console.error(\"An error occurred during the process:\", error);\r\n      setState(\"error\");\r\n    }\r\n\r\n    setIsScaling(true);\r\n\r\n    // Reset the button to its idle state after a delay\r\n    setTimeout(() => {\r\n      setState(\"idle\");\r\n      setIsScaling(false);\r\n    }, 2000);\r\n  }\r\n\r\n  const isProcessing = state === \"processing\";\r\n\r\n  return (\r\n    <Button\r\n      className={cn(\r\n        \"min-w-40 relative group overflow-hidden\",\r\n        \"transition-all duration-300\",\r\n        {\r\n          \"bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-800/30 text-blue-700 dark:text-blue-200 border-blue-200 dark:border-blue-700\":\r\n            state === \"idle\" || state === \"processing\",\r\n          \"bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-200 border-green-200 dark:border-green-700\":\r\n            state === \"success\",\r\n          \"bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-200 border-red-200 dark:border-red-700\":\r\n            state === \"error\",\r\n        },\r\n        isProcessing && \"cursor-wait\",\r\n        className\r\n      )}\r\n      onClick={handleClick}\r\n      disabled={isProcessing}\r\n      {...props}\r\n    >\r\n      <div\r\n        className={cn(\r\n          \"relative w-full flex items-center justify-center gap-2\",\r\n          isScaling && \"animate-scale-in-out\"\r\n        )}\r\n      >\r\n        {state === \"idle\" && (\r\n          <>\r\n            <Download className=\"w-4 h-4 transition-transform duration-200 group-hover:scale-110\" />\r\n            <span>{children}</span>\r\n          </>\r\n        )}\r\n        {state === \"processing\" && (\r\n          <>\r\n            <Download className=\"w-4 h-4 animate-bounce\" />\r\n            <span>Processing...</span>\r\n          </>\r\n        )}\r\n        {state === \"success\" && (\r\n          <>\r\n            <Check className=\"w-4 h-4\" />\r\n            <span className=\"font-semibold\">Complete!</span>\r\n          </>\r\n        )}\r\n        {state === \"error\" && (\r\n          <>\r\n            <X className=\"w-4 h-4\" />\r\n            <span className=\"font-semibold\">Failed</span>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Button>\r\n  );\r\n};\r\n\r\n// --- Main App Component to display the button ---\r\n\r\nexport default function CopyButtonView2() {\r\n  // EXAMPLE: Define the asynchronous task you want the button to perform.\r\n  const handleDownload = async (): Promise<boolean> => {\r\n    console.log(\"Starting download process...\");\r\n    await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n    const isSuccess = Math.random() > 0.5;\r\n    if (isSuccess) {\r\n      console.log(\"Download successful!\");\r\n      return true;\r\n    } else {\r\n      console.log(\"Download failed.\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center p-4 font-sans\">\r\n      <style>\r\n        {`\r\n          @keyframes scale-in-out {\r\n            0% { transform: scale(1); }\r\n            50% { transform: scale(1.1); }\r\n            100% { transform: scale(1); }\r\n          }\r\n          .animate-scale-in-out {\r\n            animation: scale-in-out 300ms ease-in-out;\r\n          }\r\n        `}\r\n      </style>\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n          Professional Processing Button\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          This button is now reusable, type-safe, and ready for any project.\r\n        </p>\r\n      </div>\r\n\r\n      <ProcessingButton onProcess={handleDownload}>\r\n        Download File\r\n      </ProcessingButton>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}