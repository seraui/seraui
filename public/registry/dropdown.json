{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown",
  "title": "Dropdown",
  "description": "A minimalistic dropdown component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "dropdown.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useEffect, useRef, ReactNode } from \"react\";\r\n\r\nconst User = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\r\n    <circle cx=\"12\" cy=\"7\" r=\"4\" />\r\n  </svg>\r\n);\r\n\r\nconst Community = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\" />\r\n  </svg>\r\n);\r\n\r\nconst Subscription = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\r\n    <line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\r\n  </svg>\r\n);\r\n\r\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\r\n    <path d=\"M4 6h8\" />\r\n    <path d=\"M16 6h4\" />\r\n    <path d=\"M10 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\r\n    <path d=\"M4 18h4\" />\r\n    <path d=\"M12 18h8\" />\r\n    <path d=\"M10 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\r\n    <path d=\"M4 12h4\" />\r\n    <path d=\"M12 12h8\" />\r\n  </svg>\r\n);\r\n\r\nconst HelpCenter = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n    <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\r\n    <line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\" />\r\n  </svg>\r\n);\r\n\r\nconst SignOut = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\r\n    <polyline points=\"16 17 21 12 16 7\" />\r\n    <line x1=\"21\" x2=\"9\" y1=\"12\" y2=\"12\" />\r\n  </svg>\r\n);\r\n\r\ninterface DropdownMenuProps {\r\n  children: ReactNode;\r\n  trigger: ReactNode;\r\n}\r\n\r\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        dropdownRef.current &&\r\n        !dropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleTriggerClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\r\n      <div onClick={handleTriggerClick} className=\"cursor-pointer\">\r\n        {trigger}\r\n      </div>\r\n      {isOpen && (\r\n        <div\r\n          className=\"origin-top-right absolute right-0 mt-2 w-64 rounded-2xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-2\"\r\n          role=\"menu\"\r\n          aria-orientation=\"vertical\"\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface DropdownMenuItemProps {\r\n  children: ReactNode;\r\n  onClick?: () => void;\r\n  active?: boolean;\r\n}\r\n\r\nconst DropdownMenuItem = ({\r\n  children,\r\n  onClick,\r\n  active = false,\r\n}: DropdownMenuItemProps) => (\r\n  <a\r\n    href=\"#\"\r\n    onClick={(e: React.MouseEvent) => {\r\n      e.preventDefault();\r\n      if (onClick) onClick();\r\n    }}\r\n    className={`\r\n      text-zinc-800 dark:text-zinc-200 font-medium group flex items-center \r\n      px-3 py-2.5 text-sm rounded-lg transition-colors duration-150\r\n      ${\r\n        active\r\n          ? \"bg-zinc-100 dark:bg-zinc-800\"\r\n          : \"hover:bg-zinc-100 dark:hover:bg-zinc-800\"\r\n      }\r\n    `}\r\n    role=\"menuitem\"\r\n  >\r\n    {children}\r\n  </a>\r\n);\r\n\r\nconst DropdownMenuSeparator = () => (\r\n  <div className=\"my-2 h-px bg-zinc-200 dark:bg-zinc-700\" />\r\n);\r\n\r\nexport default function Dropdown() {\r\n  return (\r\n    <div className=\" flex items-center justify-center font-sans p-8\">\r\n      <DropdownMenu\r\n        trigger={\r\n          <button className=\"px-5 py-2 text-sm font-semibold text-zinc-800 dark:text-zinc-100 bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-lg shadow-sm hover:bg-zinc-100 dark:hover:bg-zinc-700 transition-colors\">\r\n            Open Menu\r\n          </button>\r\n        }\r\n      >\r\n        <div className=\"flex flex-col space-y-1\">\r\n          <DropdownMenuItem\r\n            onClick={() => console.log(\"Profile clicked\")}\r\n            active={true}\r\n          >\r\n            <User className=\"mr-3 h-5 w-5 text-zinc-500\" />\r\n            <span>Profile</span>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => console.log(\"Community clicked\")}>\r\n            <Community className=\"mr-3 h-5 w-5 text-zinc-500\" />\r\n            <span>Community</span>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => console.log(\"Subscription clicked\")}>\r\n            <Subscription className=\"mr-3 h-5 w-5 text-zinc-500\" />\r\n            <span>Subscription</span>\r\n            <span className=\"ml-auto text-xs font-bold text-white bg-gradient-to-r from-pink-500 to-purple-500 rounded-full px-2 py-0.5\">\r\n              PRO\r\n            </span>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => console.log(\"Settings clicked\")}>\r\n            <Settings className=\"mr-3 h-5 w-5 text-zinc-500\" />\r\n            <span>Settings</span>\r\n          </DropdownMenuItem>\r\n        </div>\r\n        <DropdownMenuSeparator />\r\n        <div className=\"flex flex-col space-y-1\">\r\n          <DropdownMenuItem onClick={() => console.log(\"Help Center clicked\")}>\r\n            <HelpCenter className=\"mr-3 h-5 w-5 text-zinc-500\" />\r\n            <span>Help center</span>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => console.log(\"Sign Out clicked\")}>\r\n            <SignOut className=\"mr-3 h-5 w-5 text-zinc-500\" />\r\n            <span>Sign out</span>\r\n          </DropdownMenuItem>\r\n        </div>\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "notification-dropdown.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useEffect, useRef, ReactNode } from \"react\";\r\n\r\nconst Bell = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"20\"\r\n    height=\"20\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9\" />\r\n    <path d=\"M13.73 21a2 2 0 0 1-3.46 0\" />\r\n  </svg>\r\n);\r\n\r\nconst Check = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <polyline points=\"20 6 9 17 4 12\" />\r\n  </svg>\r\n);\r\n\r\nconst X = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n  </svg>\r\n);\r\n\r\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n    <path d=\"M12 1v6m0 6v6\" />\r\n    <path d=\"M1 12h6m6 0h6\" />\r\n  </svg>\r\n);\r\n\r\ninterface DropdownMenuProps {\r\n  children: ReactNode;\r\n  trigger: ReactNode;\r\n}\r\n\r\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        dropdownRef.current &&\r\n        !dropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleTriggerClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\r\n      <div onClick={handleTriggerClick} className=\"cursor-pointer\">\r\n        {trigger}\r\n      </div>\r\n      {isOpen && (\r\n        <div\r\n          className=\"origin-top-right absolute right-0 mt-2 w-80 rounded-xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95\"\r\n          role=\"menu\"\r\n          aria-orientation=\"vertical\"\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface NotificationItemProps {\r\n  title: string;\r\n  message: string;\r\n  time: string;\r\n  unread?: boolean;\r\n  onMarkRead?: () => void;\r\n  onDismiss?: () => void;\r\n}\r\n\r\nconst NotificationItem = ({\r\n  title,\r\n  message,\r\n  time,\r\n  unread = false,\r\n  onMarkRead,\r\n  onDismiss,\r\n}: NotificationItemProps) => (\r\n  <div\r\n    className={`p-4 border-b border-zinc-200 dark:border-zinc-700 last:border-b-0 ${unread ? \"bg-blue-50 dark:bg-blue-950/20\" : \"\"}`}\r\n  >\r\n    <div className=\"flex items-start justify-between\">\r\n      <div className=\"flex-1 min-w-0\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <h4 className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\r\n            {title}\r\n          </h4>\r\n          {unread && <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>}\r\n        </div>\r\n        <p className=\"text-sm text-zinc-600 dark:text-zinc-400 mt-1\">\r\n          {message}\r\n        </p>\r\n        <p className=\"text-xs text-zinc-500 dark:text-zinc-500 mt-2\">{time}</p>\r\n      </div>\r\n      <div className=\"flex items-center space-x-1 ml-2\">\r\n        {unread && onMarkRead && (\r\n          <button\r\n            onClick={onMarkRead}\r\n            className=\"p-1 text-zinc-400 hover:text-green-600 transition-colors\"\r\n            title=\"Mark as read\"\r\n          >\r\n            <Check className=\"w-4 h-4\" />\r\n          </button>\r\n        )}\r\n        {onDismiss && (\r\n          <button\r\n            onClick={onDismiss}\r\n            className=\"p-1 text-zinc-400 hover:text-red-600 transition-colors\"\r\n            title=\"Dismiss\"\r\n          >\r\n            <X className=\"w-4 h-4\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default function NotificationDropdown() {\r\n  const [notifications, setNotifications] = useState([\r\n    {\r\n      id: 1,\r\n      title: \"New message\",\r\n      message: \"You have a new message from Sarah\",\r\n      time: \"2 min ago\",\r\n      unread: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"System update\",\r\n      message: \"Your system has been updated successfully\",\r\n      time: \"1 hour ago\",\r\n      unread: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Payment received\",\r\n      message: \"Payment of $99.00 has been processed\",\r\n      time: \"3 hours ago\",\r\n      unread: false,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Welcome!\",\r\n      message: \"Welcome to our platform. Get started with your first project.\",\r\n      time: \"1 day ago\",\r\n      unread: false,\r\n    },\r\n  ]);\r\n\r\n  const unreadCount = notifications.filter((n) => n.unread).length;\r\n\r\n  const markAsRead = (id: number) => {\r\n    setNotifications((prev) =>\r\n      prev.map((n) => (n.id === id ? { ...n, unread: false } : n))\r\n    );\r\n  };\r\n\r\n  const dismissNotification = (id: number) => {\r\n    setNotifications((prev) => prev.filter((n) => n.id !== id));\r\n  };\r\n\r\n  const markAllAsRead = () => {\r\n    setNotifications((prev) => prev.map((n) => ({ ...n, unread: false })));\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center font-sans p-8\">\r\n      <DropdownMenu\r\n        trigger={\r\n          <button className=\"relative p-2 text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-lg transition-colors\">\r\n            <Bell className=\"w-6 h-6\" />\r\n            {unreadCount > 0 && (\r\n              <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center\">\r\n                {unreadCount > 9 ? \"9+\" : unreadCount}\r\n              </span>\r\n            )}\r\n          </button>\r\n        }\r\n      >\r\n        <div className=\"px-4 py-3 border-b border-zinc-200 dark:border-zinc-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h3 className=\"text-lg font-semibold text-zinc-900 dark:text-zinc-100\">\r\n              Notifications\r\n            </h3>\r\n            {unreadCount > 0 && (\r\n              <button\r\n                onClick={markAllAsRead}\r\n                className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium\"\r\n              >\r\n                Mark all read\r\n              </button>\r\n            )}\r\n          </div>\r\n          {unreadCount > 0 && (\r\n            <p className=\"text-sm text-zinc-500 dark:text-zinc-400 mt-1\">\r\n              You have {unreadCount} unread notification\r\n              {unreadCount !== 1 ? \"s\" : \"\"}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"max-h-96 overflow-y-auto\">\r\n          {notifications.length > 0 ? (\r\n            notifications.map((notification) => (\r\n              <NotificationItem\r\n                key={notification.id}\r\n                title={notification.title}\r\n                message={notification.message}\r\n                time={notification.time}\r\n                unread={notification.unread}\r\n                onMarkRead={() => markAsRead(notification.id)}\r\n                onDismiss={() => dismissNotification(notification.id)}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className=\"p-8 text-center\">\r\n              <Bell className=\"w-12 h-12 text-zinc-300 dark:text-zinc-600 mx-auto mb-3\" />\r\n              <p className=\"text-zinc-500 dark:text-zinc-400\">\r\n                No notifications\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {notifications.length > 0 && (\r\n          <div className=\"px-4 py-3 border-t border-zinc-200 dark:border-zinc-700\">\r\n            <button className=\"w-full flex items-center justify-center space-x-2 text-sm text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors\">\r\n              <Settings className=\"w-4 h-4\" />\r\n              <span>Notification Settings</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "simple-dropdown.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useEffect, useRef, ReactNode } from \"react\";\r\n\r\nconst ChevronDown = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <polyline points=\"6 9 12 15 18 9\" />\r\n  </svg>\r\n);\r\n\r\nconst File = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\r\n    <polyline points=\"14 2 14 8 20 8\" />\r\n  </svg>\r\n);\r\n\r\nconst Edit = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\r\n    <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\r\n  </svg>\r\n);\r\n\r\nconst Trash = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <polyline points=\"3 6 5 6 21 6\" />\r\n    <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\r\n  </svg>\r\n);\r\n\r\ninterface DropdownMenuProps {\r\n  children: ReactNode;\r\n  trigger: ReactNode;\r\n}\r\n\r\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        dropdownRef.current &&\r\n        !dropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleTriggerClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\r\n      <div onClick={handleTriggerClick} className=\"cursor-pointer\">\r\n        {trigger}\r\n      </div>\r\n      {isOpen && (\r\n        <div\r\n          className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-lg shadow-lg bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-1\"\r\n          role=\"menu\"\r\n          aria-orientation=\"vertical\"\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface DropdownMenuItemProps {\r\n  children: ReactNode;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst DropdownMenuItem = ({ children, onClick }: DropdownMenuItemProps) => (\r\n  <a\r\n    href=\"#\"\r\n    onClick={(e: React.MouseEvent) => {\r\n      e.preventDefault();\r\n      if (onClick) onClick();\r\n    }}\r\n    className=\"text-zinc-700 dark:text-zinc-300 group flex items-center px-3 py-2 text-sm rounded-md hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors duration-150\"\r\n    role=\"menuitem\"\r\n  >\r\n    {children}\r\n  </a>\r\n);\r\n\r\nconst DropdownMenuSeparator = () => (\r\n  <div className=\"my-1 h-px bg-zinc-200 dark:bg-zinc-700\" />\r\n);\r\n\r\nexport default function SimpleDropdown() {\r\n  return (\r\n    <div className=\"flex items-center justify-center font-sans p-8\">\r\n      <DropdownMenu\r\n        trigger={\r\n          <button className=\"inline-flex items-center px-4 py-2 text-sm font-medium text-zinc-700 dark:text-zinc-300 bg-white dark:bg-zinc-800 border border-zinc-300 dark:border-zinc-600 rounded-md shadow-sm hover:bg-zinc-50 dark:hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\">\r\n            Actions\r\n            <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n          </button>\r\n        }\r\n      >\r\n        <DropdownMenuItem onClick={() => console.log(\"New file\")}>\r\n          <File className=\"mr-3 h-4 w-4 text-zinc-500\" />\r\n          New File\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem onClick={() => console.log(\"Edit\")}>\r\n          <Edit className=\"mr-3 h-4 w-4 text-zinc-500\" />\r\n          Edit\r\n        </DropdownMenuItem>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem onClick={() => console.log(\"Delete\")}>\r\n          <Trash className=\"mr-3 h-4 w-4 text-red-500\" />\r\n          <span className=\"text-red-600 dark:text-red-400\">Delete</span>\r\n        </DropdownMenuItem>\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "user-profile-dropdown.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useEffect, useRef, ReactNode } from \"react\";\r\n\r\nconst User = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\r\n    <circle cx=\"12\" cy=\"7\" r=\"4\" />\r\n  </svg>\r\n);\r\n\r\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n    <path d=\"M12 1v6m0 6v6\" />\r\n    <path d=\"M1 12h6m6 0h6\" />\r\n  </svg>\r\n);\r\n\r\nconst CreditCard = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\r\n    <line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\r\n  </svg>\r\n);\r\n\r\nconst HelpCircle = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n    <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\r\n    <line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\" />\r\n  </svg>\r\n);\r\n\r\nconst LogOut = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\r\n    <polyline points=\"16 17 21 12 16 7\" />\r\n    <line x1=\"21\" x2=\"9\" y1=\"12\" y2=\"12\" />\r\n  </svg>\r\n);\r\n\r\ninterface DropdownMenuProps {\r\n  children: ReactNode;\r\n  trigger: ReactNode;\r\n}\r\n\r\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        dropdownRef.current &&\r\n        !dropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleTriggerClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\r\n      <div onClick={handleTriggerClick} className=\"cursor-pointer\">\r\n        {trigger}\r\n      </div>\r\n      {isOpen && (\r\n        <div\r\n          className=\"origin-top-right absolute right-0 mt-2 w-72 rounded-xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-2\"\r\n          role=\"menu\"\r\n          aria-orientation=\"vertical\"\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface DropdownMenuItemProps {\r\n  children: ReactNode;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst DropdownMenuItem = ({ children, onClick }: DropdownMenuItemProps) => (\r\n  <a\r\n    href=\"#\"\r\n    onClick={(e: React.MouseEvent) => {\r\n      e.preventDefault();\r\n      if (onClick) onClick();\r\n    }}\r\n    className=\"text-zinc-700 dark:text-zinc-300 group flex items-center px-3 py-2.5 text-sm rounded-lg hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors duration-150\"\r\n    role=\"menuitem\"\r\n  >\r\n    {children}\r\n  </a>\r\n);\r\n\r\nconst DropdownMenuSeparator = () => (\r\n  <div className=\"my-2 h-px bg-zinc-200 dark:bg-zinc-700\" />\r\n);\r\n\r\nexport default function UserProfileDropdown() {\r\n  return (\r\n    <div className=\"flex items-center justify-center font-sans p-8\">\r\n      <DropdownMenu\r\n        trigger={\r\n          <button className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors\">\r\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-sm\">\r\n              JD\r\n            </div>\r\n            <div className=\"text-left\">\r\n              <div className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\r\n                John Doe\r\n              </div>\r\n              <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\r\n                john@example.com\r\n              </div>\r\n            </div>\r\n          </button>\r\n        }\r\n      >\r\n        <div className=\"px-3 py-3 border-b border-zinc-200 dark:border-zinc-700\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\r\n              JD\r\n            </div>\r\n            <div>\r\n              <div className=\"text-sm font-semibold text-zinc-900 dark:text-zinc-100\">\r\n                John Doe\r\n              </div>\r\n              <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\r\n                john@example.com\r\n              </div>\r\n              <div className=\"text-xs text-blue-600 dark:text-blue-400 font-medium\">\r\n                Pro Plan\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"py-1\">\r\n          <DropdownMenuItem onClick={() => console.log(\"Profile\")}>\r\n            <User className=\"mr-3 h-4 w-4 text-zinc-500\" />\r\n            Your Profile\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => console.log(\"Settings\")}>\r\n            <Settings className=\"mr-3 h-4 w-4 text-zinc-500\" />\r\n            Settings\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => console.log(\"Billing\")}>\r\n            <CreditCard className=\"mr-3 h-4 w-4 text-zinc-500\" />\r\n            Billing & Plans\r\n          </DropdownMenuItem>\r\n        </div>\r\n\r\n        <DropdownMenuSeparator />\r\n\r\n        <div className=\"py-1\">\r\n          <DropdownMenuItem onClick={() => console.log(\"Help\")}>\r\n            <HelpCircle className=\"mr-3 h-4 w-4 text-zinc-500\" />\r\n            Help & Support\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => console.log(\"Sign out\")}>\r\n            <LogOut className=\"mr-3 h-4 w-4 text-zinc-500\" />\r\n            Sign Out\r\n          </DropdownMenuItem>\r\n        </div>\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}