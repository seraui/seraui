{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "fuzzy",
  "title": "Fuzzy",
  "description": "A minimalistic fuzzy search component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "fuzzy.tsx",
      "content": "\"use client\";\r\nimport React, { useRef, useEffect, useMemo } from \"react\";\r\n\r\ninterface HoverGlitchProps {\r\n  text: string;\r\n  fontFamily?: string;\r\n  fontSize?: string;\r\n  fontWeight?: number;\r\n  color?: string;\r\n  baseIntensity?: number;\r\n  hoverIntensity?: number;\r\n  letterSpacing?: string;\r\n  wordSpacing?: string;\r\n}\r\n\r\nconst HoverGlitch: React.FC<HoverGlitchProps> = ({\r\n  text,\r\n  fontFamily = \"'Major Mono Display', monospace\",\r\n  fontSize = \"10rem\",\r\n  fontWeight = 400,\r\n  color = \"#33ffcc\",\r\n  baseIntensity = 1,\r\n  hoverIntensity = 15,\r\n  letterSpacing = \"0px\",\r\n  wordSpacing = \"0px\",\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const animationFrameId = useRef<number | null>(null);\r\n  const currentIntensity = useRef(baseIntensity);\r\n\r\n  const font = useMemo(\r\n    () => `${fontWeight} ${fontSize} ${fontFamily}`,\r\n    [fontWeight, fontSize, fontFamily]\r\n  );\r\n\r\n  useEffect(() => {\r\n    currentIntensity.current = baseIntensity;\r\n\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n    if (!ctx) return;\r\n\r\n    let isCancelled = false;\r\n\r\n    const offscreenCanvas = document.createElement(\"canvas\");\r\n    const offscreenCtx = offscreenCanvas.getContext(\"2d\", {\r\n      willReadFrequently: true,\r\n    });\r\n    if (!offscreenCtx) return;\r\n\r\n    const setupAndAnimate = async () => {\r\n      await document.fonts.ready;\r\n      if (isCancelled) return;\r\n\r\n      offscreenCtx.font = font;\r\n      const metrics = offscreenCtx.measureText(text);\r\n      const textWidth = Math.ceil(metrics.width);\r\n      const textHeight = Math.ceil(\r\n        metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\r\n      );\r\n\r\n      const horizontalPadding = hoverIntensity * 2;\r\n      const verticalPadding = 20;\r\n      const canvasWidth = textWidth + horizontalPadding;\r\n      const canvasHeight = textHeight + verticalPadding;\r\n\r\n      canvas.width = offscreenCanvas.width = canvasWidth;\r\n      canvas.height = offscreenCanvas.height = canvasHeight;\r\n\r\n      offscreenCtx.font = font;\r\n      offscreenCtx.fillStyle = color;\r\n      offscreenCtx.textBaseline = \"top\";\r\n      offscreenCtx.fillText(text, horizontalPadding / 2, verticalPadding / 2);\r\n\r\n      const sourceImageData = offscreenCtx.getImageData(\r\n        0,\r\n        0,\r\n        canvasWidth,\r\n        canvasHeight\r\n      );\r\n      const sourcePixels = sourceImageData.data;\r\n\r\n      const renderLoop = () => {\r\n        if (isCancelled || !ctx) return;\r\n\r\n        const destinationImageData = ctx.createImageData(\r\n          canvasWidth,\r\n          canvasHeight\r\n        );\r\n        const destinationPixels = destinationImageData.data;\r\n\r\n        for (let y = 0; y < canvasHeight; y++) {\r\n          const rowOffset = (Math.random() - 0.5) * currentIntensity.current;\r\n          for (let x = 0; x < canvasWidth; x++) {\r\n            const sourceX = Math.round(x + rowOffset);\r\n            if (sourceX >= 0 && sourceX < canvasWidth) {\r\n              const destIndex = (y * canvasWidth + x) * 4;\r\n              const sourceIndex = (y * canvasWidth + sourceX) * 4;\r\n\r\n              destinationPixels[destIndex] = sourcePixels[sourceIndex];\r\n              destinationPixels[destIndex + 1] = sourcePixels[sourceIndex + 1];\r\n              destinationPixels[destIndex + 2] = sourcePixels[sourceIndex + 2];\r\n              destinationPixels[destIndex + 3] = sourcePixels[sourceIndex + 3];\r\n            }\r\n          }\r\n        }\r\n\r\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n        ctx.putImageData(destinationImageData, 0, 0);\r\n        animationFrameId.current = requestAnimationFrame(renderLoop);\r\n      };\r\n\r\n      renderLoop();\r\n    };\r\n\r\n    const handleMouseEnter = () => {\r\n      currentIntensity.current = hoverIntensity;\r\n    };\r\n    const handleMouseLeave = () => {\r\n      currentIntensity.current = baseIntensity;\r\n    };\r\n\r\n    const handleTouchStart = () => {\r\n      currentIntensity.current = hoverIntensity;\r\n    };\r\n    const handleTouchEnd = () => {\r\n      currentIntensity.current = baseIntensity;\r\n    };\r\n\r\n    canvas.addEventListener(\"mouseenter\", handleMouseEnter);\r\n    canvas.addEventListener(\"mouseleave\", handleMouseLeave);\r\n    canvas.addEventListener(\"touchstart\", handleTouchStart, { passive: true });\r\n    canvas.addEventListener(\"touchend\", handleTouchEnd, { passive: true });\r\n\r\n    setupAndAnimate();\r\n\r\n    return () => {\r\n      isCancelled = true;\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n      canvas.removeEventListener(\"mouseenter\", handleMouseEnter);\r\n      canvas.removeEventListener(\"mouseleave\", handleMouseLeave);\r\n      canvas.removeEventListener(\"touchstart\", handleTouchStart);\r\n      canvas.removeEventListener(\"touchend\", handleTouchEnd);\r\n    };\r\n  }, [\r\n    text,\r\n    font,\r\n    color,\r\n    baseIntensity,\r\n    hoverIntensity,\r\n    letterSpacing,\r\n    wordSpacing,\r\n  ]);\r\n\r\n  return <canvas ref={canvasRef} style={{ maxWidth: \"100%\" }} />;\r\n};\r\n\r\nexport default function FuzzyText() {\r\n  return (\r\n    <div className=\"w-full flex flex-col items-center justify-center p-4 text-center font-mono select-none\">\r\n      <HoverGlitch\r\n        text=\"HOVER\"\r\n        fontFamily=\"'Major Mono Display', monospace\"\r\n        fontSize=\"clamp(5rem, 20vw, 17rem)\"\r\n        fontWeight={700}\r\n        color=\"#D7D00F\"\r\n        baseIntensity={6}\r\n        hoverIntensity={20}\r\n        letterSpacing=\"-0.05em\"\r\n        wordSpacing=\"-0.1em\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}