{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "announcement",
  "title": "Announcement",
  "description": "A minimalistic announcement component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "announcement.tsx",
      "content": "\"use client\";\r\nimport React, { useCallback } from \"react\";\r\nimport Announcement from \"./announcement\";\r\n\r\nfunction AnnouncementView() {\r\n  const handleAnnouncementClick = useCallback((variant: string) => {\r\n    console.log(`${variant} announcement clicked!`);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"w-full flex flex-col items-center justify-center font-sans space-y-6 p-4\">\r\n  \r\n      <div className=\"flex flex-wrap gap-4 justify-center\">\r\n        <Announcement\r\n          variant=\"default\"\r\n          onClick={() => handleAnnouncementClick(\"Default\")}\r\n        >\r\n          New feature added\r\n        </Announcement>\r\n\r\n        <Announcement\r\n          variant=\"success\"\r\n          onClick={() => handleAnnouncementClick(\"Success\")}\r\n        >\r\n          Update successful\r\n        </Announcement>\r\n\r\n        <Announcement\r\n          variant=\"error\"\r\n          onClick={() => handleAnnouncementClick(\"Error\")}\r\n        >\r\n          Action failed\r\n        </Announcement>\r\n\r\n        <Announcement\r\n          variant=\"warning\"\r\n          onClick={() => handleAnnouncementClick(\"Warning\")}\r\n        >\r\n          Please check input\r\n        </Announcement>\r\n\r\n        <Announcement\r\n          variant=\"info\"\r\n          onClick={() => handleAnnouncementClick(\"Info\")}\r\n        >\r\n          For your information\r\n        </Announcement>\r\n\r\n        <Announcement\r\n          variant=\"gradient\"\r\n          onClick={() => handleAnnouncementClick(\"Gradient\")}\r\n        >\r\n          Announcing Gradients!\r\n        </Announcement>\r\n\r\n        <Announcement variant=\"default\" disabled>\r\n          Disabled state\r\n        </Announcement>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnnouncementView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "announcement.tsx",
      "content": "'use client';\r\nimport React, { useCallback } from 'react';\r\n\r\ninterface ArrowUpRightIconProps {\r\n  className?: string;\r\n}\r\n\r\nconst ArrowUpRightIcon = React.memo(({ className }: ArrowUpRightIconProps) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className={`h-3.5 w-3.5 ${className}`}\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth={2.5}\r\n    aria-hidden=\"true\"\r\n    focusable=\"false\"\r\n  >\r\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4.5 19.5l15-15m0 0H8.25m11.25 0v11.25\" />\r\n  </svg>\r\n));\r\n\r\nArrowUpRightIcon.displayName = 'ArrowUpRightIcon';\r\n\r\ntype AnnouncementVariant = 'default' | 'success' | 'error' | 'warning' | 'info' | 'gradient';\r\n\r\ninterface AnnouncementProps {\r\n  variant?: AnnouncementVariant;\r\n  children: React.ReactNode;\r\n  onClick?: (e: React.MouseEvent<HTMLDivElement> | React.KeyboardEvent<HTMLDivElement>) => void;\r\n  className?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst Announcement = React.memo(\r\n  ({\r\n    variant = 'default',\r\n    children,\r\n    onClick,\r\n    className = '',\r\n    disabled = false,\r\n  }: AnnouncementProps) => {\r\n    const baseClasses = `\r\n    inline-flex \r\n    items-center \r\n    justify-center \r\n    space-x-2 \r\n    font-medium \r\n    text-sm\r\n    py-1.5 \r\n    px-3.5 \r\n    rounded-full \r\n    shadow-sm \r\n    hover:shadow-md \r\n    active:scale-[0.98]\r\n    transition-all \r\n    duration-200 \r\n    ease-in-out \r\n    border\r\n    focus:outline-none\r\n    focus:ring-2\r\n    focus:ring-offset-2\r\n    cursor-pointer\r\n    ${disabled ? 'opacity-60 cursor-not-allowed' : ''}\r\n  `;\r\n\r\n    // Combined variant classes for both light and dark modes\r\n    const variantClasses = {\r\n      default:\r\n        'bg-white text-gray-800 border-gray-200 hover:bg-gray-50 focus:ring-blue-500 dark:bg-gray-800 dark:text-gray-200 dark:border-gray-700 dark:hover:bg-gray-700 dark:focus:ring-blue-400 dark:focus:ring-offset-gray-900',\r\n      success:\r\n        'bg-green-50 text-green-800 border-green-200 hover:bg-green-100 focus:ring-green-500 dark:bg-green-900/30 dark:text-green-200 dark:border-green-800/50 dark:hover:bg-green-900/50 dark:focus:ring-green-400 dark:focus:ring-offset-gray-900',\r\n      error:\r\n        'bg-red-50 text-red-800 border-red-200 hover:bg-red-100 focus:ring-red-500 dark:bg-red-900/30 dark:text-red-200 dark:border-red-800/50 dark:hover:bg-red-900/50 dark:focus:ring-red-400 dark:focus:ring-offset-gray-900',\r\n      warning:\r\n        'bg-yellow-50 text-yellow-800 border-yellow-200 hover:bg-yellow-100 focus:ring-yellow-500 dark:bg-yellow-900/30 dark:text-yellow-200 dark:border-yellow-800/50 dark:hover:bg-yellow-900/50 dark:focus:ring-yellow-400 dark:focus:ring-offset-gray-900',\r\n      info: 'bg-blue-50 text-blue-800 border-blue-200 hover:bg-blue-100 focus:ring-blue-500 dark:bg-blue-900/30 dark:text-blue-200 dark:border-blue-800/50 dark:hover:bg-blue-900/50 dark:focus:ring-blue-400 dark:focus:ring-offset-gray-900',\r\n      gradient:\r\n        'bg-gradient-to-r from-cyan-400 to-blue-500 text-white border-0 hover:shadow-lg focus:ring-cyan-300 focus:ring-offset-gray-100 dark:from-cyan-600 dark:to-blue-700 dark:focus:ring-cyan-400 dark:focus:ring-offset-gray-900 dark:hover:shadow-blue-700/50',\r\n    };\r\n\r\n    // Icon color classes specific to each variant\r\n    const iconVariantClasses = {\r\n      default: 'text-gray-600 dark:text-gray-400',\r\n      success: 'text-green-600 dark:text-green-400',\r\n      error: 'text-red-600 dark:text-red-400',\r\n      warning: 'text-yellow-600 dark:text-yellow-400',\r\n      info: 'text-blue-600 dark:text-blue-400',\r\n      gradient: 'text-white',\r\n    };\r\n\r\n    // Handle keyboard interactions\r\n    const handleKeyDown = useCallback(\r\n      (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (disabled) return;\r\n\r\n        if (e.key === 'Enter' || e.key === ' ') {\r\n          e.preventDefault();\r\n          onClick?.(e);\r\n        }\r\n      },\r\n      [onClick, disabled]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        onClick={disabled ? undefined : onClick}\r\n        onKeyDown={handleKeyDown}\r\n        className={`${baseClasses} ${variantClasses[variant]} ${className}`}\r\n        role={disabled ? 'alert' : 'button'}\r\n        tabIndex={disabled ? -1 : 0}\r\n        aria-disabled={disabled}\r\n      >\r\n        <span>{children}</span>\r\n        <ArrowUpRightIcon className={iconVariantClasses[variant]} />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nAnnouncement.displayName = 'Announcement';\r\nexport default Announcement;\r\n",
      "type": "registry:ui"
    }
  ]
}