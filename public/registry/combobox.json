{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox",
  "title": "Combobox",
  "description": "A minimalistic combobox component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "combobox.tsx",
      "content": "\"use client\";\r\nimport Combobox from \"./combobox\";\r\n\r\nexport default function ComboboxView() {\r\n  const frameworks = [\r\n    \"React\",\r\n    \"Vue.js\",\r\n    \"Angular\",\r\n    \"Svelte\",\r\n    \"Next.js\",\r\n    \"Nuxt.js\",\r\n    \"SvelteKit\",\r\n    \"Remix\",\r\n    \"Gatsby\",\r\n    \"Astro\",\r\n    \"Solid.js\",\r\n    \"Preact\",\r\n    \"Alpine.js\",\r\n    \"Lit\",\r\n  ];\r\n\r\n  const handleSelect = (value: string) => {\r\n    console.log(\"Selected framework:\", value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full flex items-center justify-center p-8\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n          Choose your favorite framework\r\n        </label>\r\n        <Combobox\r\n          placeholder=\"Search frameworks...\"\r\n          options={frameworks}\r\n          onSelect={handleSelect}\r\n        />\r\n        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n          Type to filter or use arrow keys to navigate\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "combobox.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport { ChevronDown } from \"lucide-react\";\r\n\r\ninterface ComboboxProps {\r\n  options: string[];\r\n  placeholder?: string;\r\n  onSelect?: (value: string) => void;\r\n  className?: string;\r\n}\r\n\r\nconst Combobox: React.FC<ComboboxProps> = ({\r\n  options,\r\n  placeholder = \"Select an option...\",\r\n  onSelect,\r\n  className = \"\",\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [highlightedIndex, setHighlightedIndex] = useState(-1);\r\n  const [isMouseInDropdown, setIsMouseInDropdown] = useState(false);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const listRef = useRef<HTMLUListElement>(null);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  const filteredOptions = options.filter((option) =>\r\n    option.toLowerCase().includes(inputValue.toLowerCase())\r\n  );\r\n\r\n  const handleSelect = (option: string) => {\r\n    setInputValue(option);\r\n    setIsOpen(false);\r\n    setHighlightedIndex(-1);\r\n    onSelect?.(option);\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setInputValue(value);\r\n    setIsOpen(true);\r\n    setHighlightedIndex(-1);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (!isOpen) {\r\n      if (e.key === \"ArrowDown\" || e.key === \"Enter\") {\r\n        setIsOpen(true);\r\n        return;\r\n      }\r\n    }\r\n\r\n    switch (e.key) {\r\n      case \"ArrowDown\":\r\n        e.preventDefault();\r\n        setHighlightedIndex((prev) =>\r\n          prev < filteredOptions.length - 1 ? prev + 1 : 0\r\n        );\r\n        break;\r\n      case \"ArrowUp\":\r\n        e.preventDefault();\r\n        setHighlightedIndex((prev) =>\r\n          prev > 0 ? prev - 1 : filteredOptions.length - 1\r\n        );\r\n        break;\r\n      case \"Enter\":\r\n        e.preventDefault();\r\n        if (highlightedIndex >= 0 && filteredOptions[highlightedIndex]) {\r\n          handleSelect(filteredOptions[highlightedIndex]);\r\n        }\r\n        break;\r\n      case \"Escape\":\r\n        setIsOpen(false);\r\n        setHighlightedIndex(-1);\r\n        inputRef.current?.blur();\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n    // Check if the blur is happening because user clicked on dropdown\r\n    const relatedTarget = e.relatedTarget as HTMLElement;\r\n    const dropdown = dropdownRef.current;\r\n\r\n    if (\r\n      dropdown &&\r\n      (dropdown.contains(relatedTarget) || dropdown === relatedTarget)\r\n    ) {\r\n      // Don't close if focus moved to dropdown\r\n      return;\r\n    }\r\n\r\n    // Close after a small delay to allow for scrollbar interaction\r\n    setTimeout(() => {\r\n      if (!isMouseInDropdown && inputRef.current && !inputRef.current.matches(':focus')) {\r\n        setIsOpen(false);\r\n        setHighlightedIndex(-1);\r\n        setIsMouseInDropdown(false);\r\n      }\r\n    }, 150);\r\n  };\r\n\r\n  const handleDropdownMouseEnter = () => {\r\n    setIsMouseInDropdown(true);\r\n  };\r\n\r\n  const handleDropdownMouseLeave = () => {\r\n    setIsMouseInDropdown(false);\r\n  };\r\n\r\n  const handleOptionMouseDown = (e: React.MouseEvent) => {\r\n    // Prevent blur when clicking on option\r\n    e.preventDefault();\r\n  };\r\n\r\n  // Handle clicks outside the combobox\r\n  useEffect(() => {\r\n    const handleDocumentClick = (event: MouseEvent) => {\r\n      const comboboxContainer = inputRef.current?.parentElement?.parentElement;\r\n      const target = event.target as HTMLElement;\r\n      \r\n      // Don't close if clicking within the entire combobox container (input + dropdown)\r\n      if (comboboxContainer && comboboxContainer.contains(target)) {\r\n        return;\r\n      }\r\n      \r\n      setIsOpen(false);\r\n      setHighlightedIndex(-1);\r\n      setIsMouseInDropdown(false);\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('click', handleDocumentClick);\r\n      return () => {\r\n        document.removeEventListener('click', handleDocumentClick);\r\n      };\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Scroll highlighted item into view\r\n  useEffect(() => {\r\n    if (highlightedIndex >= 0 && listRef.current) {\r\n      const highlightedElement = listRef.current.children[\r\n        highlightedIndex\r\n      ] as HTMLElement;\r\n      if (highlightedElement) {\r\n        highlightedElement.scrollIntoView({\r\n          block: \"nearest\",\r\n        });\r\n      }\r\n    }\r\n  }, [highlightedIndex]);\r\n\r\n  return (\r\n    <div className={`relative w-full max-w-sm ${className}`}>\r\n      <div className=\"relative\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={inputValue}\r\n          placeholder={placeholder}\r\n          onChange={handleInputChange}\r\n          onKeyDown={handleKeyDown}\r\n          onFocus={handleInputFocus}\r\n          onBlur={handleInputBlur}\r\n          className=\"w-full px-3 py-2 pr-10 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:border-gray-600 dark:bg-gray-800 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400\"\r\n          autoComplete=\"off\"\r\n        />\r\n        <ChevronDown\r\n          className={`absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400 transition-transform duration-200 ${\r\n            isOpen ? \"rotate-180\" : \"\"\r\n          }`}\r\n        />\r\n      </div>\r\n\r\n      {isOpen && (\r\n        <div\r\n          ref={dropdownRef}\r\n          onMouseEnter={handleDropdownMouseEnter}\r\n          onMouseLeave={handleDropdownMouseLeave}\r\n          className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-auto dark:bg-gray-800 dark:border-gray-600\"\r\n        >\r\n          {filteredOptions.length > 0 ? (\r\n            <ul ref={listRef} className=\"py-1\">\r\n              {filteredOptions.map((option, index) => (\r\n                <li\r\n                  key={option}\r\n                  onMouseDown={handleOptionMouseDown}\r\n                  onClick={() => handleSelect(option)}\r\n                  className={`px-3 py-2 text-sm cursor-pointer transition-colors ${\r\n                    index === highlightedIndex\r\n                      ? \"bg-blue-100 text-blue-900 dark:bg-blue-900 dark:text-blue-100\"\r\n                      : \"text-gray-900 hover:bg-gray-100 dark:text-gray-100 dark:hover:bg-gray-700\"\r\n                  }`}\r\n                >\r\n                  {option}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <div className=\"px-3 py-2 text-sm text-gray-500 dark:text-gray-400\">\r\n              No options found\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Combobox;\r\n",
      "type": "registry:ui"
    }
  ]
}