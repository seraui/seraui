{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "falling-glitch",
  "title": "Falling Glitch",
  "description": "A minimalistic falling glitch component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "falling-glitch.tsx",
      "content": "\"use client\";\r\nimport React, { useRef, useEffect, useCallback, useMemo } from \"react\";\r\n\r\nconst FallingGlitch = ({\r\n  glitchColors = [\"#ff7cce\", \"#7cf0ff\", \"#fcf07c\", \"#8E44AD\", \"#3498DB\"],\r\n  fontSize = 14,\r\n  backgroundColor = \"#080A12\",\r\n  glitchSpeed = 50,\r\n  glitchIntensity = 0.05,\r\n  fallSpeed = 0.75,\r\n  outerVignette = true,\r\n  children,\r\n}: {\r\n  glitchColors?: string[];\r\n  fontSize?: number;\r\n  backgroundColor?: string;\r\n  glitchSpeed?: number;\r\n  glitchIntensity?: number;\r\n  fallSpeed?: number;\r\n  outerVignette?: boolean;\r\n  children?: React.ReactNode;\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const animationFrameId = useRef<number | null>(null);\r\n\r\n  const grid = useRef({ columns: 0, rows: 0, charWidth: 0, charHeight: 0 });\r\n  const letters = useRef<\r\n    Array<{\r\n      char: string;\r\n      x: number;\r\n      y: number;\r\n      color: string;\r\n    }>\r\n  >([]);\r\n  const lastGlitchTime = useRef(0);\r\n\r\n  const characterSet = useMemo(() => '.:*+=#%@\",', []);\r\n  const getRandomChar = useCallback(\r\n    () => characterSet[Math.floor(Math.random() * characterSet.length)],\r\n    [characterSet]\r\n  );\r\n  const getRandomColor = useCallback(\r\n    () => glitchColors[Math.floor(Math.random() * glitchColors.length)],\r\n    [glitchColors]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const container = containerRef.current;\r\n    if (!canvas || !container) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    let canvasWidth = 0;\r\n    let canvasHeight = 0;\r\n\r\n    const setup = () => {\r\n      if (animationFrameId.current)\r\n        cancelAnimationFrame(animationFrameId.current);\r\n\r\n      const dpr = window.devicePixelRatio || 1;\r\n      const rect = container.getBoundingClientRect();\r\n      canvasWidth = rect.width;\r\n      canvasHeight = rect.height;\r\n      canvas.width = canvasWidth * dpr;\r\n      canvas.height = canvasHeight * dpr;\r\n      canvas.style.width = `${canvasWidth}px`;\r\n      canvas.style.height = `${canvasHeight}px`;\r\n      ctx.scale(dpr, dpr);\r\n\r\n      ctx.font = `${fontSize}px monospace`;\r\n      const charMetrics = ctx.measureText(\"M\");\r\n      grid.current = {\r\n        columns: Math.floor(canvasWidth / charMetrics.width),\r\n        rows: Math.floor(canvasHeight / (fontSize * 1.2)),\r\n        charWidth: charMetrics.width,\r\n        charHeight: fontSize * 1.2,\r\n      };\r\n\r\n      const extendedRows = grid.current.rows * 2;\r\n      const totalLetters = grid.current.columns * extendedRows;\r\n      letters.current = Array.from({ length: totalLetters }, (_, i) => {\r\n        const col = i % grid.current.columns;\r\n        const row = Math.floor(i / grid.current.columns);\r\n        return {\r\n          char: getRandomChar(),\r\n          x: col * grid.current.charWidth,\r\n          y:\r\n            row * grid.current.charHeight -\r\n            grid.current.rows * grid.current.charHeight,\r\n          color: getRandomColor(),\r\n        };\r\n      });\r\n\r\n      animationFrameId.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    const animate = (timestamp: number) => {\r\n      animationFrameId.current = requestAnimationFrame(animate);\r\n\r\n      if (timestamp - lastGlitchTime.current > glitchSpeed) {\r\n        lastGlitchTime.current = timestamp;\r\n        const updateCount = Math.floor(\r\n          letters.current.length * glitchIntensity\r\n        );\r\n        for (let i = 0; i < updateCount; i++) {\r\n          const index = Math.floor(Math.random() * letters.current.length);\r\n          if (letters.current[index]) {\r\n            letters.current[index].char = getRandomChar();\r\n            letters.current[index].color = getRandomColor();\r\n          }\r\n        }\r\n      }\r\n\r\n      const totalFieldHeight = grid.current.rows * grid.current.charHeight * 2;\r\n      letters.current.forEach((letter) => {\r\n        letter.y += fallSpeed;\r\n        if (letter.y > canvasHeight) {\r\n          letter.y -= totalFieldHeight;\r\n        }\r\n      });\r\n\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n      ctx.font = `${fontSize}px monospace`;\r\n      ctx.textBaseline = \"top\";\r\n\r\n      letters.current.forEach((letter) => {\r\n        ctx.fillStyle = letter.color;\r\n        ctx.fillText(letter.char, letter.x, letter.y);\r\n      });\r\n    };\r\n\r\n    let resizeTimeout: NodeJS.Timeout;\r\n    const handleResize = () => {\r\n      clearTimeout(resizeTimeout);\r\n      resizeTimeout = setTimeout(setup, 150);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n    setup();\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n  }, [\r\n    glitchColors,\r\n    fontSize,\r\n    backgroundColor,\r\n    glitchSpeed,\r\n    glitchIntensity,\r\n    fallSpeed,\r\n    getRandomChar,\r\n    getRandomColor,\r\n  ]);\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"relative w-full h-full bg-black\">\r\n      <canvas ref={canvasRef} className=\"absolute inset-0 z-0\" />\r\n      {outerVignette && (\r\n        <div className=\"absolute inset-0 z-0 pointer-events-none bg-[radial-gradient(circle,_transparent_70%,_black_100%)]\"></div>\r\n      )}\r\n      <div className=\"relative z-10 flex items-center justify-center w-full h-full\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function FallingGlitchAn() {\r\n  return (\r\n    <div className=\"relative w-full h-screen overflow-hidden\">\r\n      <style>\r\n        {`\r\n         @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&display=swap');\r\n        `}\r\n      </style>\r\n      <FallingGlitch>\r\n        <div className=\"text-center\">\r\n          <h1\r\n            className=\"text-7xl md:text-9xl font-bold text-white\"\r\n            style={{ fontFamily: \"'Dancing Script', cursive\" }}\r\n          >\r\n            Sera UI\r\n          </h1>\r\n        </div>\r\n      </FallingGlitch>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}