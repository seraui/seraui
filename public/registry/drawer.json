{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "title": "Drawer",
  "description": "A minimalistic drawer component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "drawer.tsx",
      "content": "\"use client\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerDescription,\r\n  DrawerFooter,\r\n  Button,\r\n} from \"./drawer\";\r\n\r\ntype DrawerSide = \"top\" | \"bottom\" | \"left\" | \"right\";\r\n\r\nexport default function DrawerView() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [side, setSide] = useState<DrawerSide>(\"right\");\r\n\r\n  const handleOpen = (selectedSide: DrawerSide) => {\r\n    setSide(selectedSide);\r\n    setIsOpen(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex w-full flex-col items-center justify-center p-4 font-sans\">\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-4xl font-bold text-gray-900 dark:text-gray-50\">\r\n          Minimal Drawer\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-300 mt-2\">\r\n          A minimal, reusable drawer component.\r\n        </p>\r\n      </div>\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n        <Button onClick={() => handleOpen(\"top\")}>Top</Button>\r\n        <Button onClick={() => handleOpen(\"right\")}>Right</Button>\r\n        <Button onClick={() => handleOpen(\"bottom\")}>Bottom</Button>\r\n        <Button onClick={() => handleOpen(\"left\")}>Left</Button>\r\n      </div>\r\n\r\n      <Drawer open={isOpen} onOpenChange={setIsOpen} side={side}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader>\r\n            <DrawerTitle>Edit profile</DrawerTitle>\r\n            <DrawerDescription>\r\n              Make changes to your profile here. Click save when you&apos;re\r\n              done.\r\n            </DrawerDescription>\r\n          </DrawerHeader>\r\n          <div className=\"p-6\">\r\n            <form className=\"grid gap-4\">\r\n              <div className=\"grid gap-2\">\r\n                <label\r\n                  htmlFor=\"name\"\r\n                  className=\"text-sm font-medium text-gray-700 dark:text-gray-300\"\r\n                >\r\n                  Name\r\n                </label>\r\n                <input\r\n                  id=\"name\"\r\n                  defaultValue=\"John Doe\"\r\n                  className=\"flex h-10 w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm text-gray-900 dark:text-gray-100 placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:border-blue-500 dark:focus:border-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-400/20 transition-colors\"\r\n                />\r\n              </div>\r\n              <div className=\"grid gap-2\">\r\n                <label\r\n                  htmlFor=\"username\"\r\n                  className=\"text-sm font-medium text-gray-700 dark:text-gray-300\"\r\n                >\r\n                  Username\r\n                </label>\r\n                <input\r\n                  id=\"username\"\r\n                  defaultValue=\"@johndoe\"\r\n                  className=\"flex h-10 w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm text-gray-900 dark:text-gray-100 placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:border-blue-500 dark:focus:border-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-400/20 transition-colors\"\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => setIsOpen(false)}>Save changes</Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "drawer.tsx",
      "content": "\"use client\";\r\nimport React, {\r\n  useEffect,\r\n  createContext,\r\n  useContext,\r\n  HTMLAttributes,\r\n  ReactNode,\r\n} from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n\r\ntype DrawerSide = \"top\" | \"bottom\" | \"left\" | \"right\";\r\n\r\ninterface DrawerContextProps {\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  side: DrawerSide;\r\n}\r\n\r\ninterface DrawerProps {\r\n  children: ReactNode;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  side?: DrawerSide;\r\n}\r\n\r\nconst DrawerContext = createContext<DrawerContextProps | undefined>(undefined);\r\n\r\nconst useDrawerContext = () => {\r\n  const context = useContext(DrawerContext);\r\n  if (!context) {\r\n    throw new Error(\"useDrawerContext must be used within a DrawerProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst Drawer: React.FC<DrawerProps> = ({\r\n  children,\r\n  open,\r\n  onOpenChange,\r\n  side = \"right\",\r\n}) => {\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === \"Escape\") {\r\n        onOpenChange(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\r\n  }, [onOpenChange]);\r\n\r\n  return (\r\n    <DrawerContext.Provider value={{ open, onOpenChange, side }}>\r\n      <AnimatePresence>{open && <>{children}</>}</AnimatePresence>\r\n    </DrawerContext.Provider>\r\n  );\r\n};\r\n\r\nconst DrawerOverlay = React.forwardRef<\r\n  HTMLDivElement,\r\n  Omit<\r\n    HTMLAttributes<HTMLDivElement>,\r\n    | \"onDrag\"\r\n    | \"onDragStart\"\r\n    | \"onDragEnd\"\r\n    | \"onAnimationStart\"\r\n    | \"onAnimationEnd\"\r\n    | \"onAnimationIteration\"\r\n  >\r\n>(({ className, ...props }, ref) => {\r\n  const { onOpenChange } = useDrawerContext();\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n      className={`fixed inset-0 z-50 bg-black/50 dark:bg-black/70 ${className}`}\r\n      onClick={() => onOpenChange(false)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nDrawerOverlay.displayName = \"DrawerOverlay\";\r\n\r\nconst DrawerContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  Omit<\r\n    HTMLAttributes<HTMLDivElement>,\r\n    | \"onDrag\"\r\n    | \"onDragStart\"\r\n    | \"onDragEnd\"\r\n    | \"onAnimationStart\"\r\n    | \"onAnimationEnd\"\r\n    | \"onAnimationIteration\"\r\n  >\r\n>(({ className, children, ...props }, ref) => {\r\n  const { onOpenChange, side } = useDrawerContext();\r\n\r\n  const sideClasses: Record<DrawerSide, string> = {\r\n    top: \"inset-x-0 top-0 w-full h-auto max-h-[80vh] border-b border-gray-200 dark:border-gray-800 items-center\",\r\n    bottom:\r\n      \"inset-x-0 bottom-0 w-full h-auto max-h-[80vh] border-t border-gray-200 dark:border-gray-800 items-center\",\r\n    left: \"inset-y-0 left-0 h-full w-80 max-w-[90vw] border-r border-gray-200 dark:border-gray-800 justify-center\",\r\n    right:\r\n      \"inset-y-0 right-0 h-full w-80 max-w-[90vw] border-l border-gray-200 dark:border-gray-800 justify-center\",\r\n  };\r\n\r\n  const getMotionProps = () => {\r\n    switch (side) {\r\n      case \"top\":\r\n        return {\r\n          initial: { y: \"-100%\" },\r\n          animate: { y: 0 },\r\n          exit: { y: \"-100%\" },\r\n        };\r\n      case \"bottom\":\r\n        return {\r\n          initial: { y: \"100%\" },\r\n          animate: { y: 0 },\r\n          exit: { y: \"100%\" },\r\n        };\r\n      case \"left\":\r\n        return {\r\n          initial: { x: \"-100%\" },\r\n          animate: { x: 0 },\r\n          exit: { x: \"-100%\" },\r\n        };\r\n      case \"right\":\r\n        return {\r\n          initial: { x: \"100%\" },\r\n          animate: { x: 0 },\r\n          exit: { x: \"100%\" },\r\n        };\r\n      default:\r\n        return {\r\n          initial: { x: \"100%\" },\r\n          animate: { x: 0 },\r\n          exit: { x: \"100%\" },\r\n        };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      className={`fixed z-50 bg-white dark:bg-black text-gray-900 dark:text-gray-50 shadow-lg flex flex-col ${sideClasses[side]} ${className}`}\r\n      {...getMotionProps()}\r\n      transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <button\r\n        onClick={() => onOpenChange(false)}\r\n        className=\"absolute top-3 right-3 rounded-full p-1 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:focus:ring-gray-500\"\r\n        aria-label=\"Close\"\r\n      >\r\n        <svg\r\n          className=\"h-5 w-5\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            d=\"M6 18L18 6M6 6l12 12\"\r\n          />\r\n        </svg>\r\n      </button>\r\n    </motion.div>\r\n  );\r\n});\r\nDrawerContent.displayName = \"DrawerContent\";\r\n\r\nconst DrawerHeader = ({\r\n  className,\r\n  ...props\r\n}: HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={`grid gap-1.5 p-6 text-center sm:text-left ${className}`}\r\n    {...props}\r\n  />\r\n);\r\nDrawerHeader.displayName = \"DrawerHeader\";\r\n\r\nconst DrawerFooter = ({\r\n  className,\r\n  ...props\r\n}: HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={`mt-auto flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 p-6 ${className}`}\r\n    {...props}\r\n  />\r\n);\r\nDrawerFooter.displayName = \"DrawerFooter\";\r\n\r\nconst DrawerTitle = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h2\r\n    ref={ref}\r\n    className={`text-lg font-semibold leading-none tracking-tight ${className}`}\r\n    {...props}\r\n  />\r\n));\r\nDrawerTitle.displayName = \"DrawerTitle\";\r\n\r\nconst DrawerDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <p\r\n    ref={ref}\r\n    className={`text-sm text-gray-500 dark:text-gray-400 ${className}`}\r\n    {...props}\r\n  />\r\n));\r\nDrawerDescription.displayName = \"DrawerDescription\";\r\n\r\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: \"default\" | \"outline\";\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant = \"default\", ...props }, ref) => (\r\n    <button\r\n      ref={ref}\r\n      className={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2\r\n        ${\r\n          variant === \"outline\"\r\n            ? \"border border-gray-200 dark:border-gray-700 bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800\"\r\n            : \"bg-gray-900 text-gray-50 hover:bg-gray-900/90 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90\"\r\n        } \r\n        ${className}`}\r\n      {...props}\r\n    />\r\n  )\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport {\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerFooter,\r\n  DrawerTitle,\r\n  DrawerDescription,\r\n  Button,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}