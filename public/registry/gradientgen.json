{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "gradientgen",
  "title": "Gradientgen",
  "description": "A minimalistic gradientgen component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "gradientgen.tsx",
      "content": "'use client';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  Plus,\r\n  ArrowRightLeft,\r\n  Shuffle,\r\n  Download,\r\n  Upload,\r\n  Palette,\r\n  RotateCcw,\r\n  Play,\r\n  Pause,\r\n} from 'lucide-react';\r\nimport { useTheme } from 'next-themes';\r\nimport clsx from 'clsx';\r\n\r\n// Components\r\nimport { ColorSwatch } from './components/ColorSwatch';\r\nimport { GradientTypeTabs } from './components/GradientTypeTabs';\r\nimport { AngleKnob } from './components/AngleKnob';\r\nimport { RadialPositionControl } from './components/RadialPositionControl';\r\nimport { ConicAngleControl } from './components/ConicAngleControl';\r\nimport { CodeOutput } from './components/CodeOutput';\r\n\r\n// Constants and utilities\r\nimport { gradientPresets, defaultColors } from './constants/gradientPresets';\r\nimport { generateRandomColor, getSmoothedColors } from './utils/colorUtils';\r\nimport {\r\n  exportGradient,\r\n  exportAnimatedCSS,\r\n  exportAnimatedHTML,\r\n  importGradient,\r\n} from './utils/exportUtils';\r\n\r\nexport default function Gradientgen() {\r\n  /* ---------------- state --------------- */\r\n  const [colors, setColors] = useState(defaultColors);\r\n  const [smooth, setSmooth] = useState(true);\r\n  const [type, setType] = useState('linear'); // linear | radial | conic\r\n  const [angle, setAngle] = useState(45); // only for linear\r\n  const [history, setHistory] = useState<Array<{ colors: string[]; type: string; angle: number }>>(\r\n    []\r\n  );\r\n  const [showPresets, setShowPresets] = useState(false);\r\n  const [radialPosition, setRadialPosition] = useState({ x: 50, y: 50 }); // for radial gradients\r\n  const [conicAngle, setConicAngle] = useState(0); // for conic gradients\r\n  const [isAnimated, setIsAnimated] = useState(false);\r\n  const [animationSpeed, setAnimationSpeed] = useState(3); // seconds for full rotation\r\n  const [showExportMenu, setShowExportMenu] = useState(false);\r\n  const animationRef = useRef<number | undefined>(undefined);\r\n\r\n  // Use next-themes hook for proper theme detection\r\n  const { theme, resolvedTheme } = useTheme();\r\n  const isDark = theme === 'dark' || resolvedTheme === 'dark';\r\n\r\n  // Save to history when gradient changes\r\n  useEffect(() => {\r\n    const currentState = { colors, type, angle };\r\n    setHistory(prev => {\r\n      const newHistory = [currentState, ...prev.slice(0, 9)]; // Keep last 10\r\n      return newHistory;\r\n    });\r\n  }, [colors, type, angle]);\r\n\r\n  // Animation effect\r\n  useEffect(() => {\r\n    if (!isAnimated) {\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    const animate = () => {\r\n      const elapsed = Date.now() - startTime;\r\n      const progress = (elapsed / (animationSpeed * 1000)) % 1;\r\n\r\n      if (type === 'linear') {\r\n        setAngle(Math.round(progress * 360));\r\n      } else if (type === 'conic') {\r\n        setConicAngle(Math.round(progress * 360));\r\n      } else if (type === 'radial') {\r\n        // For radial, animate the position in a circular motion\r\n        const centerX = 50 + 30 * Math.cos(progress * 2 * Math.PI);\r\n        const centerY = 50 + 30 * Math.sin(progress * 2 * Math.PI);\r\n        setRadialPosition({\r\n          x: Math.round(Math.max(10, Math.min(90, centerX))),\r\n          y: Math.round(Math.max(10, Math.min(90, centerY))),\r\n        });\r\n      }\r\n\r\n      animationRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    animationRef.current = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n    };\r\n  }, [isAnimated, animationSpeed, type]);\r\n\r\n  // Cleanup animation on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  /* ------------ helpers ----------------- */\r\n  const displayColors = smooth ? getSmoothedColors(colors) : colors;\r\n  const colorStops = displayColors.join(',');\r\n\r\n  const gradientCss = (() => {\r\n    if (type === 'linear') return `linear-gradient(${angle}deg, ${colorStops})`;\r\n    if (type === 'radial')\r\n      return `radial-gradient(circle at ${radialPosition.x}% ${radialPosition.y}%, ${colorStops})`;\r\n    return `conic-gradient(from ${conicAngle}deg, ${colorStops})`;\r\n  })();\r\n\r\n  const handleColorChange = (i: number, value: string) =>\r\n    setColors(prev => prev.map((c, idx) => (idx === i ? value : c)));\r\n\r\n  const addColor = () => setColors(prev => [...prev, '#ffffff']);\r\n\r\n  const randomizeColors = () => {\r\n    const numColors = Math.floor(Math.random() * 3) + 2; // 2-4 colors\r\n    const newColors = Array.from({ length: numColors }, () => generateRandomColor());\r\n    setColors(newColors);\r\n  };\r\n\r\n  const applyPreset = (preset: (typeof gradientPresets)[0]) => {\r\n    setColors(preset.colors);\r\n    setShowPresets(false);\r\n  };\r\n\r\n  const resetToDefault = () => {\r\n    setColors(defaultColors);\r\n    setType('linear');\r\n    setAngle(45);\r\n    setRadialPosition({ x: 50, y: 50 });\r\n    setConicAngle(0);\r\n    setSmooth(true);\r\n  };\r\n\r\n  const handleExportGradient = () => {\r\n    exportGradient({\r\n      colors,\r\n      type,\r\n      angle,\r\n      radialPosition,\r\n      conicAngle,\r\n      smooth,\r\n      isAnimated,\r\n      animationSpeed,\r\n    });\r\n  };\r\n\r\n  const handleExportAnimatedCSS = () => {\r\n    exportAnimatedCSS(type, colorStops, animationSpeed);\r\n  };\r\n\r\n  const handleExportAnimatedHTML = () => {\r\n    exportAnimatedHTML(type, colorStops, animationSpeed);\r\n  };\r\n\r\n  const handleImportGradient = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    importGradient(\r\n      file,\r\n      data => {\r\n        if (data.colors) setColors(data.colors);\r\n        if (data.type) setType(data.type);\r\n        if (data.angle !== undefined) setAngle(data.angle);\r\n        if (data.radialPosition) setRadialPosition(data.radialPosition);\r\n        if (data.conicAngle !== undefined) setConicAngle(data.conicAngle);\r\n        if (data.smooth !== undefined) setSmooth(data.smooth);\r\n        if (data.isAnimated !== undefined) setIsAnimated(data.isAnimated);\r\n        if (data.animationSpeed !== undefined) setAnimationSpeed(data.animationSpeed);\r\n      },\r\n      error => {\r\n        console.error('Failed to import gradient:', error);\r\n      }\r\n    );\r\n    event.target.value = ''; // Reset input\r\n  };\r\n\r\n  const restoreFromHistory = (historyItem: (typeof history)[0]) => {\r\n    setColors(historyItem.colors);\r\n    setType(historyItem.type);\r\n    setAngle(historyItem.angle);\r\n  };\r\n\r\n  // Custom dark background color\r\n  const darkBg = '#040609';\r\n  const cardBgStyle = { backgroundColor: isDark ? darkBg : 'white' };\r\n\r\n  /* --------------- render --------------- */\r\n  return (\r\n    <div className=\"mx-auto max-w-7xl p-4 sm:p-6 font-sans\">\r\n      {/* Desktop Layout */}\r\n      <div className=\"hidden lg:grid lg:grid-cols-5 lg:gap-8\">\r\n        {/* Left Panel - Tools */}\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          {/* Color Controls */}\r\n          <section\r\n            className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4\"\r\n            style={cardBgStyle}\r\n          >\r\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4\">Colors</h3>\r\n            <div className=\"flex flex-wrap items-center gap-2 mb-4\">\r\n              {colors.map((c, i) => (\r\n                <ColorSwatch\r\n                  key={i}\r\n                  color={c}\r\n                  onRemove={() => setColors(prev => prev.filter((_, idx) => idx !== i))}\r\n                  canRemove={colors.length > 2}\r\n                  onChange={val => handleColorChange(i, val)}\r\n                />\r\n              ))}\r\n              <button\r\n                onClick={addColor}\r\n                className=\"h-8 w-8 rounded-full border border-dashed border-gray-300 dark:border-gray-600 flex items-center justify-center text-gray-400 dark:text-gray-500 hover:bg-gray-100 transition-colors\"\r\n                onMouseEnter={e => {\r\n                  e.currentTarget.style.backgroundColor = isDark ? darkBg : '#f3f4f6';\r\n                }}\r\n                onMouseLeave={e => {\r\n                  e.currentTarget.style.backgroundColor = 'transparent';\r\n                }}\r\n                title=\"Add color\"\r\n              >\r\n                <Plus size={16} />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Quick Actions */}\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <button\r\n                onClick={randomizeColors}\r\n                className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n                style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                title=\"Randomize colors\"\r\n              >\r\n                <Shuffle size={16} />\r\n                <span>Random</span>\r\n              </button>\r\n\r\n              <div className=\"relative\">\r\n                <button\r\n                  onClick={() => setShowPresets(!showPresets)}\r\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n                  style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                  title=\"Gradient presets\"\r\n                >\r\n                  <Palette size={16} />\r\n                  <span>Presets</span>\r\n                </button>\r\n\r\n                {showPresets && (\r\n                  <div\r\n                    className=\"absolute top-full left-0 mt-2 w-64 rounded-lg border border-gray-200 dark:border-gray-600 shadow-lg z-10 p-2 max-h-80 overflow-y-auto\"\r\n                    style={cardBgStyle}\r\n                  >\r\n                    <div className=\"grid grid-cols-2 gap-2\">\r\n                      {gradientPresets.map(preset => (\r\n                        <button\r\n                          key={preset.name}\r\n                          onClick={() => applyPreset(preset)}\r\n                          className=\"p-2 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-left\"\r\n                          title={preset.name}\r\n                        >\r\n                          <div\r\n                            className=\"w-full h-6 rounded mb-1\"\r\n                            style={{\r\n                              background: `linear-gradient(45deg, ${preset.colors.join(',')})`,\r\n                            }}\r\n                          />\r\n                          <span className=\"text-xs text-gray-600 dark:text-gray-300\">\r\n                            {preset.name}\r\n                          </span>\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          {/* Gradient Type & Controls */}\r\n          <section\r\n            className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4\"\r\n            style={cardBgStyle}\r\n          >\r\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4\">\r\n              Type & Controls\r\n            </h3>\r\n            <div className=\"space-y-6\">\r\n              <GradientTypeTabs active={type} onChange={setType} isDark={isDark} />\r\n              {type === 'linear' && <AngleKnob angle={angle} onChange={setAngle} />}\r\n              {type === 'radial' && (\r\n                <RadialPositionControl\r\n                  position={radialPosition}\r\n                  onChange={setRadialPosition}\r\n                  isDark={isDark}\r\n                />\r\n              )}\r\n              {type === 'conic' && (\r\n                <ConicAngleControl angle={conicAngle} onChange={setConicAngle} isDark={isDark} />\r\n              )}\r\n            </div>\r\n          </section>\r\n\r\n          {/* Animation Controls */}\r\n          <section\r\n            className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4\"\r\n            style={cardBgStyle}\r\n          >\r\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4\">\r\n              Animation\r\n            </h3>\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <button\r\n                  onClick={() => setIsAnimated(!isAnimated)}\r\n                  className={clsx(\r\n                    'flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-sm font-medium',\r\n                    isAnimated\r\n                      ? 'bg-green-50 dark:bg-green-900/30 border-green-200 dark:border-green-700 text-green-600 dark:text-green-400'\r\n                      : 'bg-gray-50 border-gray-200 dark:border-gray-600 text-gray-500 dark:text-gray-400',\r\n                    'hover:shadow-md transition-all duration-200'\r\n                  )}\r\n                  style={!isAnimated ? { backgroundColor: isDark ? darkBg : '#f9fafb' } : undefined}\r\n                  title=\"Toggle animation\"\r\n                >\r\n                  {isAnimated ? <Pause size={16} /> : <Play size={16} />}\r\n                  <span>Animate</span>\r\n                </button>\r\n\r\n                <button\r\n                  onClick={() => setSmooth(s => !s)}\r\n                  className={clsx(\r\n                    'flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-sm font-medium',\r\n                    smooth\r\n                      ? 'bg-indigo-50 dark:bg-indigo-900/30 border-indigo-200 dark:border-indigo-700 text-indigo-600 dark:text-indigo-400'\r\n                      : 'bg-gray-50 border-gray-200 dark:border-gray-600 text-gray-500 dark:text-gray-400',\r\n                    'hover:shadow-md transition-all duration-200'\r\n                  )}\r\n                  style={!smooth ? { backgroundColor: isDark ? darkBg : '#f9fafb' } : undefined}\r\n                >\r\n                  <ArrowRightLeft size={16} />\r\n                  <span>Smoothen</span>\r\n                </button>\r\n              </div>\r\n\r\n              {/* Animation Speed Control */}\r\n              {isAnimated && (\r\n                <div className=\"flex items-center gap-4 p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-600\">\r\n                  <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">\r\n                    Speed:\r\n                  </span>\r\n                  <div className=\"flex items-center gap-2 flex-1\">\r\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400\">Slow</span>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"1\"\r\n                      max=\"10\"\r\n                      step=\"0.5\"\r\n                      value={animationSpeed}\r\n                      onChange={e => setAnimationSpeed(Number(e.target.value))}\r\n                      className=\"flex-1 h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer slider\"\r\n                      style={{\r\n                        background: `linear-gradient(to right, #4f46e5 0%, #4f46e5 ${((animationSpeed - 1) / 9) * 100}%, #e5e7eb ${((animationSpeed - 1) / 9) * 100}%, #e5e7eb 100%)`,\r\n                      }}\r\n                    />\r\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400\">Fast</span>\r\n                  </div>\r\n                  <span className=\"text-xs text-gray-500 dark:text-gray-400 min-w-[3rem]\">\r\n                    {animationSpeed}s\r\n                  </span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </section>\r\n\r\n          {/* Export & Import */}\r\n          <section\r\n            className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4\"\r\n            style={cardBgStyle}\r\n          >\r\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4\">\r\n              Export & Import\r\n            </h3>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <button\r\n                onClick={resetToDefault}\r\n                className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n                style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                title=\"Reset to default\"\r\n              >\r\n                <RotateCcw size={16} />\r\n                <span>Reset</span>\r\n              </button>\r\n\r\n              <div className=\"relative\">\r\n                <button\r\n                  onClick={() => setShowExportMenu(!showExportMenu)}\r\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n                  style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                  title=\"Export options\"\r\n                >\r\n                  <Download size={16} />\r\n                  <span>Export</span>\r\n                </button>\r\n\r\n                {showExportMenu && (\r\n                  <div\r\n                    className=\"absolute top-full left-0 mt-2 w-56 rounded-lg border border-gray-200 dark:border-gray-600 shadow-lg z-10 p-2\"\r\n                    style={cardBgStyle}\r\n                  >\r\n                    <div className=\"space-y-1\">\r\n                      <button\r\n                        onClick={() => {\r\n                          handleExportGradient();\r\n                          setShowExportMenu(false);\r\n                        }}\r\n                        className=\"w-full text-left p-2 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n                      >\r\n                        <div className=\"font-medium text-sm text-gray-700 dark:text-gray-200\">\r\n                          Export Config\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                          Save gradient settings as JSON\r\n                        </div>\r\n                      </button>\r\n\r\n                      {isAnimated && (\r\n                        <>\r\n                          <button\r\n                            onClick={() => {\r\n                              handleExportAnimatedCSS();\r\n                              setShowExportMenu(false);\r\n                            }}\r\n                            className=\"w-full text-left p-2 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n                          >\r\n                            <div className=\"font-medium text-sm text-gray-700 dark:text-gray-200\">\r\n                              Export Animated CSS\r\n                            </div>\r\n                            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                              CSS keyframes for animation\r\n                            </div>\r\n                          </button>\r\n\r\n                          <button\r\n                            onClick={() => {\r\n                              handleExportAnimatedHTML();\r\n                              setShowExportMenu(false);\r\n                            }}\r\n                            className=\"w-full text-left p-2 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n                          >\r\n                            <div className=\"font-medium text-sm text-gray-700 dark:text-gray-200\">\r\n                              Export HTML Demo\r\n                            </div>\r\n                            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                              Complete HTML page with animation\r\n                            </div>\r\n                          </button>\r\n                        </>\r\n                      )}\r\n\r\n                      {!isAnimated && (\r\n                        <div className=\"p-2 text-xs text-gray-400 dark:text-gray-500 italic border border-dashed border-gray-300 dark:border-gray-600 rounded-lg\">\r\n                          Enable animation to export animated gradients\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <label\r\n                className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200 cursor-pointer\"\r\n                style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                title=\"Import gradient\"\r\n              >\r\n                <Upload size={16} />\r\n                <span>Import</span>\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\".json\"\r\n                  onChange={handleImportGradient}\r\n                  className=\"sr-only\"\r\n                />\r\n              </label>\r\n            </div>\r\n          </section>\r\n\r\n          {/* History */}\r\n          {history.length > 1 && (\r\n            <section\r\n              className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4\"\r\n              style={cardBgStyle}\r\n            >\r\n              <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4\">\r\n                Recent\r\n              </h3>\r\n              <div className=\"grid grid-cols-4 gap-2\">\r\n                {history.slice(1, 9).map((item, index) => (\r\n                  <button\r\n                    key={index}\r\n                    onClick={() => restoreFromHistory(item)}\r\n                    className=\"aspect-video rounded border border-gray-200 dark:border-gray-600 hover:ring-2 hover:ring-indigo-200 dark:hover:ring-indigo-400 transition-all duration-200\"\r\n                    style={{ background: `linear-gradient(45deg, ${item.colors.join(',')})` }}\r\n                    title={`Restore gradient (${item.type}, ${item.angle}°)`}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </section>\r\n          )}\r\n        </div>\r\n\r\n        {/* Right Panel - Preview & Code */}\r\n        <div className=\"lg:col-span-3 space-y-6\">\r\n          {/* Gradient Preview */}\r\n          <section\r\n            className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-6\"\r\n            style={cardBgStyle}\r\n          >\r\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4\">Preview</h3>\r\n            <div className=\"relative\">\r\n              <div\r\n                style={{ background: gradientCss }}\r\n                className=\"w-full h-80 rounded-xl transition-all duration-200 ring-1 ring-gray-200 dark:ring-gray-700\"\r\n              />\r\n              <div className=\"absolute inset-x-4 -bottom-4 h-6 rounded-xl blur-md bg-black/20 dark:bg-black/40 opacity-20 pointer-events-none\" />\r\n            </div>\r\n          </section>\r\n\r\n          {/* Code Output */}\r\n          <CodeOutput\r\n            type={type}\r\n            angle={angle}\r\n            colorStops={colorStops}\r\n            gradientCss={gradientCss}\r\n            isDark={isDark}\r\n            isAnimated={isAnimated}\r\n            animationSpeed={animationSpeed}\r\n            radialPosition={radialPosition}\r\n            conicAngle={conicAngle}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Mobile Layout */}\r\n      <div className=\"lg:hidden space-y-6\">\r\n        {/* 🎨 Toolbar */}\r\n        <section\r\n          className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4\"\r\n          style={cardBgStyle}\r\n        >\r\n          <div className=\"flex flex-wrap items-center justify-between gap-3\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <button\r\n                onClick={randomizeColors}\r\n                className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n                style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                title=\"Randomize colors\"\r\n              >\r\n                <Shuffle size={16} />\r\n                <span>Random</span>\r\n              </button>\r\n\r\n              <div className=\"relative\">\r\n                <button\r\n                  onClick={() => setShowPresets(!showPresets)}\r\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n                  style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                  title=\"Gradient presets\"\r\n                >\r\n                  <Palette size={16} />\r\n                  <span>Presets</span>\r\n                </button>\r\n\r\n                {showPresets && (\r\n                  <div\r\n                    className=\"absolute top-full left-0 mt-2 w-48 rounded-lg border border-gray-200 dark:border-gray-600 shadow-lg z-10 p-2\"\r\n                    style={cardBgStyle}\r\n                  >\r\n                    <div className=\"grid grid-cols-2 gap-2\">\r\n                      {gradientPresets.map(preset => (\r\n                        <button\r\n                          key={preset.name}\r\n                          onClick={() => applyPreset(preset)}\r\n                          className=\"p-2 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-left\"\r\n                          title={preset.name}\r\n                        >\r\n                          <div\r\n                            className=\"w-full h-6 rounded mb-1\"\r\n                            style={{\r\n                              background: `linear-gradient(45deg, ${preset.colors.join(',')})`,\r\n                            }}\r\n                          />\r\n                          <span className=\"text-xs text-gray-600 dark:text-gray-300\">\r\n                            {preset.name}\r\n                          </span>\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n              <button\r\n                onClick={resetToDefault}\r\n                className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n                style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                title=\"Reset to default\"\r\n              >\r\n                <RotateCcw size={16} />\r\n                <span>Reset</span>\r\n              </button>\r\n\r\n              <div className=\"relative\">\r\n                <button\r\n                  onClick={() => setShowExportMenu(!showExportMenu)}\r\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200\"\r\n                  style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                  title=\"Export options\"\r\n                >\r\n                  <Download size={16} />\r\n                  <span>Export</span>\r\n                </button>\r\n\r\n                {showExportMenu && (\r\n                  <div\r\n                    className=\"absolute top-full right-0 mt-2 w-56 rounded-lg border border-gray-200 dark:border-gray-600 shadow-lg z-10 p-2\"\r\n                    style={cardBgStyle}\r\n                  >\r\n                    <div className=\"space-y-1\">\r\n                      <button\r\n                        onClick={() => {\r\n                          handleExportGradient();\r\n                          setShowExportMenu(false);\r\n                        }}\r\n                        className=\"w-full text-left p-2 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n                      >\r\n                        <div className=\"font-medium text-sm text-gray-700 dark:text-gray-200\">\r\n                          Export Config\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                          Save gradient settings as JSON\r\n                        </div>\r\n                      </button>\r\n\r\n                      {isAnimated && (\r\n                        <>\r\n                          <button\r\n                            onClick={() => {\r\n                              handleExportAnimatedCSS();\r\n                              setShowExportMenu(false);\r\n                            }}\r\n                            className=\"w-full text-left p-2 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n                          >\r\n                            <div className=\"font-medium text-sm text-gray-700 dark:text-gray-200\">\r\n                              Export Animated CSS\r\n                            </div>\r\n                            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                              CSS keyframes for animation\r\n                            </div>\r\n                          </button>\r\n\r\n                          <button\r\n                            onClick={() => {\r\n                              handleExportAnimatedHTML();\r\n                              setShowExportMenu(false);\r\n                            }}\r\n                            className=\"w-full text-left p-2 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n                          >\r\n                            <div className=\"font-medium text-sm text-gray-700 dark:text-gray-200\">\r\n                              Export HTML Demo\r\n                            </div>\r\n                            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                              Complete HTML page with animation\r\n                            </div>\r\n                          </button>\r\n                        </>\r\n                      )}\r\n\r\n                      {!isAnimated && (\r\n                        <div className=\"p-2 text-xs text-gray-400 dark:text-gray-500 italic border border-dashed border-gray-300 dark:border-gray-600 rounded-lg\">\r\n                          Enable animation to export animated gradients\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <label\r\n                className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200 cursor-pointer\"\r\n                style={{ backgroundColor: isDark ? darkBg : '#f9fafb' }}\r\n                title=\"Import gradient\"\r\n              >\r\n                <Upload size={16} />\r\n                <span>Import</span>\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\".json\"\r\n                  onChange={handleImportGradient}\r\n                  className=\"sr-only\"\r\n                />\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          {/* History */}\r\n          {history.length > 1 && (\r\n            <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-600\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">\r\n                  Recent:\r\n                </span>\r\n              </div>\r\n              <div className=\"flex gap-2 overflow-x-auto pb-2\">\r\n                {history.slice(1, 6).map((item, index) => (\r\n                  <button\r\n                    key={index}\r\n                    onClick={() => restoreFromHistory(item)}\r\n                    className=\"flex-shrink-0 w-16 h-8 rounded border border-gray-200 dark:border-gray-600 hover:ring-2 hover:ring-indigo-200 dark:hover:ring-indigo-400 transition-all duration-200\"\r\n                    style={{ background: `linear-gradient(45deg, ${item.colors.join(',')})` }}\r\n                    title={`Restore gradient (${item.type}, ${item.angle}°)`}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </section>\r\n\r\n        {/* 🔵 Main gradient display */}\r\n        <section\r\n          className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4 sm:p-6\"\r\n          style={cardBgStyle}\r\n        >\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              {colors.map((c, i) => (\r\n                <ColorSwatch\r\n                  key={i}\r\n                  color={c}\r\n                  onRemove={() => setColors(prev => prev.filter((_, idx) => idx !== i))}\r\n                  canRemove={colors.length > 2}\r\n                  onChange={val => handleColorChange(i, val)}\r\n                />\r\n              ))}\r\n              <button\r\n                onClick={addColor}\r\n                className=\"h-8 w-8 rounded-full border border-dashed border-gray-300 dark:border-gray-600 flex items-center justify-center text-gray-400 dark:text-gray-500 hover:bg-gray-100 transition-colors\"\r\n                onMouseEnter={e => {\r\n                  e.currentTarget.style.backgroundColor = isDark ? darkBg : '#f3f4f6';\r\n                }}\r\n                onMouseLeave={e => {\r\n                  e.currentTarget.style.backgroundColor = 'transparent';\r\n                }}\r\n                title=\"Add color\"\r\n              >\r\n                <Plus size={16} />\r\n              </button>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <button\r\n                onClick={() => setIsAnimated(!isAnimated)}\r\n                className={clsx(\r\n                  'flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-sm font-medium',\r\n                  isAnimated\r\n                    ? 'bg-green-50 dark:bg-green-900/30 border-green-200 dark:border-green-700 text-green-600 dark:text-green-400'\r\n                    : 'bg-gray-50 border-gray-200 dark:border-gray-600 text-gray-500 dark:text-gray-400',\r\n                  'hover:shadow-md transition-all duration-200'\r\n                )}\r\n                style={!isAnimated ? { backgroundColor: isDark ? darkBg : '#f9fafb' } : undefined}\r\n                title=\"Toggle animation\"\r\n              >\r\n                {isAnimated ? <Pause size={16} /> : <Play size={16} />}\r\n                <span>Animate</span>\r\n              </button>\r\n              <button\r\n                onClick={() => setSmooth(s => !s)}\r\n                className={clsx(\r\n                  'flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-sm font-medium',\r\n                  smooth\r\n                    ? 'bg-indigo-50 dark:bg-indigo-900/30 border-indigo-200 dark:border-indigo-700 text-indigo-600 dark:text-indigo-400'\r\n                    : 'bg-gray-50 border-gray-200 dark:border-gray-600 text-gray-500 dark:text-gray-400',\r\n                  'hover:shadow-md transition-all duration-200'\r\n                )}\r\n                style={!smooth ? { backgroundColor: isDark ? darkBg : '#f9fafb' } : undefined}\r\n              >\r\n                <ArrowRightLeft size={16} />\r\n                <span>Smoothen</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          {/* Animation Speed Control */}\r\n          {isAnimated && (\r\n            <div className=\"mt-4 flex items-center justify-center gap-4 p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-600\">\r\n              <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">Speed:</span>\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">Slow</span>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"1\"\r\n                  max=\"10\"\r\n                  step=\"0.5\"\r\n                  value={animationSpeed}\r\n                  onChange={e => setAnimationSpeed(Number(e.target.value))}\r\n                  className=\"w-24 h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer slider\"\r\n                  style={{\r\n                    background: `linear-gradient(to right, #4f46e5 0%, #4f46e5 ${((animationSpeed - 1) / 9) * 100}%, #e5e7eb ${((animationSpeed - 1) / 9) * 100}%, #e5e7eb 100%)`,\r\n                  }}\r\n                />\r\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">Fast</span>\r\n              </div>\r\n              <span className=\"text-xs text-gray-500 dark:text-gray-400 min-w-[3rem]\">\r\n                {animationSpeed}s\r\n              </span>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"mt-6 relative\">\r\n            <div\r\n              style={{ background: gradientCss }}\r\n              className=\"w-full h-52 rounded-xl transition-all duration-200 ring-1 ring-gray-200 dark:ring-gray-700\"\r\n            />\r\n            <div className=\"absolute inset-x-4 -bottom-4 h-6 rounded-xl blur-md bg-black/20 dark:bg-black/40 opacity-20 pointer-events-none\" />\r\n          </div>\r\n        </section>\r\n\r\n        {/* 🎛 Controls */}\r\n        <section\r\n          className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4 sm:p-6 flex flex-col gap-6\"\r\n          style={cardBgStyle}\r\n        >\r\n          <GradientTypeTabs active={type} onChange={setType} isDark={isDark} />\r\n          {type === 'linear' && <AngleKnob angle={angle} onChange={setAngle} />}\r\n          {type === 'radial' && (\r\n            <RadialPositionControl\r\n              position={radialPosition}\r\n              onChange={setRadialPosition}\r\n              isDark={isDark}\r\n            />\r\n          )}\r\n          {type === 'conic' && (\r\n            <ConicAngleControl angle={conicAngle} onChange={setConicAngle} isDark={isDark} />\r\n          )}\r\n        </section>\r\n\r\n        {/* 📄 Code Output */}\r\n        <CodeOutput\r\n          type={type}\r\n          angle={angle}\r\n          colorStops={colorStops}\r\n          gradientCss={gradientCss}\r\n          isDark={isDark}\r\n          isAnimated={isAnimated}\r\n          animationSpeed={animationSpeed}\r\n          radialPosition={radialPosition}\r\n          conicAngle={conicAngle}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}