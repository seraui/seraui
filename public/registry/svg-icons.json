{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "svg-icons",
  "title": "Svg Icons",
  "description": "A minimalistic svg icons component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "svg-icons.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\n\r\n// --- Caching Mechanism ---\r\n// Use a Map to cache API results for the duration of the session.\r\nconst apiCache = new Map<string, { data: Icon[]; pages: number }>();\r\n\r\n// --- Custom Hook for Dark Mode ---\r\nfunction useDarkMode() {\r\n  const [theme, setTheme] = React.useState<\"light\" | \"dark\">(() => {\r\n    if (typeof window === \"undefined\") return \"dark\";\r\n    const stored = localStorage.getItem(\"theme\");\r\n    if (stored === \"light\" || stored === \"dark\") return stored;\r\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches\r\n      ? \"dark\"\r\n      : \"light\";\r\n  });\r\n\r\n  const toggleTheme = React.useCallback(() => {\r\n    setTheme((prev) => (prev === \"dark\" ? \"light\" : \"dark\"));\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const root = document.documentElement;\r\n    root.classList.remove(\"light\", \"dark\");\r\n    root.classList.add(theme);\r\n    localStorage.setItem(\"theme\", theme);\r\n  }, [theme]);\r\n\r\n  return { theme, toggleTheme };\r\n}\r\n\r\n// --- Types ---\r\ninterface Icon {\r\n  id: string;\r\n  title: string;\r\n  text: string;\r\n}\r\n\r\n// --- Main App Component ---\r\nexport default function Svgicons() {\r\n  const { theme } = useDarkMode();\r\n  // State management for icons, search, loading, and pagination\r\n  const [icons, setIcons] = React.useState<Icon[]>([]);\r\n  const [searchTerm, setSearchTerm] = React.useState(\"\"); // Current input value, starts empty\r\n  const [activeQuery, setActiveQuery] = React.useState(\"\"); // The submitted query, starts empty for random load\r\n  const [loading, setLoading] = React.useState(true);\r\n  const [error, setError] = React.useState<string | null>(null);\r\n  const [currentPage, setCurrentPage] = React.useState(1);\r\n  const [totalPages, setTotalPages] = React.useState(0);\r\n\r\n  // --- API Fetching with Caching ---\r\n  const fetchIcons = React.useCallback(async (query: string, page: number) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    let cacheKey, url;\r\n\r\n    // If there's no active search query, fetch random icons. Otherwise, search for the query.\r\n    if (!query) {\r\n      url = `https://svg-fetch0.vercel.app/api/search?page=${page - 1}&limit=48&random=true`;\r\n      cacheKey = `random-page-${page}`;\r\n    } else {\r\n      url = `https://svg-fetch0.vercel.app/api/search?search=${encodeURIComponent(query)}&page=${page - 1}&limit=48`;\r\n      cacheKey = `${query}-page-${page}`;\r\n    }\r\n\r\n    // Check cache first\r\n    if (apiCache.has(cacheKey)) {\r\n      const cachedData = apiCache.get(cacheKey);\r\n      if (cachedData) {\r\n        setIcons(cachedData.data);\r\n        setTotalPages(cachedData.pages);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n\r\n      if (data && data.data) {\r\n        const responseData = { data: data.data, pages: data.pages };\r\n        apiCache.set(cacheKey, responseData); // Cache the response\r\n        setIcons(responseData.data);\r\n        setTotalPages(responseData.pages);\r\n      } else {\r\n        setIcons([]);\r\n        setTotalPages(0);\r\n      }\r\n    } catch (err) {\r\n      setError(\"Could not fetch icons. The API might be down.\");\r\n      console.error(err);\r\n      setIcons([]);\r\n      setTotalPages(0);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Fetch icons when the component mounts and when the active query or page changes.\r\n  React.useEffect(() => {\r\n    fetchIcons(activeQuery, currentPage);\r\n  }, [activeQuery, currentPage, fetchIcons]);\r\n\r\n  // --- Event Handlers ---\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const handleSearchSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    // Only trigger a new search if the term changes\r\n    if (searchTerm.trim() !== activeQuery) {\r\n      setActiveQuery(searchTerm.trim());\r\n      setCurrentPage(1); // Reset to first page on new search\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (page: number) => {\r\n    if (page > 0 && page <= totalPages) {\r\n      setCurrentPage(page);\r\n      window.scrollTo(0, 0); // Scroll to top on page change\r\n    }\r\n  };\r\n\r\n  // --- Rendering ---\r\n  return (\r\n    <div className=\"bg-white dark:bg-black min-h-screen text-gray-800 dark:text-gray-300 font-sans transition-colors duration-300\">\r\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n        <header className=\"text-center mb-12\">\r\n          <h1 className=\"text-4xl sm:text-5xl font-extrabold text-gray-900 dark:text-white mb-2 tracking-tight\">\r\n            SVG Icon Finder\r\n          </h1>\r\n          <p className=\"text-lg text-gray-600 dark:text-gray-500\">\r\n            The ultimate icon library at your fingertips.\r\n          </p>\r\n        </header>\r\n\r\n        <form\r\n          onSubmit={handleSearchSubmit}\r\n          className=\"relative mb-12 max-w-2xl mx-auto\"\r\n        >\r\n          <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\r\n            <svg\r\n              className=\"h-5 w-5 text-gray-400 dark:text-gray-500\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            value={searchTerm}\r\n            onChange={handleSearchChange}\r\n            placeholder=\"Search for 'arrow', 'user', 'settings'...\"\r\n            className=\"w-full p-4 pl-12 pr-12 bg-gray-100 dark:bg-white/5 border-2 border-gray-200 dark:border-white/10 rounded-full text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-gray-400 dark:backdrop-blur-sm transition-all duration-300\"\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            className=\"absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n            aria-label=\"Search\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n              fill=\"currentColor\"\r\n              viewBox=\"0 0 16 16\"\r\n            >\r\n              <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\" />\r\n            </svg>\r\n          </button>\r\n        </form>\r\n\r\n        <main>\r\n          {error && (\r\n            <p className=\"text-center text-red-500 dark:text-red-400 bg-red-100 dark:bg-red-900/50 p-3 rounded-lg\">\r\n              {error}\r\n            </p>\r\n          )}\r\n\r\n          {loading ? (\r\n            <div className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-12 gap-4\">\r\n              {Array.from({ length: 48 }).map((_, i) => (\r\n                <SkeletonCard key={i} />\r\n              ))}\r\n            </div>\r\n          ) : icons.length > 0 ? (\r\n            <div className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-12 gap-4\">\r\n              {icons.map((icon) => (\r\n                <IconCard\r\n                  key={`${icon.id}-${Math.random()}`}\r\n                  icon={icon}\r\n                  theme={theme}\r\n                />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <p className=\"text-center text-gray-500 dark:text-gray-500 mt-16 text-lg\">\r\n              {activeQuery\r\n                ? `No icons found for \"${activeQuery}\". Try another search.`\r\n                : \"No icons available.\"}\r\n            </p>\r\n          )}\r\n\r\n          {!loading && totalPages > 1 && (\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              totalPages={totalPages}\r\n              onPageChange={handlePageChange}\r\n            />\r\n          )}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// --- Child Components ---\r\n\r\n// Skeleton Card for Loading State\r\nfunction SkeletonCard() {\r\n  return (\r\n    <div className=\"bg-gray-100 dark:bg-white/5 border border-gray-200 dark:border-white/10 rounded-lg aspect-square animate-pulse\"></div>\r\n  );\r\n}\r\n\r\n// Icon Card Component\r\ninterface IconCardProps {\r\n  icon: Icon;\r\n  theme: \"light\" | \"dark\";\r\n}\r\n\r\nfunction IconCard({ icon, theme }: IconCardProps) {\r\n  const [isCopied, setIsCopied] = React.useState(false);\r\n\r\n  // Sanitize SVG to be theme-aware - smart color replacement\r\n  const sanitizedSvg = React.useMemo(() => {\r\n    const isDarkMode = theme === \"dark\";\r\n    let svgText = icon.text;\r\n\r\n    // Set standard width and height for consistency in the grid\r\n    svgText = svgText.replace(/width=\"[^\"]*\"/, 'width=\"100%\"');\r\n    svgText = svgText.replace(/height=\"[^\"]*\"/, 'height=\"100%\"');\r\n\r\n    const targetColor = isDarkMode ? \"#FFFFFF\" : \"#000000\";\r\n    const targetColorName = isDarkMode ? \"white\" : \"black\";\r\n\r\n    // Smart color replacement - preserve icon structure\r\n    if (isDarkMode) {\r\n      // In dark mode: replace dark colors with white, keep light colors as white\r\n      svgText = svgText.replace(/fill=\"[^\"]*\"/gi, (match) => {\r\n        const color = match.toLowerCase();\r\n        // Keep transparent/none fills as they are\r\n        if (color.includes(\"none\") || color.includes(\"transparent\"))\r\n          return match;\r\n        return `fill=\"${targetColor}\"`;\r\n      });\r\n\r\n      svgText = svgText.replace(/stroke=\"[^\"]*\"/gi, (match) => {\r\n        const color = match.toLowerCase();\r\n        // Keep transparent/none strokes as they are\r\n        if (color.includes(\"none\") || color.includes(\"transparent\"))\r\n          return match;\r\n        return `stroke=\"${targetColor}\"`;\r\n      });\r\n    } else {\r\n      // In light mode: replace light colors with black, keep dark colors as black\r\n      svgText = svgText.replace(/fill=\"[^\"]*\"/gi, (match) => {\r\n        const color = match.toLowerCase();\r\n        // Keep transparent/none fills as they are\r\n        if (color.includes(\"none\") || color.includes(\"transparent\"))\r\n          return match;\r\n        return `fill=\"${targetColor}\"`;\r\n      });\r\n\r\n      svgText = svgText.replace(/stroke=\"[^\"]*\"/gi, (match) => {\r\n        const color = match.toLowerCase();\r\n        // Keep transparent/none strokes as they are\r\n        if (color.includes(\"none\") || color.includes(\"transparent\"))\r\n          return match;\r\n        return `stroke=\"${targetColor}\"`;\r\n      });\r\n    }\r\n\r\n    // Handle style attributes more carefully\r\n    svgText = svgText.replace(/style=\"[^\"]*\"/gi, (match) => {\r\n      let style = match;\r\n      // Only replace fill if it's not none/transparent\r\n      style = style.replace(/fill:\\s*([^;]*)/gi, (fillMatch, fillValue) => {\r\n        if (\r\n          fillValue.toLowerCase().includes(\"none\") ||\r\n          fillValue.toLowerCase().includes(\"transparent\")\r\n        ) {\r\n          return fillMatch;\r\n        }\r\n        return `fill:${targetColor}`;\r\n      });\r\n      // Only replace stroke if it's not none/transparent\r\n      style = style.replace(\r\n        /stroke:\\s*([^;]*)/gi,\r\n        (strokeMatch, strokeValue) => {\r\n          if (\r\n            strokeValue.toLowerCase().includes(\"none\") ||\r\n            strokeValue.toLowerCase().includes(\"transparent\")\r\n          ) {\r\n            return strokeMatch;\r\n          }\r\n          return `stroke:${targetColor}`;\r\n        }\r\n      );\r\n      return style;\r\n    });\r\n\r\n    // Replace hex colors but be more selective\r\n    svgText = svgText.replace(/#[0-9a-fA-F]{6}/gi, () => {\r\n      // Don't replace if it's in a comment or similar\r\n      return targetColor;\r\n    });\r\n    svgText = svgText.replace(/#[0-9a-fA-F]{3}/gi, targetColor.substring(0, 4));\r\n\r\n    // Replace color names but preserve none/transparent\r\n    svgText = svgText.replace(\r\n      /\\b(black|red|blue|green|yellow|purple|orange|pink|brown|gray|grey|currentColor)\\b/gi,\r\n      targetColorName\r\n    );\r\n    svgText = svgText.replace(/\\bwhite\\b/gi, isDarkMode ? \"white\" : \"black\");\r\n\r\n    // Handle currentColor and add default fill if needed\r\n    svgText = svgText.replace(/currentColor/gi, targetColor);\r\n\r\n    // Add default fill only if no fill is specified anywhere\r\n    if (!svgText.includes(\"fill=\") && !svgText.includes(\"fill:\")) {\r\n      svgText = svgText.replace(\"<svg\", `<svg fill=\"${targetColor}\"`);\r\n    }\r\n\r\n    return svgText;\r\n  }, [icon.text, theme]);\r\n\r\n  const handleCopy = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    try {\r\n      if (navigator.clipboard && window.isSecureContext) {\r\n        // Use modern Clipboard API\r\n        await navigator.clipboard.writeText(icon.text);\r\n      } else {\r\n        // Fallback for older browsers\r\n        const textArea = document.createElement(\"textarea\");\r\n        textArea.value = icon.text;\r\n        textArea.style.position = \"fixed\";\r\n        textArea.style.left = \"-9999px\";\r\n        document.body.appendChild(textArea);\r\n        textArea.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(textArea);\r\n      }\r\n      setIsCopied(true);\r\n      setTimeout(() => setIsCopied(false), 2000);\r\n    } catch (err) {\r\n      console.error(\"Failed to copy text: \", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"relative bg-gray-100 dark:bg-white/5 border border-gray-200 dark:border-white/10 rounded-lg p-2 flex items-center justify-center aspect-square transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg dark:hover:shadow-[0_0_15px_rgba(255,255,255,0.1)] hover:border-gray-300 dark:hover:border-white/20 cursor-pointer group\"\r\n      title={icon.title}\r\n    >\r\n      <div\r\n        className=\"w-full h-full\"\r\n        dangerouslySetInnerHTML={{ __html: sanitizedSvg }}\r\n      />\r\n      <button\r\n        onClick={handleCopy}\r\n        className=\"absolute top-1 right-1 p-1 rounded-full bg-white/50 dark:bg-black/30 text-gray-500 dark:text-gray-400 opacity-0 group-hover:opacity-100 hover:bg-gray-200 dark:hover:bg-black/70 hover:text-black dark:hover:text-white focus:opacity-100 focus:outline-none backdrop-blur-sm transition-all duration-300\"\r\n        aria-label=\"Copy SVG\"\r\n      >\r\n        {isCopied ? (\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"12\"\r\n            height=\"12\"\r\n            fill=\"currentColor\"\r\n            className=\"text-green-500 dark:text-green-400\"\r\n            viewBox=\"0 0 16 16\"\r\n          >\r\n            <path d=\"M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z\" />\r\n          </svg>\r\n        ) : (\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"12\"\r\n            height=\"12\"\r\n            fill=\"currentColor\"\r\n            viewBox=\"0 0 16 16\"\r\n          >\r\n            <path d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\" />\r\n            <path d=\"M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z\" />\r\n          </svg>\r\n        )}\r\n      </button>\r\n      {isCopied && (\r\n        <div className=\"absolute -top-8 left-1/2 -translate-x-1/2 px-2 py-0.5 text-xs bg-green-600 dark:bg-green-500 text-white rounded-md shadow-lg transition-all duration-300\">\r\n          Copied!\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Pagination Component\r\ninterface PaginationProps {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  onPageChange: (page: number) => void;\r\n}\r\n\r\nfunction Pagination({\r\n  currentPage,\r\n  totalPages,\r\n  onPageChange,\r\n}: PaginationProps) {\r\n  const pages = [];\r\n  const MAX_VISIBLE_PAGES = 5;\r\n\r\n  let startPage, endPage;\r\n  if (totalPages <= MAX_VISIBLE_PAGES) {\r\n    startPage = 1;\r\n    endPage = totalPages;\r\n  } else {\r\n    const maxPagesBeforeCurrent = Math.floor(MAX_VISIBLE_PAGES / 2);\r\n    const maxPagesAfterCurrent = Math.ceil(MAX_VISIBLE_PAGES / 2) - 1;\r\n    if (currentPage <= maxPagesBeforeCurrent) {\r\n      startPage = 1;\r\n      endPage = MAX_VISIBLE_PAGES;\r\n    } else if (currentPage + maxPagesAfterCurrent >= totalPages) {\r\n      startPage = totalPages - MAX_VISIBLE_PAGES + 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      startPage = currentPage - maxPagesBeforeCurrent;\r\n      endPage = currentPage + maxPagesAfterCurrent;\r\n    }\r\n  }\r\n\r\n  for (let i = startPage; i <= endPage; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  const buttonClass =\r\n    \"px-4 py-2 rounded-md text-sm transition-colors duration-200\";\r\n  const inactiveClass =\r\n    \"bg-gray-200 dark:bg-white/5 text-gray-600 dark:text-gray-400 hover:bg-gray-300 dark:hover:bg-white/10\";\r\n  const activeClass =\r\n    \"bg-gray-800 dark:bg-gray-200 text-white dark:text-gray-800 font-bold\";\r\n  const disabledClass = \"opacity-50 cursor-not-allowed\";\r\n\r\n  return (\r\n    <nav\r\n      className=\"flex justify-center items-center space-x-2 mt-16\"\r\n      aria-label=\"Pagination\"\r\n    >\r\n      <button\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n        className={`${buttonClass} ${inactiveClass} ${currentPage === 1 ? disabledClass : \"\"}`}\r\n      >\r\n        Prev\r\n      </button>\r\n\r\n      {startPage > 1 && (\r\n        <>\r\n          <button\r\n            onClick={() => onPageChange(1)}\r\n            className={`${buttonClass} ${inactiveClass}`}\r\n          >\r\n            1\r\n          </button>\r\n          {startPage > 2 && (\r\n            <span className=\"text-gray-400 dark:text-gray-600\">...</span>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {pages.map((page) => (\r\n        <button\r\n          key={page}\r\n          onClick={() => onPageChange(page)}\r\n          className={`${buttonClass} ${currentPage === page ? activeClass : inactiveClass}`}\r\n        >\r\n          {page}\r\n        </button>\r\n      ))}\r\n\r\n      {endPage < totalPages && (\r\n        <>\r\n          {endPage < totalPages - 1 && (\r\n            <span className=\"text-gray-400 dark:text-gray-600\">...</span>\r\n          )}\r\n          <button\r\n            onClick={() => onPageChange(totalPages)}\r\n            className={`${buttonClass} ${inactiveClass}`}\r\n          >\r\n            {totalPages}\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      <button\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === totalPages}\r\n        className={`${buttonClass} ${inactiveClass} ${currentPage === totalPages ? disabledClass : \"\"}`}\r\n      >\r\n        Next\r\n      </button>\r\n    </nav>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}