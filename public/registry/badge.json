{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge",
  "title": "Badge",
  "description": "A minimalistic badge component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "badge.tsx",
      "content": "'use client'\r\nimport React from 'react'\r\nimport { Badge } from './badge'\r\n\r\n// Icons\r\nconst CalendarIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-calendar-days\"><rect width=\"20\" height=\"18\" x=\"2\" y=\"4\" rx=\"2\" /><line x1=\"16\" x2=\"16\" y1=\"2\" y2=\"6\" /><line x1=\"8\" x2=\"8\" y1=\"2\" y2=\"6\" /><line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" /></svg>\r\n)\r\n\r\nconst SendIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-send\"><path d=\"M22 2L11 13\" /><path d=\"M22 2l-7 20-4-9-9-4z\" /></svg>\r\n)\r\n\r\nconst StarIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polygon points=\"12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26\" /></svg>\r\n)\r\n\r\nconst HeartIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\" /></svg>\r\n)\r\n\r\nconst ShieldIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\" /></svg>\r\n)\r\n\r\nconst TrendingUpIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"22,7 13.5,15.5 8.5,10.5 2,17\" /><polyline points=\"16,7 22,7 22,13\" /></svg>\r\n)\r\n\r\nconst ZapIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polygon points=\"13,2 3,14 12,14 11,22 21,10 12,10\" /></svg>\r\n)\r\n\r\nconst CrownIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"m2 4 3 12h14l3-12-6 7-4-7-4 7-6-7zm3 16h14\" /></svg>\r\n)\r\n\r\n// Types for custom badge components\r\ninterface CustomBadgeProps {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n    [key: string]: React.ReactNode | string | undefined | (() => void);\r\n}\r\n\r\ninterface NeonBadgeProps extends CustomBadgeProps {\r\n    color?: 'blue' | 'purple' | 'pink' | 'green' | 'orange' | 'red';\r\n}\r\n\r\ninterface GradientBadgeProps extends CustomBadgeProps {\r\n    gradient?: 'blue' | 'purple' | 'green' | 'orange' | 'rainbow' | 'sunset';\r\n}\r\n\r\n// Custom Glassy Badge Components\r\nconst GlassBadge = ({ children, className = \"\", ...props }: CustomBadgeProps) => (\r\n    <div\r\n        className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full backdrop-blur-md bg-white/20 dark:bg-black/20 border border-white/30 dark:border-white/10 shadow-lg hover:shadow-xl transition-all duration-300 ${className}`}\r\n        {...props}\r\n    >\r\n        {children}\r\n    </div>\r\n)\r\n\r\nconst NeonBadge = ({ children, color = \"blue\", className = \"\", ...props }: NeonBadgeProps) => {\r\n    const colors = {\r\n        blue: \"shadow-blue-500/50 border-blue-400/50 text-blue-300\",\r\n        purple: \"shadow-purple-500/50 border-purple-400/50 text-purple-300\",\r\n        pink: \"shadow-pink-500/50 border-pink-400/50 text-pink-300\",\r\n        green: \"shadow-green-500/50 border-green-400/50 text-green-300\",\r\n        orange: \"shadow-orange-500/50 border-orange-400/50 text-orange-300\",\r\n        red: \"shadow-red-500/50 border-red-400/50 text-red-300\",\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full backdrop-blur-md bg-black/40 border-2 shadow-2xl hover:shadow-3xl transition-all duration-300 animate-pulse ${colors[color]} ${className}`}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst GradientBadge = ({ children, gradient = \"blue\", className = \"\", ...props }: GradientBadgeProps) => {\r\n    const gradients = {\r\n        blue: \"bg-gradient-to-r from-blue-500/80 to-cyan-500/80\",\r\n        purple: \"bg-gradient-to-r from-purple-500/80 to-pink-500/80\",\r\n        green: \"bg-gradient-to-r from-green-500/80 to-emerald-500/80\",\r\n        orange: \"bg-gradient-to-r from-orange-500/80 to-red-500/80\",\r\n        rainbow: \"bg-gradient-to-r from-red-500/80 via-yellow-500/80 via-green-500/80 via-blue-500/80 to-purple-500/80\",\r\n        sunset: \"bg-gradient-to-r from-orange-400/80 via-pink-500/80 to-purple-600/80\",\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full backdrop-blur-md ${gradients[gradient]} border border-white/30 shadow-lg text-white hover:scale-105 transition-all duration-300 ${className}`}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst FrostedBadge = ({ children, className = \"\", ...props }: CustomBadgeProps) => (\r\n    <div\r\n        className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full backdrop-blur-xl bg-white/10 dark:bg-white/5 border border-white/20 dark:border-white/10 shadow-2xl hover:bg-white/20 dark:hover:bg-white/10 transition-all duration-300 ${className}`}\r\n        {...props}\r\n    >\r\n        {children}\r\n    </div>\r\n)\r\n\r\nconst HolographicBadge = ({ children, className = \"\", ...props }: CustomBadgeProps) => (\r\n    <div\r\n        className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full backdrop-blur-md bg-gradient-to-r from-cyan-500/20 via-purple-500/20 to-pink-500/20 border border-white/30 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 animate-gradient-x ${className}`}\r\n        style={{\r\n            background: 'linear-gradient(-45deg, rgba(59, 130, 246, 0.3), rgba(147, 51, 234, 0.3), rgba(236, 72, 153, 0.3), rgba(59, 130, 246, 0.3))',\r\n            backgroundSize: '400% 400%',\r\n            animation: 'gradient 3s ease infinite'\r\n        }}\r\n        {...props}\r\n    >\r\n        {children}\r\n    </div>\r\n)\r\n\r\nconst CrystalBadge = ({ children, className = \"\", ...props }: CustomBadgeProps) => (\r\n    <div\r\n        className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full backdrop-blur-sm bg-gradient-to-br from-white/30 to-white/10 dark:from-white/20 dark:to-white/5 border-2 border-white/40 dark:border-white/20 shadow-2xl hover:shadow-3xl transition-all duration-300 hover:rotate-1 ${className}`}\r\n        {...props}\r\n    >\r\n        {children}\r\n    </div>\r\n)\r\n\r\nconst MetallicBadge = ({ children, className = \"\", ...props }: CustomBadgeProps) => (\r\n    <div\r\n        className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full bg-gradient-to-r from-gray-400 via-gray-300 to-gray-400 dark:from-gray-600 dark:via-gray-500 dark:to-gray-600 text-gray-800 dark:text-gray-200 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-300 dark:border-gray-500 ${className}`}\r\n        {...props}\r\n    >\r\n        {children}\r\n    </div>\r\n)\r\n\r\nconst GoldBadge = ({ children, className = \"\", ...props }: CustomBadgeProps) => (\r\n    <div\r\n        className={`inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-full bg-gradient-to-r from-yellow-400 via-yellow-300 to-yellow-400 text-yellow-900 shadow-lg hover:shadow-xl transition-all duration-300 border border-yellow-300 hover:scale-105 ${className}`}\r\n        {...props}\r\n    >\r\n        {children}\r\n    </div>\r\n)\r\n\r\n\r\n\r\nexport default function BadgeView() {\r\n  return (\r\n    <div className=\"space-y-8 p-6\">\r\n      {/* Original Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Original Badge Variants</h3>\r\n        <div className='flex flex-wrap gap-2'>\r\n            <Badge>Badge</Badge>\r\n            <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">Soft (Default)</Badge>\r\n            <Badge className=\"bg-blue-600 text-white\">Solid</Badge>\r\n            <Badge className=\"border border-blue-300 text-blue-700 dark:border-blue-600 dark:text-blue-300\">Outline</Badge>\r\n            <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\" onDismiss={() => console.log('Dismissed!')} iconLeft={<CalendarIcon/>}>Dismissible</Badge>\r\n            <Badge className=\"bg-purple-600 text-white\" onClick={() => alert('Badge clicked!')}>Clickable</Badge>\r\n            <Badge className=\"border border-orange-300 text-orange-700 dark:border-orange-600 dark:text-orange-300\" href=\"#\" iconRight={<SendIcon />}>Link</Badge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Glassy Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Glassy Effect Badges</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <GlassBadge>Glass Basic</GlassBadge>\r\n            <GlassBadge className=\"text-blue-600 dark:text-blue-400\">Glass Blue</GlassBadge>\r\n            <GlassBadge className=\"text-purple-600 dark:text-purple-400\">Glass Purple</GlassBadge>\r\n            <GlassBadge className=\"text-green-600 dark:text-green-400\">Glass Green</GlassBadge>\r\n            <GlassBadge className=\"text-pink-600 dark:text-pink-400\">Glass Pink</GlassBadge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Neon Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Neon Glow Badges</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <NeonBadge color=\"blue\">Neon Blue</NeonBadge>\r\n            <NeonBadge color=\"purple\">Neon Purple</NeonBadge>\r\n            <NeonBadge color=\"pink\">Neon Pink</NeonBadge>\r\n            <NeonBadge color=\"green\">Neon Green</NeonBadge>\r\n            <NeonBadge color=\"orange\">Neon Orange</NeonBadge>\r\n            <NeonBadge color=\"red\">Neon Red</NeonBadge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Gradient Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Gradient Badges</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <GradientBadge gradient=\"blue\">Ocean Blue</GradientBadge>\r\n            <GradientBadge gradient=\"purple\">Purple Haze</GradientBadge>\r\n            <GradientBadge gradient=\"green\">Forest Green</GradientBadge>\r\n            <GradientBadge gradient=\"orange\">Sunset Orange</GradientBadge>\r\n            <GradientBadge gradient=\"rainbow\">Rainbow</GradientBadge>\r\n            <GradientBadge gradient=\"sunset\">Sunset</GradientBadge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Frosted Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Frosted Glass Badges</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <FrostedBadge className=\"text-gray-700 dark:text-gray-300\">Frosted Basic</FrostedBadge>\r\n            <FrostedBadge className=\"text-blue-600 dark:text-blue-400\">Frosted Blue</FrostedBadge>\r\n            <FrostedBadge className=\"text-purple-600 dark:text-purple-400\">Frosted Purple</FrostedBadge>\r\n            <FrostedBadge className=\"text-green-600 dark:text-green-400\">Frosted Green</FrostedBadge>\r\n            <FrostedBadge className=\"text-pink-600 dark:text-pink-400\">Frosted Pink</FrostedBadge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Holographic Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Holographic Badges</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <HolographicBadge className=\"text-white\">Holographic</HolographicBadge>\r\n            <HolographicBadge className=\"text-cyan-200\">Cyber Holo</HolographicBadge>\r\n            <HolographicBadge className=\"text-purple-200\">Magic Holo</HolographicBadge>\r\n            <HolographicBadge className=\"text-pink-200\">Dream Holo</HolographicBadge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Crystal Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Crystal Badges</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <CrystalBadge className=\"text-gray-700 dark:text-gray-300\">Crystal Clear</CrystalBadge>\r\n            <CrystalBadge className=\"text-blue-600 dark:text-blue-400\">Ice Crystal</CrystalBadge>\r\n            <CrystalBadge className=\"text-purple-600 dark:text-purple-400\">Amethyst</CrystalBadge>\r\n            <CrystalBadge className=\"text-green-600 dark:text-green-400\">Emerald</CrystalBadge>\r\n            <CrystalBadge className=\"text-pink-600 dark:text-pink-400\">Rose Quartz</CrystalBadge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Icon Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Icon Badges with Glass Effects</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <GlassBadge className=\"text-yellow-600 dark:text-yellow-400\">\r\n                <StarIcon />\r\n                <span className=\"ml-1\">Premium</span>\r\n            </GlassBadge>\r\n            <GlassBadge className=\"text-red-600 dark:text-red-400\">\r\n                <HeartIcon />\r\n                <span className=\"ml-1\">Favorite</span>\r\n            </GlassBadge>\r\n            <GlassBadge className=\"text-green-600 dark:text-green-400\">\r\n                <ShieldIcon />\r\n                <span className=\"ml-1\">Verified</span>\r\n            </GlassBadge>\r\n            <GlassBadge className=\"text-blue-600 dark:text-blue-400\">\r\n                <TrendingUpIcon />\r\n                <span className=\"ml-1\">Trending</span>\r\n            </GlassBadge>\r\n            <GlassBadge className=\"text-purple-600 dark:text-purple-400\">\r\n                <ZapIcon />\r\n                <span className=\"ml-1\">Fast</span>\r\n            </GlassBadge>\r\n            <GlassBadge className=\"text-orange-600 dark:text-orange-400\">\r\n                <CrownIcon />\r\n                <span className=\"ml-1\">VIP</span>\r\n            </GlassBadge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Metallic Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Metallic & Luxury Badges</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <MetallicBadge>Silver</MetallicBadge>\r\n            <GoldBadge>Gold Premium</GoldBadge>\r\n            <MetallicBadge className=\"bg-gradient-to-r from-rose-400 via-pink-300 to-rose-400 text-rose-900\">Rose Gold</MetallicBadge>\r\n            <MetallicBadge className=\"bg-gradient-to-r from-purple-400 via-purple-300 to-purple-400 text-purple-900\">Platinum</MetallicBadge>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n      {/* Size Variations with Glass Effects */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Size Variations with Glass Effects</h3>\r\n        <div className='flex flex-wrap gap-3 items-center'>\r\n            <GlassBadge className=\"px-2 py-0.5 text-xs\">Extra Small</GlassBadge>\r\n            <GlassBadge className=\"px-2.5 py-1 text-sm\">Small</GlassBadge>\r\n            <GlassBadge className=\"px-3 py-1.5 text-sm\">Medium</GlassBadge>\r\n            <GlassBadge className=\"px-4 py-2 text-base\">Large</GlassBadge>\r\n            <GlassBadge className=\"px-5 py-2.5 text-lg\">Extra Large</GlassBadge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Interactive Badges */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Interactive Glass Badges</h3>\r\n        <div className='flex flex-wrap gap-3'>\r\n            <GlassBadge\r\n                className=\"cursor-pointer hover:bg-white/30 dark:hover:bg-black/30 active:scale-95\"\r\n                onClick={() => alert('Glass badge clicked!')}\r\n            >\r\n                Clickable Glass\r\n            </GlassBadge>\r\n            <FrostedBadge\r\n                className=\"cursor-pointer hover:bg-white/20 dark:hover:bg-white/15 active:scale-95\"\r\n                onClick={() => alert('Frosted badge clicked!')}\r\n            >\r\n                Clickable Frosted\r\n            </FrostedBadge>\r\n            <CrystalBadge\r\n                className=\"cursor-pointer hover:rotate-3 active:scale-95\"\r\n                onClick={() => alert('Crystal badge clicked!')}\r\n            >\r\n                Clickable Crystal\r\n            </CrystalBadge>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "badge.tsx",
      "content": "'use client'\r\nimport React, { MouseEvent, ReactNode, ReactElement, useState } from 'react';\r\n\r\n// Enhanced Icons\r\nconst XIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n    </svg>\r\n);\r\n\r\nconst LoadingIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={`${className} animate-spin`}>\r\n        <path d=\"M21 12a9 9 0 11-6.219-8.56\"/>\r\n    </svg>\r\n);\r\n\r\n// Enhanced Types\r\ntype BadgeSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\r\ntype BadgeShape = 'rounded' | 'pill' | 'square' | 'circle';\r\ntype BadgeAnimation = 'none' | 'pulse' | 'bounce' | 'float' | 'glow' | 'shake' | 'rotate' | 'scale' | 'gradient-shift';\r\ntype BadgePosition = 'static' | 'absolute' | 'fixed' | 'sticky';\r\n\r\n// Enhanced Badge Props Interface\r\ninterface BadgeBaseProps {\r\n  children: ReactNode;\r\n  size?: BadgeSize;\r\n  shape?: BadgeShape;\r\n  animation?: BadgeAnimation;\r\n  position?: BadgePosition;\r\n\r\n  // Icons and Content\r\n  iconLeft?: ReactElement;\r\n  iconRight?: ReactElement;\r\n  badge?: string | number; \r\n  loading?: boolean;\r\n\r\n  // Styling\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n\r\n  // Glass/Blur Effects\r\n  blur?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl';\r\n  opacity?: number;\r\n\r\n  // Shadow and Glow\r\n  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'inner';\r\n  glow?: boolean;\r\n\r\n  // Animation Options\r\n  animationDuration?: 'fast' | 'normal' | 'slow';\r\n\r\n  // Interactive States\r\n  disabled?: boolean;\r\n  active?: boolean;\r\n\r\n  // Events\r\n  onDismiss?: (event: MouseEvent<HTMLButtonElement>) => void;\r\n  onHover?: (event: MouseEvent<HTMLElement>) => void;\r\n  onFocus?: (event: React.FocusEvent<HTMLElement>) => void;\r\n\r\n  // Accessibility\r\n  'aria-label'?: string;\r\n  'aria-describedby'?: string;\r\n  role?: string;\r\n\r\n\r\n  top?: string | number;\r\n  right?: string | number;\r\n  bottom?: string | number;\r\n  left?: string | number;\r\n  zIndex?: number;\r\n}\r\n\r\n\r\ntype BadgeActionProps = \r\n  | ({ onClick: (event: MouseEvent<HTMLButtonElement>) => void; href?: never; } & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>)\r\n  | ({ href: string; onClick?: never; } & Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href'>)\r\n  | ({ href?: undefined; onClick?: undefined } & React.HTMLAttributes<HTMLDivElement>);\r\n\r\n\r\nexport type BadgeProps = BadgeBaseProps & BadgeActionProps;\r\n\r\n\r\nexport const Badge = React.forwardRef<HTMLElement, BadgeProps>(({\r\n  children,\r\n  size = 'md',\r\n  shape = 'rounded',\r\n  animation = 'none',\r\n  position = 'static',\r\n  iconLeft,\r\n  iconRight,\r\n  badge,\r\n  loading = false,\r\n  className = '',\r\n  style = {},\r\n  blur = 'none',\r\n  opacity,\r\n  shadow = 'none',\r\n  glow = false,\r\n  animationDuration = 'normal',\r\n  disabled = false,\r\n  active = false,\r\n  onDismiss,\r\n  onHover,\r\n  onFocus,\r\n  onClick,\r\n  href,\r\n  top,\r\n  right,\r\n  bottom,\r\n  left,\r\n  zIndex,\r\n  ...props\r\n}, ref) => {\r\n\r\n  const [isDismissed, setIsDismissed] = useState(false);\r\n\r\n  // Handle dismiss functionality\r\n  const handleDismiss = (event: MouseEvent<HTMLButtonElement>) => {\r\n    event.stopPropagation();\r\n    setIsDismissed(true);\r\n    onDismiss?.(event);\r\n  };\r\n\r\n  // Don't render if dismissed\r\n  if (isDismissed) return null;\r\n\r\n  // Enhanced Size Styles\r\n  const sizeStyles: Record<BadgeSize, string> = {\r\n    xs: 'px-1.5 py-0.5 text-xs',\r\n    sm: 'px-2.5 py-0.5 text-xs',\r\n    md: 'px-3 py-1.5 text-sm',\r\n    lg: 'px-4 py-2 text-base',\r\n    xl: 'px-5 py-2.5 text-lg',\r\n    '2xl': 'px-6 py-3 text-xl',\r\n  };\r\n\r\n  // Enhanced Icon Sizes\r\n  const iconSizeStyles: Record<BadgeSize, string> = {\r\n    xs: 'w-3 h-3',\r\n    sm: 'w-3.5 h-3.5',\r\n    md: 'w-4 h-4',\r\n    lg: 'w-5 h-5',\r\n    xl: 'w-6 h-6',\r\n    '2xl': 'w-7 h-7',\r\n  };\r\n\r\n  // Shape Styles\r\n  const shapeStyles: Record<BadgeShape, string> = {\r\n    rounded: 'rounded-full',\r\n    pill: 'rounded-full',\r\n    square: 'rounded-md',\r\n    circle: 'rounded-full aspect-square',\r\n  };\r\n\r\n  // Animation Styles\r\n  const animationStyles: Record<BadgeAnimation, string> = {\r\n    none: '',\r\n    pulse: 'animate-pulse',\r\n    bounce: 'animate-bounce',\r\n    float: 'animate-float',\r\n    glow: 'animate-glow',\r\n    shake: 'animate-shake',\r\n    rotate: 'animate-spin',\r\n    scale: 'hover:scale-110 transition-transform',\r\n    'gradient-shift': 'animate-gradient-x',\r\n  };\r\n\r\n  // Animation Duration Styles\r\n  const durationStyles: Record<string, string> = {\r\n    fast: 'duration-150',\r\n    normal: 'duration-300',\r\n    slow: 'duration-500',\r\n  };\r\n\r\n  // Shadow Styles\r\n  const shadowStyles: Record<string, string> = {\r\n    none: '',\r\n    sm: 'shadow-sm',\r\n    md: 'shadow-md',\r\n    lg: 'shadow-lg',\r\n    xl: 'shadow-xl',\r\n    '2xl': 'shadow-2xl',\r\n    inner: 'shadow-inner',\r\n  };\r\n\r\n  // Blur Styles\r\n  const blurStyles: Record<string, string> = {\r\n    none: '',\r\n    sm: 'backdrop-blur-sm',\r\n    md: 'backdrop-blur-md',\r\n    lg: 'backdrop-blur-lg',\r\n    xl: 'backdrop-blur-xl',\r\n    '2xl': 'backdrop-blur-2xl',\r\n    '3xl': 'backdrop-blur-3xl',\r\n  };\r\n\r\n  // Position Styles\r\n  const positionStyles: Record<BadgePosition, string> = {\r\n    static: 'static',\r\n    absolute: 'absolute',\r\n    fixed: 'fixed',\r\n    sticky: 'sticky',\r\n  };\r\n\r\n  // Get icon size based on badge size\r\n  const iconSize = iconSizeStyles[size];\r\n\r\n \r\n  const baseClasses = [\r\n    'inline-flex items-center justify-center font-medium transition-all duration-200',\r\n    'focus:outline-none focus:ring-2 focus:ring-offset-2',\r\n    sizeStyles[size],\r\n    shapeStyles[shape],\r\n    animationStyles[animation],\r\n    durationStyles[animationDuration],\r\n    shadowStyles[shadow],\r\n    blurStyles[blur],\r\n    positionStyles[position],\r\n    !className ? 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200' : '',\r\n    disabled ? 'opacity-50 cursor-not-allowed' : '',\r\n    active ? 'ring-2 ring-offset-2' : '',\r\n    glow ? 'shadow-lg' : '',\r\n    loading ? 'cursor-wait' : '',\r\n    className\r\n  ].filter(Boolean).join(' ');\r\n\r\n  // Add positioning styles if needed\r\n  const positioningStyles: React.CSSProperties = {\r\n    ...style,\r\n    ...(top !== undefined && { top }),\r\n    ...(right !== undefined && { right }),\r\n    ...(bottom !== undefined && { bottom }),\r\n    ...(left !== undefined && { left }),\r\n    ...(zIndex !== undefined && { zIndex }),\r\n    ...(opacity !== undefined && { opacity }),\r\n  };\r\n\r\n  const finalClassName = baseClasses;\r\n  const finalStyle = positioningStyles;\r\n\r\n  // Render different components based on props\r\n  if (href) {\r\n    return (\r\n      <a\r\n        ref={ref as React.Ref<HTMLAnchorElement>}\r\n        href={href}\r\n        className={finalClassName}\r\n        style={finalStyle}\r\n        onMouseEnter={onHover}\r\n        onFocus={onFocus}\r\n        {...(props as React.AnchorHTMLAttributes<HTMLAnchorElement>)}\r\n      >\r\n        {loading ? (\r\n          <LoadingIcon className={iconSize} />\r\n        ) : (\r\n          iconLeft && <span className=\"mr-1.5\">{React.cloneElement(iconLeft, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>\r\n        )}\r\n        <span className=\"truncate\">{children}</span>\r\n        {!loading && iconRight && <span className=\"ml-1.5\">{React.cloneElement(iconRight, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>}\r\n        {badge && (\r\n          <span className=\"ml-1.5 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\r\n            {badge}\r\n          </span>\r\n        )}\r\n        {onDismiss && (\r\n          <button\r\n            type=\"button\"\r\n            aria-label=\"Dismiss\"\r\n            onClick={handleDismiss}\r\n            className=\"ml-1.5 -mr-1 flex-shrink-0 rounded-full p-0.5 hover:bg-black/10 focus:outline-none\"\r\n          >\r\n            <XIcon className={iconSize} />\r\n          </button>\r\n        )}\r\n      </a>\r\n    );\r\n  }\r\n\r\n  if (onClick) {\r\n    return (\r\n      <button\r\n        ref={ref as React.Ref<HTMLButtonElement>}\r\n        onClick={onClick}\r\n        className={finalClassName}\r\n        style={finalStyle}\r\n        onMouseEnter={onHover}\r\n        onFocus={onFocus}\r\n        disabled={disabled || loading}\r\n        {...(props as React.ButtonHTMLAttributes<HTMLButtonElement>)}\r\n      >\r\n        {loading ? (\r\n          <LoadingIcon className={iconSize} />\r\n        ) : (\r\n          iconLeft && <span className=\"mr-1.5\">{React.cloneElement(iconLeft, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>\r\n        )}\r\n        <span className=\"truncate\">{children}</span>\r\n        {!loading && iconRight && <span className=\"ml-1.5\">{React.cloneElement(iconRight, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>}\r\n        {badge && (\r\n          <span className=\"ml-1.5 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\r\n            {badge}\r\n          </span>\r\n        )}\r\n        {onDismiss && (\r\n          <button\r\n            type=\"button\"\r\n            aria-label=\"Dismiss\"\r\n            onClick={handleDismiss}\r\n            className=\"ml-1.5 -mr-1 flex-shrink-0 rounded-full p-0.5 hover:bg-black/10 focus:outline-none\"\r\n          >\r\n            <XIcon className={iconSize} />\r\n          </button>\r\n        )}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ref as React.Ref<HTMLDivElement>}\r\n      className={finalClassName}\r\n      style={finalStyle}\r\n      onMouseEnter={onHover}\r\n      onFocus={onFocus}\r\n      {...(props as React.HTMLAttributes<HTMLDivElement>)}\r\n    >\r\n      {loading ? (\r\n        <LoadingIcon className={iconSize} />\r\n      ) : (\r\n        iconLeft && <span className=\"mr-1.5\">{React.cloneElement(iconLeft, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>\r\n      )}\r\n      <span className=\"truncate\">{children}</span>\r\n      {!loading && iconRight && <span className=\"ml-1.5\">{React.cloneElement(iconRight, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>}\r\n      {badge && (\r\n        <span className=\"ml-1.5 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\r\n          {badge}\r\n        </span>\r\n      )}\r\n      {onDismiss && (\r\n        <button\r\n          type=\"button\"\r\n          aria-label=\"Dismiss\"\r\n          onClick={handleDismiss}\r\n          className=\"ml-1.5 -mr-1 flex-shrink-0 rounded-full p-0.5 hover:bg-black/10 focus:outline-none\"\r\n        >\r\n          <XIcon className={iconSize} />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nBadge.displayName = 'Badge';",
      "type": "registry:ui"
    }
  ]
}