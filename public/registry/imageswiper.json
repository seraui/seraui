{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "imageswiper",
  "title": "Imageswiper",
  "description": "A minimalistic imageswiper component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "imageswiper.tsx",
      "content": "'use client'\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\n\r\n// --- DATA STRUCTURE INTERFACE ---\r\ninterface CardData {\r\n  id: number;\r\n  imageUrl: string;\r\n  title: string;\r\n}\r\n\r\n// --- PROPS INTERFACE ---\r\n// Updated to accept an array of CardData objects.\r\ninterface ImageSwiperProps {\r\n  cards: CardData[];\r\n  cardWidth?: number;\r\n  cardHeight?: number;\r\n  className?: string;\r\n}\r\n\r\nexport const ImageSwiper: React.FC<ImageSwiperProps> = ({\r\n  cards,\r\n  cardWidth = 256,  // 16rem = 256px\r\n  cardHeight = 352, // 22rem = 352px\r\n  className = ''\r\n}) => {\r\n  // --- STATE AND REFS ---\r\n  const cardStackRef = useRef<HTMLDivElement>(null);\r\n  const isSwiping = useRef(false);\r\n  const startX = useRef(0);\r\n  const currentX = useRef(0);\r\n  const animationFrameId = useRef<number | null>(null);\r\n\r\n  // The cardOrder state tracks the visual order of the cards in the stack.\r\n  const [cardOrder, setCardOrder] = useState<number[]>(() =>\r\n    Array.from({ length: cards.length }, (_, i) => i)\r\n  );\r\n\r\n  // --- HELPER FUNCTIONS (MEMOIZED) ---\r\n\r\n  // Gets all card elements from the DOM.\r\n  const getCards = useCallback((): HTMLElement[] => {\r\n    if (!cardStackRef.current) return [];\r\n    return Array.from(cardStackRef.current.querySelectorAll('.image-card'));\r\n  }, []);\r\n\r\n  // Gets the topmost card element.\r\n  const getActiveCard = useCallback((): HTMLElement | null => {\r\n    return getCards()[0] || null;\r\n  }, [getCards]);\r\n\r\n  // Updates CSS custom properties for all cards to position them in a stack.\r\n  const updateCardPositions = useCallback(() => {\r\n    getCards().forEach((card, i) => {\r\n      card.style.setProperty('--i', i.toString());\r\n      card.style.setProperty('--swipe-x', '0px');\r\n      card.style.setProperty('--swipe-rotate', '0deg');\r\n      card.style.opacity = '1';\r\n      card.style.transition = 'transform 0.5s ease, opacity 0.5s ease';\r\n    });\r\n  }, [getCards]);\r\n\r\n  // Applies instantaneous swipe styles to the active card during a drag.\r\n  const applySwipeStyles = useCallback((deltaX: number) => {\r\n    const card = getActiveCard();\r\n    if (!card) return;\r\n    const rotation = deltaX * 0.1; // Rotation based on horizontal movement\r\n    const opacity = 1 - Math.abs(deltaX) / (cardWidth * 1.5); // Fade out as it moves\r\n    card.style.setProperty('--swipe-x', `${deltaX}px`);\r\n    card.style.setProperty('--swipe-rotate', `${rotation}deg`);\r\n    card.style.opacity = opacity.toString();\r\n  }, [getActiveCard, cardWidth]);\r\n\r\n\r\n  // --- INTERACTION HANDLERS (MEMOIZED) ---\r\n\r\n  // Called on pointerdown: captures starting position and disables card transition.\r\n  const handleStart = useCallback((clientX: number) => {\r\n    if (isSwiping.current) return;\r\n    isSwiping.current = true;\r\n    startX.current = clientX;\r\n    currentX.current = clientX;\r\n\r\n    const card = getActiveCard();\r\n    if (card) {\r\n      card.style.transition = 'none'; // Allow direct manipulation\r\n    }\r\n\r\n    if (animationFrameId.current) {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n    }\r\n  }, [getActiveCard]);\r\n\r\n  // Called on pointermove: calculates drag distance and applies styles via rAF.\r\n  const handleMove = useCallback((clientX: number) => {\r\n    if (!isSwiping.current) return;\r\n    currentX.current = clientX;\r\n\r\n    animationFrameId.current = requestAnimationFrame(() => {\r\n      const deltaX = currentX.current - startX.current;\r\n      applySwipeStyles(deltaX);\r\n    });\r\n  }, [applySwipeStyles]);\r\n\r\n  // Called on pointerup: determines whether to swipe away or snap back.\r\n  const handleEnd = useCallback(() => {\r\n    if (!isSwiping.current) return;\r\n    isSwiping.current = false;\r\n\r\n    if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n    }\r\n\r\n    const deltaX = currentX.current - startX.current;\r\n    const threshold = cardWidth / 3; // Swipe threshold is 1/3 of the card's width\r\n    const card = getActiveCard();\r\n    if (!card) return;\r\n\r\n    // Re-enable transition for the swipe or snap-back animation.\r\n    card.style.transition = 'transform 0.3s ease, opacity 0.3s ease';\r\n\r\n    if (Math.abs(deltaX) > threshold) {\r\n      // --- SWIPE AWAY ---\r\n      const direction = Math.sign(deltaX);\r\n      const swipeOutX = direction * (cardWidth * 1.5);\r\n      card.style.setProperty('--swipe-x', `${swipeOutX}px`);\r\n      card.style.setProperty('--swipe-rotate', `${direction * 15}deg`);\r\n      card.style.opacity = '0';\r\n\r\n      // After animation, move the card to the back of the stack.\r\n      setTimeout(() => {\r\n        setCardOrder(prev => [...prev.slice(1), prev[0]]);\r\n      }, 300); // Must match transition duration\r\n\r\n    } else {\r\n      // --- SNAP BACK ---\r\n      applySwipeStyles(0); // Resets to initial state with animation\r\n    }\r\n  }, [getActiveCard, applySwipeStyles, cardWidth]);\r\n\r\n\r\n  // --- LIFECYCLE HOOKS ---\r\n\r\n  // Effect to add and clean up pointer event listeners.\r\n  useEffect(() => {\r\n    const element = cardStackRef.current;\r\n    if (!element) return;\r\n\r\n    const onPointerDown = (e: PointerEvent) => handleStart(e.clientX);\r\n    const onPointerMove = (e: PointerEvent) => handleMove(e.clientX);\r\n    const onPointerUp = () => handleEnd();\r\n    const onPointerLeave = () => handleEnd(); // Also end swipe if cursor leaves element\r\n\r\n    element.addEventListener('pointerdown', onPointerDown);\r\n    element.addEventListener('pointermove', onPointerMove);\r\n    element.addEventListener('pointerup', onPointerUp);\r\n    element.addEventListener('pointerleave', onPointerLeave);\r\n\r\n    return () => {\r\n      element.removeEventListener('pointerdown', onPointerDown);\r\n      element.removeEventListener('pointermove', onPointerMove);\r\n      element.removeEventListener('pointerup', onPointerUp);\r\n      element.removeEventListener('pointerleave', onPointerLeave);\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n  }, [handleStart, handleMove, handleEnd]);\r\n\r\n  // Effect to update card positions whenever the order changes.\r\n  useEffect(() => {\r\n    updateCardPositions();\r\n  }, [cardOrder, updateCardPositions]);\r\n\r\n\r\n  // --- RENDER ---\r\n  return (\r\n    <section\r\n      ref={cardStackRef}\r\n      className={`relative grid place-content-center select-none ${className}`}\r\n      style={{\r\n        width: cardWidth + 32,\r\n        height: cardHeight + 32,\r\n        perspective: '1000px',\r\n        touchAction: 'none', // Disables default touch actions like scrolling\r\n      } as React.CSSProperties}\r\n    >\r\n      {cardOrder.map((originalIndex, displayIndex) => {\r\n        const card = cards[originalIndex];\r\n        return (\r\n          <article\r\n            key={card.id}\r\n            className=\"image-card absolute cursor-grab active:cursor-grabbing\r\n                         place-self-center border-2 border-slate-700 rounded-2xl\r\n                         shadow-lg overflow-hidden will-change-transform bg-slate-800\"\r\n            style={{\r\n              '--i': displayIndex.toString(), // The card's current position in the stack (0 = top)\r\n              '--swipe-x': '0px', // Managed by JS for horizontal swipe\r\n              '--swipe-rotate': '0deg', // Managed by JS for rotation\r\n              width: cardWidth,\r\n              height: cardHeight,\r\n              zIndex: cards.length - displayIndex,\r\n              transform: `\r\n                translateY(calc(var(--i) * 10px))\r\n                translateZ(calc(var(--i) * -45px))\r\n                translateX(var(--swipe-x))\r\n                rotate(var(--swipe-rotate))\r\n              `,\r\n            } as React.CSSProperties}\r\n          >\r\n            <img\r\n              src={card.imageUrl}\r\n              alt={card.title}\r\n              className=\"w-full h-full object-cover pointer-events-none\"\r\n              draggable={false}\r\n              // Add a fallback for broken image links\r\n              onError={(e) => {\r\n                const target = e.target as HTMLImageElement;\r\n                target.onerror = null; \r\n                target.src=`https://placehold.co/${cardWidth}x${cardHeight}/2d3748/e2e8f0?text=Image+Not+Found`;\r\n              }}\r\n            />\r\n            <div className=\"absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent\">\r\n                <h3 className=\"font-bold text-xl text-white drop-shadow-lg\">{card.title}</h3>\r\n            </div>\r\n          </article>\r\n        )\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\n\r\n// --- Main App Component to run the ImageSwiper ---\r\nfunction ImageSwiperPage() {\r\n  // Data for the cards, including image URLs and titles\r\n  const cardData: CardData[] = [\r\n    { id: 1, imageUrl: 'https://i.pinimg.com/736x/d6/8a/12/d68a121e960094f99ad8acd37505fb7d.jpg', title: 'Crimson Forest' },\r\n    { id: 2, imageUrl: 'https://i.pinimg.com/736x/21/16/f7/2116f71f9d51d875e44d809f074ff079.jpg', title: 'Misty Mountains' },\r\n    { id: 3, imageUrl: 'https://i.pinimg.com/1200x/fe/c2/0d/fec20d2958059b8463bffb138d4eaac6.jpg', title: 'Floating Islands' },\r\n    { id: 4, imageUrl: 'https://i.pinimg.com/736x/84/dc/62/84dc62de850a34a9d420c97f3a2d58f4.jpg', title: 'Crystal Cave' },\r\n    { id: 5, imageUrl: 'https://i.pinimg.com/1200x/be/c3/7e/bec37e2c43e703f922f887db2578ce2e.jpg', title: 'Sunset Peaks' },\r\n    { id: 6, imageUrl: 'https://i.pinimg.com/736x/47/dd/47/47dd47b0d66c2fa641e03e370bcb5433.jpg', title: 'Night Sky' },\r\n    { id: 7, imageUrl: 'https://i.pinimg.com/736x/05/01/bc/0501bcd327d9df915e83154bbf9456e3.jpg', title: 'Ancient Ruins' },\r\n    { id: 8, imageUrl: 'https://i.pinimg.com/736x/c1/46/be/c146bebffca026d2c4fa76cc85aac917.jpg', title: 'Magical Tree' },\r\n    { id: 9, imageUrl: 'https://i.pinimg.com/736x/91/7a/51/917a51df0d444def3cade8d626305a67.jpg', title: 'Celestial Waters' },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"text-white w-full flex flex-col items-center justify-center p-4 font-sans overflow-hidden\">\r\n        <ImageSwiper cards={cardData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageSwiperPage;\r\n",
      "type": "registry:ui"
    }
  ]
}