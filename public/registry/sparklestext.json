{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sparklestext",
  "title": "Sparklestext",
  "description": "A minimalistic sparklestext component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "sparklestext.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from 'react';\r\nimport { SparklesText } from './sparklestext';\r\n\r\nexport default function SparklesTextView(): React.JSX.Element {\r\n    return (\r\n        <>\r\n            {/* Style tag to import and apply the Google Font */}\r\n            <style>{`\r\n                @import url('https://fonts.googleapis.com/css2?family=Fjalla+One&display=swap');\r\n                body {\r\n                    font-family: 'Space Grotesk', sans-serif;\r\n                }\r\n            `}</style>\r\n\r\n            {/* Main container with full light/dark mode support */}\r\n            <div className=\"flex-col items-center justify-center text-center p-4 gap-12 bg-white dark:bg-black transition-colors duration-300\">\r\n\r\n                {/* Primary sparkles text with theme-aware styling */}\r\n                <div className=\"p-8 rounded-lg bg-gray-100/80 dark:bg-gray-800/50 backdrop-blur-sm border border-gray-200 dark:border-gray-700 shadow-lg dark:shadow-gray-900/50 transition-all duration-300\">\r\n                    <SparklesText\r\n                        as=\"h1\"\r\n                        className=\"text-5xl md:text-7xl font-bold text-gray-900 dark:text-white tracking-tight transition-colors duration-300 mask-l-from-0%\"\r\n                        sparkleCount={15}\r\n                        sparkleSize={18}\r\n                        colors={{ first: '#fde047', second: '#f97316' }}\r\n                    >\r\n                        Starship\r\n                    </SparklesText>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}",
      "type": "registry:ui"
    },
    {
      "path": "sparklestext.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from 'react';\r\nimport {\r\n    useState,\r\n    useEffect,\r\n    createContext,\r\n    useContext,\r\n    useMemo,\r\n    FC,\r\n    ReactNode,\r\n    ElementType,\r\n    ComponentProps,\r\n    CSSProperties,\r\n} from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\n// Helper function to generate a random number in a given range\r\nconst random = (min: number, max: number): number => Math.random() * (max - min) + min;\r\n\r\n// --- TYPE DEFINITIONS ---\r\n\r\n// Defines the properties for a single sparkle\r\ninterface Sparkle {\r\n    id: string;\r\n    color: string;\r\n    size: number;\r\n    style: {\r\n        top: string;\r\n        left: string;\r\n        animationDelay: string;\r\n    };\r\n}\r\n\r\n// Defines the configuration options for the useSparkles hook\r\ninterface UseSparklesOptions {\r\n    colors?: { first: string; second: string };\r\n    sparkleCount?: number;\r\n    sparkleSize?: number;\r\n}\r\n\r\n// Defines the shape of the context data\r\ninterface SparklesContextType {\r\n    sparkles: Sparkle[];\r\n}\r\n\r\n// Defines the props for the SparkleInstance component\r\ninterface SparkleInstanceProps {\r\n    size: number;\r\n    color: string;\r\n    style: CSSProperties;\r\n    key?: string; // Add key prop to fix the type error\r\n}\r\n\r\n// Defines the base props for the SparklesText component\r\ninterface BaseSparklesTextProps extends UseSparklesOptions {\r\n    children?: ReactNode;\r\n    className?: string;\r\n}\r\n\r\n// Makes the SparklesText component polymorphic, allowing the 'as' prop\r\n// to change the rendered HTML element and accept its specific attributes.\r\ntype PolymorphicSparklesTextProps<T extends ElementType> = {\r\n    as?: T;\r\n} & BaseSparklesTextProps & Omit<ComponentProps<T>, keyof BaseSparklesTextProps>;\r\n\r\n\r\n// --- HOOK ---\r\n\r\n/**\r\n * useSparkles Hook\r\n * This custom hook encapsulates the logic for generating and managing sparkles.\r\n * @param options - Configuration for the sparkles.\r\n * @returns An array of sparkle objects.\r\n */\r\nconst useSparkles = ({\r\n    colors = { first: '#9E7AFF', second: '#FE8BBB' },\r\n    sparkleCount = 20,\r\n    sparkleSize = 12,\r\n}: UseSparklesOptions = {}): Sparkle[] => {\r\n    const [sparkles, setSparkles] = useState<Sparkle[]>([]);\r\n\r\n    useEffect(() => {\r\n        const generateSparkle = (): Sparkle => {\r\n            const color = Math.random() > 0.5 ? colors.first : colors.second;\r\n            return {\r\n                id: crypto.randomUUID(),\r\n                color,\r\n                size: random(sparkleSize * 0.7, sparkleSize * 1.3),\r\n                style: {\r\n                    top: `${random(0, 100)}%`,\r\n                    left: `${random(0, 100)}%`,\r\n                    // animationDelay is a valid CSS property, so we can assert the type\r\n                    animationDelay: `${random(0, 2.5)}s`,\r\n                },\r\n            };\r\n        };\r\n\r\n        const newSparkles = Array.from({ length: sparkleCount }, generateSparkle);\r\n        setSparkles(newSparkles);\r\n    }, [sparkleCount, colors.first, colors.second, sparkleSize]);\r\n\r\n    return sparkles;\r\n};\r\n\r\n// --- CONTEXT ---\r\nconst SparklesContext = createContext<SparklesContextType | null>(null);\r\n\r\n\r\n// --- COMPONENTS ---\r\n\r\n/**\r\n * SparkleInstance Component\r\n * Renders a single animated sparkle using an SVG shape.\r\n */\r\nconst SparkleInstance: FC<SparkleInstanceProps> = React.memo(({ size, color, style }) => {\r\n    const path = \"M120 80L100 0 80 80 0 100l80 20 20 80 20-80 80-20-80-20z\";\r\n\r\n    return (\r\n        <motion.span\r\n            className=\"absolute pointer-events-none z-10\"\r\n            style={style}\r\n            initial={{ opacity: 0, scale: 0.5 }}\r\n            animate={{ opacity: [0, 1, 0], scale: 1, rotate: [0, 90, 180] }}\r\n            transition={{\r\n                duration: random(1.5, 2.5),\r\n                ease: 'easeInOut',\r\n                repeat: Infinity,\r\n                delay: parseFloat(style.animationDelay as string),\r\n            }}\r\n        >\r\n            <svg\r\n                width={size}\r\n                height={size}\r\n                viewBox=\"0 0 200 200\"\r\n                fill=\"none\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n                <path d={path} fill={color} />\r\n            </svg>\r\n        </motion.span>\r\n    );\r\n});\r\n\r\nSparkleInstance.displayName = 'SparkleInstance';\r\n\r\n/**\r\n * SparklesWrapper Component\r\n * Consumes the sparkles context and renders the SparkleInstance components.\r\n */\r\nconst SparklesWrapper: FC = React.memo(() => {\r\n    const context = useContext(SparklesContext);\r\n    if (!context) {\r\n        // This should not happen if the component is used correctly.\r\n        return null;\r\n    }\r\n    const { sparkles } = context;\r\n\r\n    return (\r\n        <>\r\n            {sparkles.map((sparkle) => (\r\n                <SparkleInstance\r\n                    key={sparkle.id}\r\n                    size={sparkle.size}\r\n                    color={sparkle.color}\r\n                    style={sparkle.style as CSSProperties}\r\n                />\r\n            ))}\r\n        </>\r\n    );\r\n});\r\n\r\nSparklesWrapper.displayName = 'SparklesWrapper';\r\n\r\n/**\r\n * SparklesText Component\r\n * The main component that wraps text and adds a sparkling effect.\r\n * It's a polymorphic component, meaning you can change the underlying\r\n * HTML element using the `as` prop.\r\n */\r\nexport const SparklesText = <T extends ElementType = 'h1'>({\r\n    as,\r\n    children,\r\n    className,\r\n    ...sparkleOptions\r\n}: PolymorphicSparklesTextProps<T>) => {\r\n    const Component = as || 'h1';\r\n    const sparkles = useSparkles(sparkleOptions);\r\n    const contextValue = useMemo(() => ({ sparkles }), [sparkles]);\r\n\r\n    return (\r\n        <SparklesContext.Provider value={contextValue}>\r\n            <Component className={`relative inline-block ${className || ''}`}>\r\n                <SparklesWrapper />\r\n                <span className=\"relative z-20\">{children}</span>\r\n            </Component>\r\n        </SparklesContext.Provider>\r\n    );\r\n};\r\n\r\nexport default SparklesText;\r\n",
      "type": "registry:ui"
    }
  ]
}