{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text",
  "title": "Text",
  "description": "A minimalistic text component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "text.tsx",
      "content": "'use client';\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst BlurInText = ({ text = \"Blur In Effect\" }: { text?: string }) => {\r\n    return (\r\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\r\n            {text.split('').map((char, i) => (\r\n                <motion.span\r\n                    key={i}\r\n                    initial={{ \r\n                        opacity: 0,\r\n                        filter: \"blur(10px)\"\r\n                    }}\r\n                    animate={{ \r\n                        opacity: 1,\r\n                        filter: \"blur(0px)\"\r\n                    }}\r\n                    transition={{ \r\n                        delay: i * 0.05,\r\n                        duration: 0.8,\r\n                        ease: \"easeOut\"\r\n                    }}\r\n                    className=\"inline-block\"\r\n                >\r\n                    {char === ' ' ? '\\u00A0' : char}\r\n                </motion.span>\r\n            ))}\r\n        </h2>\r\n    );\r\n};\r\n\r\nconst BlurInView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\r\n            <BlurInText text=\"Sharp Focus Ahead\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlurInView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "blurin.tsx",
      "content": "'use client';\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst BlurInText = ({ text = \"Blur In Effect\" }: { text?: string }) => {\r\n    return (\r\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\r\n            {text.split('').map((char, i) => (\r\n                <motion.span\r\n                    key={i}\r\n                    initial={{ \r\n                        opacity: 0,\r\n                        filter: \"blur(10px)\"\r\n                    }}\r\n                    animate={{ \r\n                        opacity: 1,\r\n                        filter: \"blur(0px)\"\r\n                    }}\r\n                    transition={{ \r\n                        delay: i * 0.05,\r\n                        duration: 0.8,\r\n                        ease: \"easeOut\"\r\n                    }}\r\n                    className=\"inline-block\"\r\n                >\r\n                    {char === ' ' ? '\\u00A0' : char}\r\n                </motion.span>\r\n            ))}\r\n        </h2>\r\n    );\r\n};\r\n\r\nconst BlurInView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\r\n            <BlurInText text=\"Sharp Focus Ahead\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlurInView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "bouncy.tsx",
      "content": "'use client';\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst BouncyText = ({ text = \"Bouncy Animation\" }: { text?: string }) => {\r\n    return (\r\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\r\n            {text.split('').map((char, i) => (\r\n                <motion.span\r\n                    key={i}\r\n                    initial={{ y: 0 }}\r\n                    animate={{ \r\n                        y: [0, -20, 0],\r\n                        transition: {\r\n                            delay: i * 0.1,\r\n                            duration: 0.6,\r\n                            repeat: Infinity,\r\n                            repeatDelay: 2,\r\n                            ease: \"easeInOut\"\r\n                        }\r\n                    }}\r\n                    className=\"inline-block\"\r\n                >\r\n                    {char === ' ' ? '\\u00A0' : char}\r\n                </motion.span>\r\n            ))}\r\n        </h2>\r\n    );\r\n};\r\n\r\nconst BouncyView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\r\n            <BouncyText text=\"Creative Bouncy Text\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BouncyView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "glitch.tsx",
      "content": "'use client';\r\nimport { FC, CSSProperties } from \"react\";\r\n\r\ninterface GlitchTextProps {\r\n  children: string;\r\n  speed?: number;\r\n  enableShadows?: boolean;\r\n  enableOnHover?: boolean;\r\n  className?: string;\r\n}\r\n\r\ninterface CustomCSSProperties extends CSSProperties {\r\n  \"--after-duration\": string;\r\n  \"--before-duration\": string;\r\n  \"--after-shadow\": string;\r\n  \"--before-shadow\": string;\r\n}\r\n\r\n// CSS styles as a string\r\nconst glitchStyles = `\r\n.glitch {\r\n  color: #fff;\r\n  font-size: clamp(2rem, 10vw, 8rem);\r\n  white-space: nowrap;\r\n  font-weight: 900;\r\n  position: relative;\r\n  margin: 0 auto;\r\n  user-select: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.glitch::after,\r\n.glitch::before {\r\n  content: attr(data-text);\r\n  position: absolute;\r\n  top: 0;\r\n  color: #fff;\r\n  background-color: #060010;\r\n  overflow: hidden;\r\n  clip-path: inset(0 0 0 0);\r\n}\r\n\r\n.glitch:not(.enable-on-hover)::after {\r\n  left: 10px;\r\n  text-shadow: var(--after-shadow, -10px 0 red);\r\n  animation: animate-glitch var(--after-duration, 3s) infinite linear alternate-reverse;\r\n}\r\n.glitch:not(.enable-on-hover)::before {\r\n  left: -10px;\r\n  text-shadow: var(--before-shadow, 10px 0 cyan);\r\n  animation: animate-glitch var(--before-duration, 2s) infinite linear alternate-reverse;\r\n}\r\n\r\n.glitch.enable-on-hover::after,\r\n.glitch.enable-on-hover::before {\r\n  content: '';\r\n  opacity: 0;\r\n  animation: none;\r\n}\r\n\r\n.glitch.enable-on-hover:hover::after {\r\n  content: attr(data-text);\r\n  opacity: 1;\r\n  left: 10px;\r\n  text-shadow: var(--after-shadow, -10px 0 red);\r\n  animation: animate-glitch var(--after-duration, 3s) infinite linear alternate-reverse;\r\n}\r\n.glitch.enable-on-hover:hover::before {\r\n  content: attr(data-text);\r\n  opacity: 1;\r\n  left: -10px;\r\n  text-shadow: var(--before-shadow, 10px 0 cyan);\r\n  animation: animate-glitch var(--before-duration, 2s) infinite linear alternate-reverse;\r\n}\r\n\r\n@keyframes animate-glitch {\r\n  0%   { clip-path: inset(20% 0 50% 0); }\r\n  5%   { clip-path: inset(10% 0 60% 0); }\r\n  10%  { clip-path: inset(15% 0 55% 0); }\r\n  15%  { clip-path: inset(25% 0 35% 0); }\r\n  20%  { clip-path: inset(30% 0 40% 0); }\r\n  25%  { clip-path: inset(40% 0 20% 0); }\r\n  30%  { clip-path: inset(10% 0 60% 0); }\r\n  35%  { clip-path: inset(15% 0 55% 0); }\r\n  40%  { clip-path: inset(25% 0 35% 0); }\r\n  45%  { clip-path: inset(30% 0 40% 0); }\r\n  50%  { clip-path: inset(20% 0 50% 0); }\r\n  55%  { clip-path: inset(10% 0 60% 0); }\r\n  60%  { clip-path: inset(15% 0 55% 0); }\r\n  65%  { clip-path: inset(25% 0 35% 0); }\r\n  70%  { clip-path: inset(30% 0 40% 0); }\r\n  75%  { clip-path: inset(40% 0 20% 0); }\r\n  80%  { clip-path: inset(20% 0 50% 0); }\r\n  85%  { clip-path: inset(10% 0 60% 0); }\r\n  90%  { clip-path: inset(15% 0 55% 0); }\r\n  95%  { clip-path: inset(25% 0 35% 0); }\r\n  100% { clip-path: inset(30% 0 40% 0); }\r\n}\r\n`;\r\n\r\nconst GlitchText: FC<GlitchTextProps> = ({\r\n  children,\r\n  speed = 0.5,\r\n  enableShadows = true,\r\n  enableOnHover = false,\r\n  className = \"\",\r\n}) => {\r\n  const inlineStyles: CustomCSSProperties = {\r\n    \"--after-duration\": `${speed * 3}s`,\r\n    \"--before-duration\": `${speed * 2}s`,\r\n    \"--after-shadow\": enableShadows ? \"-5px 0 red\" : \"none\",\r\n    \"--before-shadow\": enableShadows ? \"5px 0 cyan\" : \"none\",\r\n  };\r\n\r\n  const hoverClass = enableOnHover ? \"enable-on-hover\" : \"\";\r\n\r\n  return (\r\n    <>\r\n      {/* Inject CSS styles */}\r\n      <style dangerouslySetInnerHTML={{ __html: glitchStyles }} />\r\n      <div\r\n        className={`glitch ${hoverClass} ${className}`}\r\n        style={inlineStyles}\r\n        data-text={children}\r\n      >\r\n        {children}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst GlitchView = () => {\r\n  return (\r\n    <div className=\"font-sans p-4 space-y-8 overflow-hidden\">\r\n      <GlitchText speed={3.4}>\r\n        GLITCH EFFECT\r\n      </GlitchText>\r\n      \r\n      <GlitchText \r\n        speed={0.3}\r\n        enableOnHover={true}\r\n        className=\"text-2xl\"\r\n      >\r\n        HOVER ME\r\n      </GlitchText>\r\n      \r\n      <GlitchText \r\n        speed={0.8}\r\n        enableShadows={false}\r\n        className=\"text-xl\"\r\n      >\r\n        NO SHADOWS\r\n      </GlitchText>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GlitchView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "gradient.tsx",
      "content": "'use client';\r\nimport React, { ReactNode } from 'react';\r\n\r\ninterface GradientTextProps {\r\n    children: ReactNode;\r\n    className?: string;\r\n    colors?: string[];\r\n    animationSpeed?: number;\r\n    showBorder?: boolean;\r\n}\r\n\r\n// Add the keyframes styles\r\nconst gradientKeyframes = `\r\n@keyframes gradient {\r\n  0% { background-position: 0% 50%; }\r\n  50% { background-position: 100% 50%; }\r\n  100% { background-position: 0% 50%; }\r\n}\r\n.animate-gradient {\r\n  animation: gradient 8s linear infinite;\r\n}\r\n`;\r\n\r\nfunction GradientText({\r\n    children,\r\n    className = \"\",\r\n    colors = [\"#ffaa40\", \"#9c40ff\", \"#ffaa40\"],\r\n    animationSpeed = 8,\r\n    showBorder = false,\r\n}: GradientTextProps) {\r\n    const gradientStyle = {\r\n        backgroundImage: `linear-gradient(to right, ${colors.join(\", \")})`,\r\n        backgroundSize: \"300% 100%\",\r\n        animation: `gradient ${animationSpeed}s linear infinite`,\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Inject keyframes styles */}\r\n            <style dangerouslySetInnerHTML={{ __html: gradientKeyframes }} />\r\n            <div\r\n                className={`relative mx-auto flex max-w-fit flex-row items-center justify-center rounded-[1.25rem] font-medium backdrop-blur transition-shadow duration-500 overflow-hidden cursor-pointer ${className}`}\r\n            >\r\n            {showBorder && (\r\n                <div\r\n                    className=\"absolute inset-0 bg-cover z-0 pointer-events-none\"\r\n                    style={gradientStyle}\r\n                >\r\n                    <div\r\n                        className=\"absolute inset-0 bg-black rounded-[1.25rem] z-[-1]\"\r\n                        style={{\r\n                            width: \"calc(100% - 2px)\",\r\n                            height: \"calc(100% - 2px)\",\r\n                            left: \"50%\",\r\n                            top: \"50%\",\r\n                            transform: \"translate(-50%, -50%)\",\r\n                        }}\r\n                    ></div>\r\n                </div>\r\n            )}\r\n            <div\r\n                className=\"inline-block relative z-2 text-transparent bg-cover\"\r\n                style={{\r\n                    ...gradientStyle,\r\n                    backgroundClip: \"text\",\r\n                    WebkitBackgroundClip: \"text\",\r\n                }}\r\n            >\r\n                {children}\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nconst GradientView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4 space-y-8\">\r\n            <GradientText className=\"text-4xl md:text-6xl font-bold\">\r\n                Gradient Animation\r\n            </GradientText>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GradientView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "morphing.tsx",
      "content": "'use client'\r\nimport React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\ninterface MorphingTextProps {\r\n  words?: string[];\r\n  duration?: number;\r\n  className?: string;\r\n}\r\n\r\nconst MorphingText: React.FC<MorphingTextProps> = ({\r\n  words = [\"Innovation\", \"Excellence\", \"Creativity\", \"Future\", \"Success\"],\r\n  duration = 3000,\r\n  className = \"\"\r\n}) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentIndex((prev) => (prev + 1) % words.length);\r\n    }, duration);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [words.length, duration]);\r\n\r\n  return (\r\n    <div className={`relative inline-block ${className}`}>\r\n      <AnimatePresence mode=\"wait\">\r\n        <motion.div\r\n          key={currentIndex}\r\n          initial={{ \r\n            opacity: 0,\r\n            filter: \"blur(10px)\",\r\n            scale: 0.8,\r\n            rotateX: -90\r\n          }}\r\n          animate={{ \r\n            opacity: 1,\r\n            filter: \"blur(0px)\",\r\n            scale: 1,\r\n            rotateX: 0\r\n          }}\r\n          exit={{ \r\n            opacity: 0,\r\n            filter: \"blur(10px)\",\r\n            scale: 1.2,\r\n            rotateX: 90\r\n          }}\r\n          transition={{\r\n            duration: 0.8,\r\n            ease: [0.25, 0.46, 0.45, 0.94],\r\n            filter: { duration: 0.6 },\r\n            scale: { duration: 0.6 },\r\n            rotateX: { duration: 0.8 }\r\n          }}\r\n          className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent\"\r\n          style={{ transformStyle: 'preserve-3d' }}\r\n        >\r\n          {words[currentIndex]}\r\n        </motion.div>\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function MorphingView() {\r\n  return (\r\n      <MorphingText />\r\n  );\r\n}",
      "type": "registry:ui"
    },
    {
      "path": "particle.tsx",
      "content": "'use client'\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\ninterface ParticleTextProps {\r\n  text?: string;\r\n  className?: string;\r\n  particleCount?: number;\r\n  particleColor?: string;\r\n}\r\n\r\nconst ParticleText: React.FC<ParticleTextProps> = ({\r\n  text = \"PARTICLES\",\r\n  className = \"\",\r\n  particleCount = 50,\r\n  particleColor = \"#3b82f6\"\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  // Removed unused particlesRef\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    const particles: HTMLDivElement[] = [];\r\n    \r\n    // Create particles\r\n    for (let i = 0; i < particleCount; i++) {\r\n      const particle = document.createElement('div');\r\n      particle.className = 'absolute w-1 h-1 rounded-full pointer-events-none';\r\n      particle.style.backgroundColor = particleColor;\r\n      particle.style.opacity = Math.random().toString();\r\n      \r\n      // Random position around the text\r\n      const x = Math.random() * container.offsetWidth;\r\n      const y = Math.random() * container.offsetHeight;\r\n      particle.style.left = `${x}px`;\r\n      particle.style.top = `${y}px`;\r\n      \r\n      container.appendChild(particle);\r\n      particles.push(particle);\r\n    }\r\n\r\n    // Animate particles\r\n    const animateParticles = () => {\r\n      particles.forEach((particle, index) => {\r\n        const time = Date.now() * 0.001 + index;\r\n        const x = Math.sin(time * 0.5) * 20 + Math.cos(time * 0.3) * 30;\r\n        const y = Math.cos(time * 0.4) * 15 + Math.sin(time * 0.6) * 25;\r\n        \r\n        particle.style.transform = `translate(${x}px, ${y}px)`;\r\n        particle.style.opacity = (Math.sin(time * 2) * 0.5 + 0.5).toString();\r\n      });\r\n      \r\n      requestAnimationFrame(animateParticles);\r\n    };\r\n\r\n    animateParticles();\r\n\r\n    return () => {\r\n      particles.forEach(particle => {\r\n        if (particle.parentNode) {\r\n          particle.parentNode.removeChild(particle);\r\n        }\r\n      });\r\n    };\r\n  }, [particleCount, particleColor]);\r\n\r\n  return (\r\n    <div \r\n      ref={containerRef}\r\n      className={`relative inline-block ${className}`}\r\n    >\r\n      <motion.div\r\n        initial={{ opacity: 0, scale: 0.8 }}\r\n        animate={{ opacity: 1, scale: 1 }}\r\n        transition={{ duration: 1, ease: \"easeOut\" }}\r\n        className=\"text-4xl md:text-6xl font-bold text-slate-800 dark:text-slate-200 relative z-10\"\r\n        style={{\r\n          textShadow: `0 0 20px ${particleColor}40`,\r\n          filter: `drop-shadow(0 0 10px ${particleColor}60)`\r\n        }}\r\n      >\r\n        {text}\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function ParticleView() {\r\n  return (\r\n      <ParticleText />\r\n  );\r\n}",
      "type": "registry:ui"
    },
    {
      "path": "scalein.tsx",
      "content": "'use client';\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ScaleInText = ({ text = \"Think Different\" }: { text?: string }) => {\r\n    return (\r\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\r\n            {text.split('').map((char, i) => (\r\n                <motion.span\r\n                    key={i}\r\n                    initial={{ scale: 0, opacity: 0 }}\r\n                    animate={{ scale: 1, opacity: 1 }}\r\n                    transition={{ delay: i * 0.08, type: 'spring', stiffness: 150, damping: 10 }}\r\n                    className=\"inline-block\"\r\n                >\r\n                    {char === ' ' ? '\\u00A0' : char}\r\n                </motion.span>\r\n            ))}\r\n        </h2>\r\n    );\r\n};\r\n\r\nconst ScaleInView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4 \">\r\n            <ScaleInText text=\"Simplicity is the ultimate sophistication.\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScaleInView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "shiny.tsx",
      "content": "'use client';\r\nimport React from 'react';\r\n\r\ninterface ShinyTextProps {\r\n    text: string;\r\n    disabled?: boolean;\r\n    speed?: number;\r\n    className?: string;\r\n}\r\n\r\nconst ShinyText: React.FC<ShinyTextProps> = ({ text, disabled = false, speed = 5, className = '' }) => {\r\n    const animationDuration = `${speed}s`;\r\n\r\n    return (\r\n        <div\r\n            className={`text-[#b5b5b5a4] bg-clip-text inline-block ${disabled ? '' : 'animate-shine'} ${className}`}\r\n            style={{\r\n                backgroundImage: 'linear-gradient(120deg, rgba(255, 255, 255, 0) 40%, rgba(255, 255, 255, 0.8) 50%, rgba(255, 255, 255, 0) 60%)',\r\n                backgroundSize: '200% 100%',\r\n                WebkitBackgroundClip: 'text',\r\n                animationDuration: animationDuration,\r\n            }}\r\n        >\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ShinyView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\r\n            <ShinyText\r\n                text=\"Shiny Glowing Text\"\r\n                className=\"text-4xl md:text-6xl font-bold text-center\"\r\n                speed={3}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShinyView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "slideIn.tsx",
      "content": "'use client';\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst SlideInText = ({ text = \"Simplicity is the ultimate sophistication.\" }: { text?: string }) => {\r\n    return (\r\n        <h2 className=\"text-2xl md:text-4xl font-bold text-center\">\r\n            {text.split('').map((char, i) => (\r\n                <motion.span\r\n                    key={i}\r\n                    initial={{ x: -50, opacity: 0 }}\r\n                    animate={{ x: 0, opacity: 1 }}\r\n                    transition={{ delay: i * 0.03, ease: \"easeOut\" }}\r\n                    className=\"inline-block\"\r\n                >\r\n                    {char === ' ' ? '\\u00A0' : char}\r\n                </motion.span>\r\n            ))}\r\n        </h2>\r\n    );\r\n};\r\n\r\nconst SlideInView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\r\n            <SlideInText text=\"Simplicity is the ultimate sophistication.\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SlideInView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "staggeredpopin.tsx",
      "content": "'use client';\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst StaggeredPopInText = ({ text = \"Pop!\" }: { text?: string }) => {\r\n    return (\r\n        <h2 className=\"text-6xl md:text-8xl font-bold flex justify-center\">\r\n            {text.split('').map((char, i) => (\r\n                <motion.span\r\n                    key={i}\r\n                    custom={i}\r\n                    initial={{ scale: 0, y: 20 }}\r\n                    animate={{ scale: 1, y: 0 }}\r\n                    transition={{ delay: i * 0.1, type: 'spring', stiffness: 200, damping: 12 }}\r\n                    className=\"inline-block\"\r\n                >\r\n                    {char === ' ' ? '\\u00A0' : char}\r\n                </motion.span>\r\n            ))}\r\n        </h2>\r\n    );\r\n};\r\n\r\nconst StaggeredPopInView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\r\n            <StaggeredPopInText text=\"Pop!\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StaggeredPopInView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "texturedmask.tsx",
      "content": "'use client';\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst TexturedMaskText = () => {\r\n    return (\r\n        <motion.h2\r\n            className=\"text-5xl md:text-8xl font-black uppercase text-transparent bg-clip-text\"\r\n            style={{\r\n                backgroundImage: 'url(https://images.unsplash.com/photo-1501630834273-4b5604d2ee31?q=80&w=2070&auto=format&fit=crop)',\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n            }}\r\n            initial={{ scale: 1.5 }}\r\n            animate={{ scale: 1 }}\r\n            transition={{ duration: 10, ease: 'linear', repeat: Infinity, repeatType: 'reverse' }}\r\n        >\r\n            Explore\r\n        </motion.h2>\r\n    );\r\n};\r\n\r\nconst TexturedMaskView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4 bg-black/5 dark:bg-white/5 rounded-lg\">\r\n            <TexturedMaskText />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TexturedMaskView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "typewriter.tsx",
      "content": "'use client'\r\nimport React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\ninterface TypewriterTextProps {\r\n  text?: string;\r\n  speed?: number;\r\n  deleteSpeed?: number;\r\n  pauseDuration?: number;\r\n  loop?: boolean;\r\n  className?: string;\r\n  showCursor?: boolean;\r\n}\r\n\r\nconst TypewriterText: React.FC<TypewriterTextProps> = ({\r\n  text = \"Building the future, one line at a time...\",\r\n  speed = 100,\r\n  deleteSpeed = 50,\r\n  pauseDuration = 2000,\r\n  loop = true,\r\n  className = \"\",\r\n  showCursor = true\r\n}) => {\r\n  const [displayText, setDisplayText] = useState('');\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let timeout: NodeJS.Timeout;\r\n\r\n    if (isPaused) {\r\n      timeout = setTimeout(() => {\r\n        setIsPaused(false);\r\n        if (loop) {\r\n          setIsDeleting(true);\r\n        }\r\n      }, pauseDuration);\r\n    } else if (isDeleting) {\r\n      if (displayText.length > 0) {\r\n        timeout = setTimeout(() => {\r\n          setDisplayText(text.substring(0, displayText.length - 1));\r\n        }, deleteSpeed);\r\n      } else {\r\n        setIsDeleting(false);\r\n      }\r\n    } else {\r\n      if (displayText.length < text.length) {\r\n        timeout = setTimeout(() => {\r\n          setDisplayText(text.substring(0, displayText.length + 1));\r\n        }, speed);\r\n      } else if (loop) {\r\n        setIsPaused(true);\r\n      }\r\n    }\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [displayText, isDeleting, isPaused, text, speed, deleteSpeed, pauseDuration, loop]);\r\n\r\n  return (\r\n    <div className={`font-mono ${className}`}>\r\n      <span className=\"text-2xl md:text-4xl font-bold text-slate-800 dark:text-slate-200\">\r\n        {displayText}\r\n        {showCursor && (\r\n          <motion.span\r\n            animate={{ opacity: [1, 0] }}\r\n            transition={{ duration: 0.8, repeat: Infinity, repeatType: \"reverse\" }}\r\n            className=\"text-blue-500\"\r\n          >\r\n            |\r\n          </motion.span>\r\n        )}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function TypewriterView() {\r\n  return (\r\n      <TypewriterText />\r\n  );\r\n}",
      "type": "registry:ui"
    },
    {
      "path": "wavy.tsx",
      "content": "'use client';\r\nimport { motion } from \"framer-motion\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst WavyText = ({ text = \"Wavy Motion\" }: { text?: string }) => {\r\n    const [animationTime, setAnimationTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setAnimationTime(prev => prev + 0.1);\r\n        }, 50);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\r\n            {text.split('').map((char, i) => {\r\n                const yOffset = Math.sin(animationTime + i * 0.3) * 10;\r\n                return (\r\n                    <motion.span\r\n                        key={i}\r\n                        animate={{\r\n                            y: yOffset,\r\n                            transition: {\r\n                                type: \"spring\",\r\n                                stiffness: 300,\r\n                                damping: 30,\r\n                                mass: 0.8\r\n                            }\r\n                        }}\r\n                        className=\"inline-block\"\r\n                    >\r\n                        {char === ' ' ? '\\u00A0' : char}\r\n                    </motion.span>\r\n                );\r\n            })}\r\n        </h2>\r\n    );\r\n};\r\n\r\nconst WavyView = () => {\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\r\n            <WavyText text=\"Smooth Wave Flow\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WavyView;\r\n",
      "type": "registry:ui"
    }
  ]
}